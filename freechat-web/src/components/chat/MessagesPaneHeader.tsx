import { useTranslation } from 'react-i18next';
import {
  Avatar,
  Box,
  Chip,
  IconButton,
  ListItemIcon,
  Menu,
  MenuItem,
  Stack,
  Switch,
  Typography,
} from '@mui/material';
import {
  ArrowBackIosNewRounded,
  CheckRounded,
  DeleteForeverRounded,
  FiberManualRecordRounded,
  FullscreenExitRounded,
  FullscreenRounded,
  InfoRounded,
  MoreVertRounded,
} from '@mui/icons-material';
import { ChatSessionDTO } from 'freechat-sdk';
import {
  getSenderName,
  getSenderStatus,
  getSenderStatusColor,
  toggleChatInfoPane,
  toggleChatsPane,
} from '../../libs/chat_utils';
import { FlexBox } from '..';
import { useRef, useState } from 'react';

type MessagesPaneHeaderProps = {
  session?: ChatSessionDTO;
  debugMode?: boolean;
  fullscreenMode?: boolean;
  disabled?: boolean;
  enableBackground?: boolean;
  setEnableBackground?: (enabled: boolean) => void;
  setDebugMode?: (debugMode: boolean) => void;
  setFullscreenMode?: (fullscreenMode: boolean) => void;
  onClearHistory?: (chatId: string) => void;
};

export default function MessagesPaneHeader(props: MessagesPaneHeaderProps) {
  const {
    session,
    debugMode,
    disabled = false,
    fullscreenMode = false,
    enableBackground,
    setEnableBackground,
    setDebugMode,
    setFullscreenMode,
    onClearHistory,
  } = props;
  const { t } = useTranslation('chat');
  const [openMenu, setOpenMenu] = useState(false);
  const anchorRef = useRef<HTMLButtonElement>(null);

  const sender = session?.character;
  const nickname = session?.context?.characterNickname ?? getSenderName(sender);
  const status = getSenderStatus(session);
  const iconColorMapper: { [key: string]: 'success' | 'warning' | 'disabled' } =
    {
      success: 'success',
      warning: 'warning',
      neutral: 'disabled',
    };

  function handleClearHistory(): void {
    if (onClearHistory && session?.context?.chatId) {
      onClearHistory(session.context.chatId);
    }
  }

  return (
    <Stack
      direction="row"
      justifyContent="space-between"
      sx={{
        borderBottom: '1px solid',
        borderColor: 'divider',
      }}
      py={{ xs: 2, md: 2 }}
      px={{ xs: 1, md: 2 }}
    >
      <Stack direction="row" spacing={{ xs: 1, md: 2 }} alignItems="center">
        <IconButton
          color="inherit"
          size="small"
          sx={{
            display: { xs: 'inline-flex', sm: 'none' },
          }}
          onClick={toggleChatsPane}
        >
          <ArrowBackIosNewRounded />
        </IconButton>
        <Avatar src={sender?.avatar} sx={{ width: 56, height: 56 }} />
        <Box>
          <Typography
            variant="h6"
            component="h2"
            noWrap
            sx={{
              display: 'flex',
              alignItems: 'center',
              gap: 1,
            }}
          >
            {nickname}
            <Chip
              variant="filled"
              size="small"
              label={t(status)}
              icon={
                <FiberManualRecordRounded
                  color={iconColorMapper[getSenderStatusColor(status)]}
                />
              }
            />
          </Typography>
          {sender && (
            <Typography variant="body2" color="text.secondary">
              {`@${sender.name} ${t('(Content generated by AI)')}`}
            </Typography>
          )}
        </Box>
      </Stack>
      <Stack spacing={1} direction="row" alignItems="center">
        {session?.isDebugEnabled && (
          <FlexBox sx={{ gap: 0 }}>
            <Typography variant="body2">{t('Debug')}</Typography>
            <Switch
              disabled={disabled}
              checked={debugMode}
              onChange={() => setDebugMode?.(!debugMode)}
            />
          </FlexBox>
        )}
        <IconButton
          sx={{
            display: { xs: 'none', sm: 'inline-flex' },
          }}
          disabled={disabled}
          color="inherit"
          onClick={() => setFullscreenMode?.(!fullscreenMode)}
        >
          {fullscreenMode? <FullscreenExitRounded /> : <FullscreenRounded />}
        </IconButton>
        <IconButton
          disabled={disabled}
          color="inherit"
          onClick={() => setOpenMenu(true)}
          ref={anchorRef}
        >
          <MoreVertRounded />
        </IconButton>
        <Menu
          id="chat-menu"
          anchorEl={anchorRef.current}
          open={openMenu}
          onClose={() => setOpenMenu(false)}
        >
          <MenuItem
            onClick={() => {
              toggleChatInfoPane();
              setOpenMenu(false);
            }}
            sx={{
              display: { sm: 'none' },
            }}
          >
            <ListItemIcon>
              <InfoRounded fontSize="small" />
            </ListItemIcon>
            {t('Chat Information')}
          </MenuItem>
          <MenuItem
            disabled={enableBackground === undefined}
            onClick={() => {
              setEnableBackground?.(!enableBackground);
              setOpenMenu(false);
            }}
          >
            <ListItemIcon>
              <CheckRounded
                fontSize="small"
                sx={{ opacity: enableBackground ? 1 : 0 }}
              />
            </ListItemIcon>
            {t('Enable Background')}
          </MenuItem>
          <MenuItem
            onClick={() => {
              handleClearHistory();
              setOpenMenu(false);
            }}
          >
            <ListItemIcon>
              <DeleteForeverRounded fontSize="small" />
            </ListItemIcon>
            {t('Clear History')}
          </MenuItem>
        </Menu>
      </Stack>
    </Stack>
  );
}
