openapi: 3.0.1
info:
  description: "# FreeChat: Create Some Friends for Yourself with AI\n\nEnglish |\
    \ [中文版](https://github.com/freechat-fun/freechat/blob/main/README.zh-CN.md)\n\n\
    ## Introduction\nWelcome! FreeChat aims to build a cloud-native, robust, and quickly\
    \ commercializable enterprise-level AI virtual character platform.\n\n## Features\n\
    - Primarily uses Java and emphasizes **security, robustness, scalability, traceability,\
    \ and maintainability**.\n- Boasts **account systems and permission management**,\
    \ supporting OAuth2 authentication. Introduces the \"organization\" concept and\
    \ related permission constraint functions.\n- Extensively employs distributed\
    \ technologies and caching to support **high concurrency** access.\n- Provides\
    \ flexible character customization options, supports direct intervention in prompts,\
    \ and supports **configuring multiple backends for each character**.\n- **Offers\
    \ a comprehensive range of Open APIs**, with more than 180 interfaces and provides\
    \ java/python/typescript SDKs. These interfaces enable easy construction of systems\
    \ for end-users.\n- Supports setting **RAG** (Retrieval Augmented Generation)\
    \ for characters.\n- Supports **long-term memory** for characters.\n- Supports\
    \ setting **quota limits** for characters.\n\n## System Snapshots\n\n## Character\
    \ Design\n```mermaid\nflowchart TD\n    A(Character) --> B(Profile)\n    A -->\
    \ C(Knowledge/RAG)\n    A --> D(Album)\n    A --> E(Backend-1)\n    A --> F(Backend-n...)\n\
    \    E --> G(Message Window)\n    E --> H(Long Term Memory Settings)\n    E -->\
    \ I(Quota Limit)\n    E --> J(Chat Prompt Task)\n    E --> K(Greeting Prompt Task)\n\
    \    E --> L(Moderation Settings)\n    J --> M(Model & Parameters)\n    J -->\
    \ N(API Keys)\n    J --> O(Prompt Refence)\n    J --> P(Tool Specifications)\n\
    \    O --> Q(Template)\n    O --> R(Variables)\n    O --> S(Version)\n    O -->\
    \ T(...)\n    style K stroke-dasharray: 5, 5\n    style L stroke-dasharray: 5,\
    \ 5\n    style P stroke-dasharray: 5, 5\n```\n\nAfter setting up a unified persona\
    \ and knowledge for a character, different backends can be configured. For example,\
    \ different model may be adopted for different users based on cost considerations.\n\
    \n## How to Play\n### Online Website\nYou can visit [freechat.fun](https://freechat.fun)\
    \ to experience FreeChat. Share your designed AI character!\n\n### Running in\
    \ a Kubernetes Cluster\nFreeChat is dedicated to the principles of cloud-native\
    \ design. If you have a Kubernetes cluster, you can deploy FreeChat to your environment\
    \ by following these steps:\n\n1. Put the Kubernetes configuration file in the\
    \ `configs/helm/` directory, named `kube-private.conf`.\n2. Place the Helm configuration\
    \ file in the same directory, named `values-private.yaml`. Make sure to reference\
    \ the default `values.yaml` and customize the variables as needed.\n3. Switch\
    \ to the `scripts/` directory.\n4. If needed, run `install-in.sh` to deploy `ingress-nginx`\
    \ on the Kubernetes cluster.\n5. If needed, run `install-cm.sh` to deploy `cert-manager`\
    \ on the Kubernetes cluster, which automatically issues certificates for domains\
    \ specified in `ingress.hosts`.\n6. Run `install-pvc.sh` to install PersistentVolumeClaim\
    \ resources.\n\n    > By default, FreeChat operates files by accessing the \"\
    local file system.\" You may want to use high-availability distributed storage\
    \ in the cloud. As a cloud-native-designed system, we recommend interfacing through\
    \ Kubernetes CSI to avoid individually adapting storage products for each cloud\
    \ platform. Most cloud service providers offer cloud storage drivers for Kubernetes,\
    \ with a series of predefined StorageClass resources. Please choose the appropriate\
    \ configuration according to your actual needs and set it in Helm's `global.storageClass`\
    \ option.\n    > \n    > *In the future, FreeChat may be refactored to use MinIO's\
    \ APIs directly, as it is now installed in the Kubernetes cluster as a dependency\
    \ (serving Milvus).*\n\n7. Run `install.sh` script to install FreeChat and its\
    \ dependencies.\n8. FreeChat aims to provide Open API services. If you like the\
    \ interactive experience of [freechat.fun](https://freechat.fun), run `install-web.sh`\
    \ to deploy the front-end application.\n9. Run `restart.sh` to restart the service.\n\
    10. If you modified any Helm configuration files, use `upgrade.sh` to update the\
    \ corresponding Kubernetes resources.\n11. To remove specific resources, run the\
    \ `uninstall*.sh` script corresponding to the resource you want to uninstall.\n\
    \nAs a cloud-native application, the services FreeChat relies on are obtained\
    \ and deployed to your cluster through the helm repository.\n\nIf you prefer cloud\
    \ services with SLA (Service Level Agreement) guarantees, simply make the relevant\
    \ settings in `configs/helm/values-private.yaml`:\n```yaml\nbitnami:\n  mysql:\n\
    \    enabled: false\n  redis:\n    enabled: false\n  milvus:\n    enabled: false\n\
    \nmysql:\n  url: <your mysql url>\n  auth:\n    rootPassword: <your mysql root\
    \ password>\n    username: <your mysql username>\n    password: <your mysql password\
    \ for the username>\n\nredis:\n  url: <your redis url>\n  auth:\n    password:\
    \ <your redis password>\n\n\nmilvus:\n  url: <your milvus url>\n  milvus:\n  \
    \  auth:\n      token: <your milvus api-key>\n```\n\nWith this, FreeChat will\
    \ not automatically install these services, but rather use the configuration information\
    \ to connect directly.\n\n### Running Locally\nYou can also run FreeChat locally.\
    \ Currently supported on MacOS and Linux (although only tested on MacOS). You\
    \ need to install the Docker toolset and have a network that can access [Docker\
    \ Hub](https://hub.docker.com/).\n\nOnce ready, enter the `scripts/` directory\
    \ and run `local-run.sh`, which will download and run the necessary docker containers.\
    \ After a successful startup, you can access `http://localhost` via a browser\
    \ to see the locally running freechat.fun. Use `local-run.sh --help` to view the\
    \ supported options of the script. Good luck!\n\n### Running in an IDE\nTo run\
    \ FreeChat in an IDE, you need to start all dependent services first but do not\
    \ need to run the container for the FreeChat application itself. You can execute\
    \ the `scripts/local-deps.sh` script to start services like `MySQL`, `Redis`,\
    \ `Milvus`, etc., locally. Once done, open and debug `freechat-start/src/main/java/fun/freechat/Application.java`。\
    Make sure you have set the following startup parameters:\n```shell\n-Dspring.config.location=classpath:/application.yml,classpath:/application-local.yml\
    \ \\\n-DAPP_HOME=local-data/freechat \\\n-Dspring.profiles.active=local\n```\n\
    \n### 使用 SDK\n#### Java\n- **Dependency**\n```xml\n<dependency>\n  <groupId>fun.freechat</groupId>\n\
    \  <artifactId>freechat-sdk</artifactId>\n  <version>${freechat-sdk.version}</version>\n\
    </dependency>\n```\n\n- **Example**\n```java\nimport fun.freechat.client.ApiClient;\n\
    import fun.freechat.client.ApiException;\nimport fun.freechat.client.Configuration;\n\
    import fun.freechat.client.api.AccountApi;\nimport fun.freechat.client.auth.ApiKeyAuth;\n\
    import fun.freechat.client.model.UserDetailsDTO;\n\npublic class AccountClientExample\
    \ {\n    public static void main(String[] args) {\n        ApiClient defaultClient\
    \ = Configuration.getDefaultApiClient();\n        defaultClient.setBasePath(\"\
    https://freechat.fun\");\n        \n        // Configure HTTP bearer authorization:\
    \ bearerAuth\n        HttpBearerAuth bearerAuth = (HttpBearerAuth) defaultClient.getAuthentication(\"\
    bearerAuth\");\n        bearerAuth.setBearerToken(\"FREECHAT_TOKEN\");\n\n   \
    \     AccountApi apiInstance = new AccountApi(defaultClient);\n        try {\n\
    \            UserDetailsDTO result = apiInstance.getUserDetails();\n         \
    \   System.out.println(result);\n        } catch (ApiException e) {\n        \
    \    e.printStackTrace();\n        }\n    }\n}\n```\n\n#### Python\n- **Installation**\n\
    ```shell\npip install freechat-sdk\n```\n\n- **Example**\n```python\nimport freechat_sdk\n\
    from freechat_sdk.rest import ApiException\nfrom pprint import pprint\n\n# Defining\
    \ the host is optional and defaults to https://freechat.fun\n# See configuration.py\
    \ for a list of all supported configuration parameters.\nconfiguration = freechat_sdk.Configuration(\n\
    \    host = \"https://freechat.fun\"\n)\n\n# Configure Bearer authorization: bearerAuth\n\
    configuration = freechat_sdk.Configuration(\n    access_token = os.environ[\"\
    FREECHAT_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\n\
    with freechat_sdk.ApiClient(configuration) as api_client:\n    # Create an instance\
    \ of the API class\n    api_instance = freechat_sdk.AccountApi(api_client)\n\n\
    \    try:\n        details = api_instance.get_user_details()\n        pprint(details)\n\
    \    except ApiException as e:\n        print(\"Exception when calling AccountClient->get_user_details:\
    \ %s\\n\" % e)\n```\n\n#### TypeScript\n- **Installation**\n```shell\nnpm install\
    \ freechat-sdk --save\n```\n\n- **Example**\n\nRefer to [FreeChatApiContext.tsx](https://github.com/freechat-fun/freechat/blob/main/freechat-web/src/contexts/FreeChatApiProvider.tsx)\n\
    \n## System Dependencies\n| | Projects\n| ---- | ----\n| Application Framework\
    \ | [Spring Boot](https://spring.io/projects/spring-boot/)\n| LLM Framework |\
    \ [LangChain4j](https://docs.langchain4j.dev/)\n| Model Providers | [OpenAI](https://platform.openai.com/),\
    \ [DashScope](https://dashscope.aliyun.com/)\n| Database Systems | [MySQL](https://www.mysql.com/),\
    \ [Redis](https://redis.io/), [Milvus](https://milvus.io/)\n| OpenAPI Tools |\
    \ [Springdoc-openapi](https://springdoc.org/), [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator),\
    \ [OpenAPI Explorer](https://github.com/Authress-Engineering/openapi-explorer)\n\
    \n## Collaboration\n### Application Integration\nThe FreeChat system is entirely\
    \ oriented towards Open APIs. The site [freechat.fun](https://freechat.fun) is\
    \ developed using its TypeScript SDK and hardly depends on private interfaces.\
    \ You can use these online interfaces to develop your own applications or sites,\
    \ making them fit your preferences. Currently, FreeChat is completely free with\
    \ no paid plans (after all, users use their own API Key to call LLM services).\n\
    \n### Model Integration\nFreeChat aims to explore AI virtual character technology\
    \ with anthropomorphic characteristics. So far, it supports model services from\
    \ OpenAI and DashScope ([HuggingFace](https://huggingface.co/) is also expected\
    \ to be supported soon). However, we are more interested in supporting models\
    \ that are under research and can endow AI with more personality traits. If you\
    \ are researching this area and hope FreeChat supports your model, please contact\
    \ us. We look forward to AI technology helping people create their own \"soul\
    \ mates\" in the future."
  title: FreeChat OpenAPI Definition
  version: 1.0.2
servers:
- url: http://127.0.0.1:8080/
security:
- bearerAuth: []
tags:
- description: "Application metadata, viewable only by super administrators."
  name: App Meta (for admin)
- description: "System encryption service, callable only by super administrators."
  name: Encryption Manager (for admin)
- description: "Application configuration information, viewable only by super administrators."
  name: App Config (for admin)
- description: "Manage users, callable only by super administrators."
  name: Account Manager (for admin)
paths:
  /api/v1/rag/task/{taskId}:
    delete:
      description: Delete a RAG task.
      operationId: deleteRagTask
      parameters:
      - description: The taskId to be deleted
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete RAG Task
      tags:
      - Rag
      x-accepts:
      - application/json
    get:
      description: Get the RAG task details.
      operationId: getRagTask
      parameters:
      - description: The taskId to be queried
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RagTaskDetailsDTO'
          description: OK
      summary: Get RAG Task
      tags:
      - Rag
      x-accepts:
      - application/json
    put:
      description: Update a RAG task.
      operationId: updateRagTask
      parameters:
      - description: The taskId to be updated
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RagTaskDTO'
        description: The prompt task info to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update RAG Task
      tags:
      - Rag
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/{promptId}:
    delete:
      description: Delete prompt. Returns success or failure.
      operationId: deletePrompt
      parameters:
      - description: The promptId to be deleted
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Prompt
      tags:
      - Prompt
      x-accepts:
      - application/json
    put:
      description: "Update prompt, refer to /api/v1/prompt/create, required field:\
        \ promptId. Returns success or failure."
      operationId: updatePrompt
      parameters:
      - description: The promptId to be updated
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              version: 2
              name: Second Test Prompt (New)
              visibility: public
              description: Second prompt description (new)
              template: "I wanna call you {robot}"
              inputs: "{\"robot\": null}"
              tags:
              - test2
              - demo2
              - robot
              aiModels:
              - "123"
              - "456"
            schema:
              $ref: '#/components/schemas/PromptUpdateDTO'
        description: The prompt information to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Prompt
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/task/{promptTaskId}:
    delete:
      description: Delete a prompt task.
      operationId: deletePromptTask
      parameters:
      - description: The promptTaskId to be deleted
        explode: false
        in: path
        name: promptTaskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Prompt Task
      tags:
      - Prompt Task
      x-accepts:
      - application/json
    get:
      description: Get the prompt task details.
      operationId: getPromptTask
      parameters:
      - description: The promptTaskId to be queried
        explode: false
        in: path
        name: promptTaskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptTaskDetailsDTO'
          description: OK
      summary: Get Prompt Task
      tags:
      - Prompt Task
      x-accepts:
      - application/json
    put:
      description: Update a prompt task.
      operationId: updatePromptTask
      parameters:
      - description: The promptTaskId to be updated
        explode: false
        in: path
        name: promptTaskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptTaskDTO'
        description: The prompt task info to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Prompt Task
      tags:
      - Prompt Task
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/{pluginId}:
    delete:
      description: Delete plugin. Returns success or failure.
      operationId: deletePlugin
      parameters:
      - description: The pluginId to be deleted
        explode: false
        in: path
        name: pluginId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Plugin
      tags:
      - Plugin
      x-accepts:
      - application/json
    put:
      description: "Update plugin, refer to /api/v1/plugin/create, required field:\
        \ pluginId. Returns success or failure."
      operationId: updatePlugin
      parameters:
      - description: The pluginId to be updated
        explode: false
        in: path
        name: pluginId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              name: Second Test Plugin (New)
              visibility: public
              tags:
              - test2
              - demo2
              - business
            schema:
              $ref: '#/components/schemas/PluginUpdateDTO'
        description: The plugin information to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Plugin
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/refresh/{pluginId}:
    put:
      description: "For online manifest, api-docs information provided at the time\
        \ of entry, this interface can immediately refresh the information in the\
        \ system cache (default cache time is 1 hour). Generally, there is no need\
        \ to call, unless you know that the corresponding plugin platform has just\
        \ updated the interface, and the business side wants to get the latest information\
        \ immediately, then call this interface to delete the system cache."
      operationId: refreshPluginInfo
      parameters:
      - description: The pluginId to be fetched
        explode: false
        in: path
        name: pluginId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: OK
      summary: Refresh Plugin Information
      tags:
      - Plugin
      x-accepts:
      - application/json
  /api/v1/org/manage/{username}/subordinates:
    delete:
      description: Fully delete the direct subordinate relationship of the subordinate
        account.
      operationId: removeSubordinateSubordinatesTree
      parameters:
      - description: "The account being operated, must be a subordinate account of\
          \ the current account"
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Clear Subordinate Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
    get:
      description: "Get the subordinate relationship of the subordinate account, including\
        \ direct and indirect subordinates, default does not include virtual managed\
        \ subordinates, so there will be no circular relationship.<br/>By specifying\
        \ all=1, virtual managed subordinates can be returned, in this case, there\
        \ may be a circular relationship."
      operationId: getSubordinateSubordinates
      parameters:
      - description: "The account being queried, must be a subordinate account of\
          \ the current account"
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return virtual managed subordinates
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get Subordinate Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
    put:
      description: "Fully update the direct subordinate relationship of the subordinate\
        \ account (i.e., will delete the relationship that existed before but is not\
        \ in this list), if there is a circular relationship, it will automatically\
        \ be set as a virtual relationship."
      operationId: updateSubordinateSubordinates
      parameters:
      - description: "The account being operated, must be a subordinate account of\
          \ the current account"
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: "The (direct) subordinate account of the subordinate account,\
          \ all accounts must be subordinate accounts of the current account"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Subordinate Relationship
      tags:
      - Organization
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/org/manage/{username}/owners:
    get:
      description: |
        Get the superior relationship of the subordinate account, including direct and indirect owners, default does not include virtual reported owners, so there will be no circular relationship.<br/>
        By specifying all=1, virtual reported owners can be returned, in this case, there may be a circular relationship.
      operationId: getSubordinateOwners
      parameters:
      - description: "The account being queried, must be a subordinate account of\
          \ the current account"
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to return virtual reported owners
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get Superior Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
    put:
      description: "Fully update the direct superior relationship of the subordinate\
        \ account (i.e., will delete the relationship that existed before but is not\
        \ in this list), if there is a circular relationship, it will automatically\
        \ be set as a virtual relationship."
      operationId: updateSubordinateOwners
      parameters:
      - description: "The account being operated, must be a subordinate account of\
          \ the current account"
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: "The (direct) superior account of the subordinate account, all\
          \ accounts must be subordinate accounts of the current account"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Superior Relationship
      tags:
      - Organization
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/org/authority/{username}:
    get:
      description: List the permission list of the subordinate account.
      operationId: listSubordinateAuthorities
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List Subordinate Permissions
      tags:
      - Organization
      x-accepts:
      - application/json
    put:
      description: "Update the permission list of the subordinate account, the granted\
        \ permissions cannot be higher than the permissions owned by oneself, for\
        \ example, a resource administrator cannot grant the role of an organization\
        \ administrator to a subordinate account."
      operationId: updateSubordinateAuthorities
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        description: Permission list
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Subordinate Permissions
      tags:
      - Organization
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/chat/{chatId}:
    delete:
      description: Delete the chat session.
      operationId: deleteChat
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Chat Session
      tags:
      - Chat
      x-accepts:
      - application/json
    put:
      description: Update the chat session.
      operationId: updateChat
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatUpdateDTO'
        description: The chat session information to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Chat Session
      tags:
      - Chat
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/{characterId}:
    delete:
      description: Delete character. Returns success or failure.
      operationId: deleteCharacter
      parameters:
      - description: The characterId to be deleted
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Character
      tags:
      - Character
      x-accepts:
      - application/json
    put:
      description: "Update character, refer to /api/v1/character/create, required\
        \ field: characterId. Returns success or failure."
      operationId: updateCharacter
      parameters:
      - description: The characterId to be updated
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              version: 2
              name: Second Test Character (New)
              visibility: public
              description: Second character description (new)
              profile: I am Kelvin
              tags:
              - test2
              - demo2
              - robot
            schema:
              $ref: '#/components/schemas/CharacterUpdateDTO'
        description: The character information to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Character
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/backend/{characterBackendId}:
    delete:
      description: Remove a backend configuration.
      operationId: removeCharacterBackend
      parameters:
      - description: The characterBackendId to be removed
        explode: false
        in: path
        name: characterBackendId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Remove Character Backend
      tags:
      - Character
      x-accepts:
      - application/json
    put:
      description: Update a backend configuration.
      operationId: updateCharacterBackend
      parameters:
      - description: The characterBackendId to be updated
        explode: false
        in: path
        name: characterBackendId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterBackendDTO'
        description: The character backend configuration to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Character Backend
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/backend/default/{characterBackendId}:
    put:
      description: Set the default backend configuration.
      operationId: setDefaultCharacterBackend
      parameters:
      - description: The characterBackendId to be set to default
        explode: false
        in: path
        name: characterBackendId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Set Default Character Backend
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/ai/apikey/enable/{id}:
    put:
      description: Enable the credential information of the model provider.
      operationId: enableAiApiKey
      parameters:
      - description: Credential identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Enable Model Provider Credential
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/apikey/disable/{id}:
    put:
      description: Disable the credential information of the model provider.
      operationId: disableAiApiKey
      parameters:
      - description: Credential identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Disable Model Provider Credential
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/agent/{agentId}:
    delete:
      description: Delete agent. Return success or failure.
      operationId: deleteAgent
      parameters:
      - description: AgentId to be deleted
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Agent
      tags:
      - Agent
      x-accepts:
      - application/json
    put:
      description: "Update agent, refer to /api/v1/agent/create, required field: agentId.\
        \ Return success or failure."
      operationId: updateAgent
      parameters:
      - description: AgentId to be updated
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              version: 2
              name: Second Test Agent (New)
              visibility: public
              description: Second agent description (new)
              config: "{}"
              inputs: "{\"robot\": null}"
              tags:
              - test2
              - demo2
              - robot
              aiModels:
              - "123"
              - "456"
            schema:
              $ref: '#/components/schemas/AgentUpdateDTO'
        description: Agent information to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update Agent
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/admin/user:
    post:
      description: Create user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            example:
              username: Jack
              password: jack
              nickname: Jack（测试账号）
            schema:
              $ref: '#/components/schemas/UserFullDetailsDTO'
        description: User information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Create User
      tags:
      - Account Manager (for admin)
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: Update user information.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFullDetailsDTO'
        description: User information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update User
      tags:
      - Account Manager (for admin)
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/admin/token/{token}:
    delete:
      description: Delete the specified API Token.
      operationId: deleteTokenForUser
      parameters:
      - description: API Token
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete API Token
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
    put:
      description: Disable the specified API Token.
      operationId: disableTokenForUser
      parameters:
      - description: API Token
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Disable API Token
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/authority/{username}:
    get:
      description: List the user's permissions.
      operationId: listAuthoritiesOfUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: OK
      summary: List User Permissions
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
    put:
      description: Update the user's permission list.
      operationId: updateAuthoritiesOfUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
              uniqueItems: true
        description: Permission list
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update User Permissions
      tags:
      - Account Manager (for admin)
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/account/token/{token}:
    delete:
      description: Delete an API Token.
      operationId: deleteToken
      parameters:
      - description: Token content
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Delete API Token
      tags:
      - Account
      x-accepts:
      - text/plain
    put:
      description: "Disable an API Token, the token is not deleted."
      operationId: disableToken
      parameters:
      - description: Token content
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Disable API Token
      tags:
      - Account
      x-accepts:
      - text/plain
  /api/v1/account/token/id/{id}:
    delete:
      description: Delete the API token by id.
      operationId: deleteTokenById
      parameters:
      - description: Token id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete API Token by Id
      tags:
      - Account
      x-accepts:
      - application/json
    get:
      description: Get the API token by id.
      operationId: getTokenById
      parameters:
      - description: Token id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Get API Token by Id
      tags:
      - Account
      x-accepts:
      - text/plain
    put:
      description: Disable the API token by id.
      operationId: disableTokenById
      parameters:
      - description: Token id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Disable API Token by Id
      tags:
      - Account
      x-accepts:
      - application/json
  /api/v1/account/details:
    get:
      description: "Return the detailed user information of the current account, the\
        \ fields refer to the [standard claims](https://openid.net/specs/openid-connect-core-1_0.html#Claims)\
        \ of OpenID Connect (OIDC)."
      operationId: getUserDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDTO'
          description: OK
      summary: Get User Details
      tags:
      - Account
      x-accepts:
      - application/json
    put:
      description: Update the detailed user information of the current account.
      operationId: updateUserInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsDTO'
        description: User information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Update User Details
      tags:
      - Account
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/stats/{infoType}/{infoId}/{statsType}:
    get:
      description: Get the statistics of the corresponding metrics of the corresponding
        resources.
      operationId: getStatistic
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Unique resource identifier
        explode: false
        in: path
        name: infoId
        required: true
        schema:
          type: string
        style: simple
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Get Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
    post:
      description: Increase the statistics of the corresponding metrics of the corresponding
        resources by one. Return the latest statistics.
      operationId: increaseStatistic
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Unique resource identifier
        explode: false
        in: path
        name: infoId
        required: true
        schema:
          type: string
        style: simple
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Increase Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/{infoType}/{infoId}/{statsType}/{delta}:
    post:
      description: Add the statistics of the corresponding metrics of the corresponding
        resources. The increment can be negative. Return the latest statistics.
      operationId: addStatistic
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Unique resource identifier
        explode: false
        in: path
        name: infoId
        required: true
        schema:
          type: string
        style: simple
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Delta in statistical value
        explode: false
        in: path
        name: delta
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Add Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/rag/task/{characterId}:
    post:
      description: Create a RAG task.
      operationId: createRagTask
      parameters:
      - description: The characterId to be added a RAG task
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RagTaskDTO'
        description: The RAG task to be added
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Create RAG Task
      tags:
      - Rag
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/rag/task/start/{taskId}:
    post:
      description: Start a RAG task.
      operationId: startRagTask
      parameters:
      - description: The taskId to be started
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Start RAG Task
      tags:
      - Rag
      x-accepts:
      - application/json
  /api/v1/rag/task/cancel/{taskId}:
    post:
      description: Cancel a RAG task.
      operationId: cancelRagTask
      parameters:
      - description: The taskId to be canceled
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Cancel RAG Task
      tags:
      - Rag
      x-accepts:
      - application/json
  /api/v1/prompt:
    post:
      description: |
        Create a prompt, required fields:
        - Prompt name
        - Prompt content
        - Applicable model

        Limitations:
        - Description: 300 characters
        - Template: 1000 characters
        - Example: 2000 characters
        - Tags: 5
        - Parameters: 10
      operationId: createPrompt
      requestBody:
        content:
          application/json:
            example:
              name: A Test Prompt
              description: A prompt description
              template: "Hello world. I'm {name}"
              inputs: "{\"name\": null}"
              tags:
              - test
              - demo
              aiModels:
              - "123"
            schema:
              $ref: '#/components/schemas/PromptCreateDTO'
        description: Information of the prompt to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Create Prompt
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/versions/{name}:
    post:
      description: List the versions and corresponding promptIds by prompt name.
      operationId: listPromptVersionsByName
      parameters:
      - description: Prompt name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptItemForNameDTO'
                type: array
          description: OK
      summary: List Versions by Prompt Name
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/task:
    post:
      description: Create a prompt task.
      operationId: createPromptTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptTaskDTO'
        description: The prompt task to be added
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create Prompt Task
      tags:
      - Prompt Task
      x-content-type: application/json
      x-accepts:
      - text/plain
  /api/v1/prompt/send:
    post:
      description: "Send the prompt to the AI service. Note that if the embedding\
        \ model is called, the return is an embedding array, placed in the details\
        \ field of the result; the original text is in the text field of the result."
      operationId: sendPrompt
      requestBody:
        content:
          application/json:
            example:
              prompt: say 'hello'
              params:
                apiKey: ""
                modelId: "[open_ai]gpt-3.5-turbo"
            schema:
              $ref: '#/components/schemas/PromptAiParamDTO'
        description: Call parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LlmResultDTO'
          description: OK
      summary: Send Prompt
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/send/stream:
    post:
      description: "Refer to /api/v1/prompt/send, stream back chunks of the response."
      operationId: streamSendPrompt
      requestBody:
        content:
          application/json:
            example:
              prompt: say 'hello'
              params:
                apiKey: ""
                modelId: "[open_ai]gpt-3.5-turbo"
            schema:
              $ref: '#/components/schemas/PromptAiParamDTO'
        description: Call parameters
        required: true
      responses:
        "200":
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
          description: OK
      summary: Send Prompt by Streaming Back
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - text/event-stream
  /api/v1/prompt/search:
    post:
      description: |
        Search prompts:
        - Specifiable query fields, and relationship:
          - Scope: private, public_org or public. Private can only search this account.
          - Username: exact match, only valid when searching public, public_org. If not specified, search all users.
          - Tags: exact match (support and, or logic).
          - Model type: exact match (support and, or logic).
          - Name: left match.
          - Type, exact match: string (default) | chat.
          - Language, exact match.
          - General: name, description, template, example, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness.
        - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending.
        - The search result is the prompt summary content.
        - Support pagination.
      operationId: searchPromptSummary
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/PromptQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptSummaryDTO'
                type: array
          description: OK
      summary: Search Prompt Summary
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/publish/{promptId}/{visibility}:
    post:
      description: "Publish prompt, draft content becomes formal content, version\
        \ number increases by 1. After successful publication, a new promptId will\
        \ be generated and returned. You need to specify the visibility for publication."
      operationId: publishPrompt
      parameters:
      - description: The promptId to be published
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Visibility: public | private | ..."
        explode: false
        in: path
        name: visibility
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Publish Prompt
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/details/search:
    post:
      description: "Same as /api/v1/prompt/search, but returns detailed information\
        \ of the prompt."
      operationId: searchPromptDetails
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/PromptQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptDetailsDTO'
                type: array
          description: OK
      summary: Search Prompt Details
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/count:
    post:
      description: Calculate the number of prompts according to the specified query
        conditions.
      operationId: countPrompts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Calculate Number of Prompts
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/clone/{promptId}:
    post:
      description: |
        Enter the promptId, generate a new record, the content is basically the same as the original prompt, but the following fields are different:
        - Version number is 1
        - Visibility is private
        - The parent prompt is the source promptId
        - The creation time is the current moment.
        - All statistical indicators are zeroed.

        Return the new promptId.
      operationId: clonePrompt
      parameters:
      - description: The referenced promptId
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Clone Prompt
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/batch:
    delete:
      description: "Delete multiple prompts. Ensure transactionality, return the list\
        \ of successfully deleted promptIds."
      operationId: deletePrompts
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: int64
                type: integer
              type: array
        description: List of promptIds to be deleted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Delete Prompts
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      description: "Batch create multiple prompts. Ensure transactionality, return\
        \ the promptId list after success."
      operationId: createPrompts
      requestBody:
        content:
          application/json:
            example:
            - name: First Test Prompt
              description: First prompt description
              template: "Hello world. I'm {name}"
              inputs: "{\"name\": null}"
              tags:
              - test1
              - demo1
              aiModels:
              - "123"
            - name: Second Test Prompt
              visibility: public
              description: Second prompt description
              template: "I wanna call you {robot}"
              inputs: "{\"robot\": null}"
              tags:
              - test2
              - demo2
              aiModels:
              - "123"
              - "456"
            schema:
              items:
                $ref: '#/components/schemas/PromptCreateDTO'
              type: array
        description: List of prompt information to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Create Prompts
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/batch/search:
    post:
      description: Batch call shortcut for /api/v1/prompt/search.
      operationId: batchSearchPromptSummary
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/PromptQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/PromptSummaryDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Prompt Summaries
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/batch/details/search:
    post:
      description: Batch call shortcut for /api/v1/prompt/details/search.
      operationId: batchSearchPromptDetails
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/PromptQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/PromptDetailsDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Prompt Details
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/batch/clone:
    post:
      description: "Batch clone multiple prompts. Ensure transactionality, return\
        \ the promptId list after success."
      operationId: clonePrompts
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: int64
                type: integer
              type: array
        description: List of prompt information to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Clone Prompts
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/prompt/apply/template:
    post:
      description: Apply parameters to prompt template.
      operationId: applyPromptTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptTemplateDTO'
        description: String type prompt template
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Apply Parameters to Prompt Template
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - text/plain
  /api/v1/prompt/apply/ref:
    post:
      description: Apply parameters to prompt record.
      operationId: applyPromptRef
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptRefDTO'
        description: Prompt record
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Apply Parameters to Prompt Record
      tags:
      - Prompt
      x-content-type: application/json
      x-accepts:
      - text/plain
  /api/v1/plugin:
    post:
      description: |
        Create a plugin, required fields:
        - Plugin name
        - Plugin manifestInfo (URL or JSON)
        - Plugin apiInfo (URL or JSON)

        Limitations:
        - Name: 100 characters
        - Example: 2000 characters
        - Tags: 5
      operationId: createPlugin
      requestBody:
        content:
          application/json:
            example:
              name: Test plugin
              provider: freechat.fun NLP Lab
              manifestInfo: http://127.0.0.1:8080/public/test/plugin/demo/.well-known/ai-plugin.json
              apiInfo: http://127.0.0.1:8080/public/test/plugin/demo/.well-known/api-docs.json
              tags:
              - test
              - demo
            schema:
              $ref: '#/components/schemas/PluginCreateDTO'
        description: Information of the plugin to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Create Plugin
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/search:
    post:
      description: |
        Search plugins:
        - Specifiable query fields, and relationship:
          - Scope: private, public_org or public. Private can only search this account.
          - Username: exact match, only valid when searching public, public_org. If not specified, search all users.
          - Plugin information format: currently supported: dash_scope, open_ai.
          - Interface information format: currently supported: openapi_v3.
          - Tags: exact match (support and, or logic).
          - Model type: exact match (support and, or logic).
          - Name: left match.
          - Provider: left match.
          - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness.
        - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending.
        - The search result is the plugin summary content.
        - Support pagination.
      operationId: searchPluginSummary
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                provider: freechat.fun
                text: demo
                tags:
                - test2
              orderBy:
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/PluginQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PluginSummaryDTO'
                type: array
          description: OK
      summary: Search Plugin Summary
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/details/search:
    post:
      description: "Same as /api/v1/plugin/search, but returns detailed information\
        \ of the plugin."
      operationId: searchPluginDetails
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                provider: freechat.fun
                tags:
                - test2
              orderBy:
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/PluginQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PluginDetailsDTO'
                type: array
          description: OK
      summary: Search Plugin Details
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/count:
    post:
      description: Calculate the number of plugins according to the specified query
        conditions.
      operationId: countPlugins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Calculate Number of Plugins
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/batch:
    delete:
      description: "Delete multiple plugins. Ensure transactionality, return the list\
        \ of successfully deleted pluginIds."
      operationId: deletePlugins
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: int64
                type: integer
              type: array
        description: List of pluginIds to be deleted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Delete Plugins
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      description: "Batch create multiple plugins. Ensure transactionality, return\
        \ the pluginId list after success."
      operationId: createPlugins
      requestBody:
        content:
          application/json:
            example:
            - name: First Test Plugin
              provider: freechat.fun NLP Lab
              manifestInfo: https://freechat.fun/public/test/plugin/demo/.well-known/ai-plugin.json
              apiInfo: https://freechat.fun/public/test/plugin/demo/.well-known/api-docs.json
              tags:
              - test1
              - demo1
            - name: Second Test Plugin
              visibility: private
              manifestInfo: https://freechat.fun/public/test/plugin/demo/.well-known/ai-plugin.json
              apiInfo: https://freechat.fun/public/test/plugin/demo/.well-known/api-docs.json
              tags:
              - test2
              - demo2
              aiModels:
              - "123"
              - "456"
            schema:
              items:
                $ref: '#/components/schemas/PluginCreateDTO'
              type: array
        description: List of plugin information to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Create Plugins
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/batch/search:
    post:
      description: Batch call shortcut for /api/v1/plugin/search.
      operationId: batchSearchPluginSummary
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: demo
              orderBy:
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Test
                provider: freechat.fun
                text: demo
                manifestFormat: dash_scope
                apiFormat: openapi_v3
                tags:
                - test
                aiModels:
                - "123"
              orderBy:
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/PluginQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/PluginSummaryDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Plugin Summaries
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/plugin/batch/details/search:
    post:
      description: Batch call shortcut for /api/v1/plugin/details/search.
      operationId: batchSearchPluginDetails
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: demo
              orderBy:
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Test
                provider: freechat.fun
                text: demo
                manifestFormat: dash_scope
                apiFormat: openapi_v3
                tags:
                - test
                aiModels:
                - "123"
              orderBy:
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/PluginQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/PluginDetailsDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Plugin Details
      tags:
      - Plugin
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/chat:
    get:
      description: List chats of current user.
      operationId: listChats
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatSessionDTO'
                type: array
          description: OK
      summary: List Chats
      tags:
      - Chat
      x-accepts:
      - application/json
    post:
      description: Start a chat session.
      operationId: startChat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreateDTO'
        description: Parameters for starting a chat session
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Start Chat Session
      tags:
      - Chat
      x-content-type: application/json
      x-accepts:
      - text/plain
  /api/v1/chat/send/{chatId}:
    post:
      description: Send a chat message to character.
      operationId: sendMessage
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageDTO'
        description: Chat message
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LlmResultDTO'
          description: OK
      summary: Send Chat Message
      tags:
      - Chat
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/chat/send/stream/{chatId}:
    post:
      description: "Refer to /api/v1/chat/send/{chatId}, stream back chunks of the\
        \ response."
      operationId: streamSendMessage
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageDTO'
        description: Chat message
        required: true
      responses:
        "200":
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SseEmitter'
          description: OK
      summary: Send Chat Message by Streaming Back
      tags:
      - Chat
      x-content-type: application/json
      x-accepts:
      - text/event-stream
  /api/v1/chat/messages/rollback/{chatId}/{count}:
    post:
      description: Rollback messages of a chat.
      operationId: rollbackMessages
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - description: Message count to be rolled back
        explode: false
        in: path
        name: count
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Rollback Chat Messages
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/character:
    post:
      description: Create a character.
      operationId: createCharacter
      requestBody:
        content:
          application/json:
            example:
              name: A Test Character
              description: A character description
              profile: Hello world. I'm Jack
              tags:
              - test
              - demo
            schema:
              $ref: '#/components/schemas/CharacterCreateDTO'
        description: Information of the character to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Create Character
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/versions/{name}:
    post:
      description: List the versions and corresponding characterIds by character name.
      operationId: listCharacterVersionsByName
      parameters:
      - description: Character name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterItemForNameDTO'
                type: array
          description: OK
      summary: List Versions by Character Name
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/search:
    post:
      description: |
        Search characters:
        - Specifiable query fields, and relationship:
          - Scope: private, public_org or public. Private can only search this account.
          - Username: exact match, only valid when searching public, public_org. If not specified, search all users.
          - Tags: exact match (support and, or logic).
          - Name: left match.
          - Language, exact match.
          - General: name, description, profile, chat style, experience, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness.
        - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending.
        - The search result is the character summary content.
        - Support pagination.
      operationId: searchCharacterSummary
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/CharacterQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterSummaryDTO'
                type: array
          description: OK
      summary: Search Character Summary
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/publish/{characterId}:
    post:
      description: "Publish character, draft content becomes formal content, version\
        \ number increases by 1. After successful publication, a new characterId will\
        \ be generated and returned. You need to specify the visibility for publication."
      operationId: publishCharacter
      parameters:
      - description: The characterId to be published
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Publish Character
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/publish/{characterId}/{visibility}:
    post:
      description: "Publish character, draft content becomes formal content, version\
        \ number increases by 1. After successful publication, a new characterId will\
        \ be generated and returned. You need to specify the visibility for publication."
      operationId: publishCharacter_1
      parameters:
      - description: The characterId to be published
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Visibility: public | private | ..."
        explode: false
        in: path
        name: visibility
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Publish Character
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/picture/{characterId}:
    post:
      description: Upload a picture of the character.
      operationId: uploadCharacterPicture
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadCharacterPicture_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Upload Character Picture
      tags:
      - Character
      x-content-type: multipart/form-data
      x-accepts:
      - text/plain
  /api/v1/character/latest/{name}:
    post:
      description: Get latest characterId by character name.
      operationId: getCharacterLatestIdByName
      parameters:
      - description: Character name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Get Latest Character Id by Name
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/document/{characterId}:
    post:
      description: Upload a document of the character.
      operationId: uploadCharacterDocument
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadCharacterDocument_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Upload Character Document
      tags:
      - Character
      x-content-type: multipart/form-data
      x-accepts:
      - text/plain
  /api/v1/character/details/search:
    post:
      description: "Same as /api/v1/character/search, but returns detailed information\
        \ of the character."
      operationId: searchCharacterDetails
      requestBody:
        content:
          application/json:
            example:
              where:
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/CharacterQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterDetailsDTO'
                type: array
          description: OK
      summary: Search Character Details
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/count:
    post:
      description: Calculate the number of characters according to the specified query
        conditions.
      operationId: countCharacters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Calculate Number of Characters
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/clone/{characterId}:
    post:
      description: |
        Enter the characterId, generate a new record, the content is basically the same as the original character, but the following fields are different:
        - Version number is 1
        - Visibility is private
        - The parent character is the source characterId
        - The creation time is the current moment.
        - All statistical indicators are zeroed.

        Return the new characterId.
      operationId: cloneCharacter
      parameters:
      - description: The referenced characterId
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Clone Character
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/batch/search:
    post:
      description: Batch call shortcut for /api/v1/character/search.
      operationId: batchSearchCharacterSummary
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/CharacterQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/CharacterSummaryDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Character Summaries
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/batch/details/search:
    post:
      description: Batch call shortcut for /api/v1/character/details/search.
      operationId: batchSearchCharacterDetails
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/CharacterQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/CharacterDetailsDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Character Details
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/character/backend/{characterId}:
    post:
      description: Add a backend configuration for a character.
      operationId: addCharacterBackend
      parameters:
      - description: The characterId to be added a backend
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterBackendDTO'
        description: The character backend to be added
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Add Character Backend
      tags:
      - Character
      x-content-type: application/json
      x-accepts:
      - text/plain
  /api/v1/character/avatar/{characterId}:
    post:
      description: Upload an avatar of the character.
      operationId: uploadCharacterAvatar
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadCharacterAvatar_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Upload Character Avatar
      tags:
      - Character
      x-content-type: multipart/form-data
      x-accepts:
      - text/plain
  /api/v1/ai/apikey:
    post:
      description: Add a credential for the model service.
      operationId: addAiApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiApiKeyCreateDTO'
        description: Model call credential information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Add Model Provider Credential
      tags:
      - AI Service
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent:
    post:
      description: |
        Create a agent, ignore required fields:
        - Agent name
        - Agent configuration

        Limitations:
        - Description: 300 characters
        - Configuration: 2000 characters
        - Example: 2000 characters
        - Tags: 5
        - Parameters: 10
      operationId: createAgent
      requestBody:
        content:
          application/json:
            example:
              name: A Test Agent
              description: A agent description
              format: langflow
              config: "{}"
              parameters: "{\"name\": null}"
              tags:
              - test
              - demo
              aiModels:
              - "123"
            schema:
              $ref: '#/components/schemas/AgentCreateDTO'
        description: Information of the agent to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Create Agent
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/versions/{name}:
    post:
      description: List the versions and corresponding agentIds by agent name.
      operationId: listAgentVersionsByName
      parameters:
      - description: Agent name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentItemForNameDTO'
                type: array
          description: OK
      summary: List Versions by Agent Name
      tags:
      - Agent
      x-accepts:
      - application/json
  /api/v1/agent/search:
    post:
      description: |
        Search agents:
        - Specifiable query fields, and relationship:
          - Scope: private, public_org or public. Private can only search this account.
          - Username: exact match, only valid when searching public, public_org. If not specified, search all users.
          - Format: exact match, currently supported: langflow
          - Tags: exact match (support and, or logic).
          - Model type: exact match (support and, or logic).
          - Name: left match.
          - General: name, description, example, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness.
        - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending.
        - The search result is the agent summary content.
        - Support pagination.
      operationId: searchAgentSummary
      requestBody:
        content:
          application/json:
            example:
              where:
                format: langflow
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/AgentQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentSummaryDTO'
                type: array
          description: OK
      summary: Search Agent Summary
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/publish/{agentId}/{visibility}:
    post:
      description: "Publish agent, draft content becomes formal content, version number\
        \ increases by 1. After successful publication, a new agentId will be generated\
        \ and returned. You need to specify the visibility for publication."
      operationId: publishAgent
      parameters:
      - description: The agentId to be published
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Visibility: public | private | ..."
        explode: false
        in: path
        name: visibility
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Publish Agent
      tags:
      - Agent
      x-accepts:
      - application/json
  /api/v1/agent/details/search:
    post:
      description: "Same as /api/v1/agent/search, but returns detailed information\
        \ of the agent."
      operationId: searchAgentDetails
      requestBody:
        content:
          application/json:
            example:
              where:
                format: langflow
                visibility: public
                username: amin
                name: Second Test
                text: (new)
                tags:
                - demo2
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              $ref: '#/components/schemas/AgentQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentDetailsDTO'
                type: array
          description: OK
      summary: Search Agent Details
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/count:
    post:
      description: Calculate the number of agents according to the specified query
        conditions.
      operationId: countAgents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentQueryDTO'
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Calculate Number of Agents
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/clone/{agentId}:
    post:
      description: |
        Enter the agentId, generate a new record, the content is basically the same as the original agent, but the following fields are different:
        - Version number is 1
        - Visibility is private
        - The parent agent is the source agentId
        - The creation time is the current moment.
         - All statistical indicators are zeroed.

        Return the new agentId.
      operationId: cloneAgent
      parameters:
      - description: The referenced agentId
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Clone Agent
      tags:
      - Agent
      x-accepts:
      - application/json
  /api/v1/agent/batch:
    post:
      description: "Batch create multiple agents. Ensure transactionality, return\
        \ the agentId list after success."
      operationId: createAgents
      requestBody:
        content:
          application/json:
            example:
            - name: First Test Agent
              description: First agent description
              format: langflow
              config: "{}"
              parameters: "{\"name\": null}"
              tags:
              - test1
              - demo1
              aiModels:
              - "123"
            - name: Second Test Agent
              visibility: public
              description: Second agent description
              format: langflow
              config: "{}"
              parameters: "{\"robot\": null}"
              tags:
              - test2
              - demo2
              aiModels:
              - "123"
              - "456"
            schema:
              items:
                $ref: '#/components/schemas/AgentCreateDTO'
              type: array
        description: List of agent information to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Create Agents
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/batch/search:
    post:
      description: Batch call shortcut for /api/v1/agent/search.
      operationId: batchSearchAgentSummary
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                format: langflow
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/AgentQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/AgentSummaryDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Agent Summaries
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/batch/details/search:
    post:
      description: Batch call shortcut for /api/v1/agent/details/search.
      operationId: batchSearchAgentDetails
      requestBody:
        content:
          application/json:
            example:
            - where:
                visibility: public
                username: amin
                text: robot
              orderBy:
              - version
              - modifyTime asc
              pageNum: 1
              pageSize: 1
            - where:
                visibility: private
                name: A Test
            - where:
                visibility: private
                tags:
                - test1
            - where:
                format: langflow
                visibility: public
                username: amin
                name: Second Test
                text: robot
                tags:
                - robot
                aiModels:
                - "123"
              orderBy:
              - version
              - modifyTime asc
              pageNum: 0
              pageSize: 1
            schema:
              items:
                $ref: '#/components/schemas/AgentQueryDTO'
              type: array
        description: Query conditions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    $ref: '#/components/schemas/AgentDetailsDTO'
                  type: array
                type: array
          description: OK
      summary: Batch Search Agent Details
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/agent/batch/clone:
    post:
      description: "Batch clone multiple agents. Ensure transactionality, return the\
        \ agentId list after success."
      operationId: cloneAgents
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: int64
                type: integer
              type: array
        description: List of agent information to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Clone Agents
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/admin/token/{username}/{duration}:
    post:
      description: "Create an API Token for a specified user, valid for duration seconds."
      operationId: createTokenForUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Validity period (seconds)
        explode: false
        in: path
        name: duration
        required: true
        schema:
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create API Token for User.
      tags:
      - Account Manager (for admin)
      x-accepts:
      - text/plain
  /api/v1/admin/app/configs:
    post:
      description: List all application configuration names.
      operationId: listAppConfigNames
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List Configuration Names
      tags:
      - App Config (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/app/config:
    post:
      description: "Publish application configuration, return configuration version."
      operationId: publishAppConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfigCreateDTO'
        description: Configuration information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: OK
      summary: Publish Configuration
      tags:
      - App Config (for admin)
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/account/token:
    post:
      description: "Create a timed API Token, valid for {duration} seconds."
      operationId: createToken
      parameters: []
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create API Token
      tags:
      - Account
      x-accepts:
      - text/plain
  /api/v1/account/token/{duration}:
    post:
      description: "Create a timed API Token, valid for {duration} seconds."
      operationId: createToken_1
      parameters:
      - description: Token validity duration (seconds)
        explode: false
        in: path
        name: duration
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create API Token
      tags:
      - Account
      x-accepts:
      - text/plain
  /api/v1/account/picture:
    post:
      description: Upload a picture of the user.
      operationId: uploadUserPicture
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadUserPicture_request'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Upload User Picture
      tags:
      - Account
      x-content-type: multipart/form-data
      x-accepts:
      - text/plain
  /api/v1/tags/hot/{infoType}/{pageSize}:
    get:
      description: Get popular tags for a specified info type.
      operationId: listHotTags
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Key word
        explode: true
        in: query
        name: text
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HotTagDTO'
                type: array
          description: OK
      summary: Hot Tags
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/{infoType}/{infoId}:
    get:
      description: Get all statistics of the corresponding resources.
      operationId: getStatistics
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Unique resource identifier
        explode: false
        in: path
        name: infoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractiveStatsDTO'
          description: OK
      summary: Get All Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/prompts/by/{statsType}/{pageSize}:
    get:
      description: "List prompts based on statistics, including interactive statistical\
        \ data."
      operationId: listPromptsByStatistic
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptSummaryStatsDTO'
                type: array
          description: OK
      summary: List Prompts by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/prompts/by/{statsType}/{pageSize}/{pageNum}:
    get:
      description: "List prompts based on statistics, including interactive statistical\
        \ data."
      operationId: listPromptsByStatistic_1
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptSummaryStatsDTO'
                type: array
          description: OK
      summary: List Prompts by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/prompts/by/{statsType}:
    get:
      description: "List prompts based on statistics, including interactive statistical\
        \ data."
      operationId: listPromptsByStatistic_2
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptSummaryStatsDTO'
                type: array
          description: OK
      summary: List Prompts by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/plugins/by/{statsType}/{pageSize}/{pageNum}:
    get:
      description: "List plugins based on statistics, including interactive statistical\
        \ data."
      operationId: listPluginsByStatistic
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PluginSummaryStatsDTO'
                type: array
          description: OK
      summary: List Plugins by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/plugins/by/{statsType}/{pageSize}:
    get:
      description: "List plugins based on statistics, including interactive statistical\
        \ data."
      operationId: listPluginsByStatistic_1
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PluginSummaryStatsDTO'
                type: array
          description: OK
      summary: List Plugins by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/plugins/by/{statsType}:
    get:
      description: "List plugins based on statistics, including interactive statistical\
        \ data."
      operationId: listPluginsByStatistic_2
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PluginSummaryStatsDTO'
                type: array
          description: OK
      summary: List Plugins by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/characters/by/{statsType}/{pageSize}:
    get:
      description: "List characters based on statistics, including interactive statistical\
        \ data."
      operationId: listCharactersByStatistic
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterSummaryStatsDTO'
                type: array
          description: OK
      summary: List Characters by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/characters/by/{statsType}/{pageSize}/{pageNum}:
    get:
      description: "List characters based on statistics, including interactive statistical\
        \ data."
      operationId: listCharactersByStatistic_1
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterSummaryStatsDTO'
                type: array
          description: OK
      summary: List Characters by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/characters/by/{statsType}:
    get:
      description: "List characters based on statistics, including interactive statistical\
        \ data."
      operationId: listCharactersByStatistic_2
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterSummaryStatsDTO'
                type: array
          description: OK
      summary: List Characters by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/agents/by/{statsType}:
    get:
      description: "List agents based on statistics, including interactive statistical\
        \ data."
      operationId: listAgentsByStatistic
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentSummaryStatsDTO'
                type: array
          description: OK
      summary: List Agents by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/agents/by/{statsType}/{pageSize}:
    get:
      description: "List agents based on statistics, including interactive statistical\
        \ data."
      operationId: listAgentsByStatistic_1
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentSummaryStatsDTO'
                type: array
          description: OK
      summary: List Agents by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/stats/agents/by/{statsType}/{pageSize}/{pageNum}:
    get:
      description: "List agents based on statistics, including interactive statistical\
        \ data."
      operationId: listAgentsByStatistic_2
      parameters:
      - description: "Statistics type: view_count | refer_count | recommend_count\
          \ | score"
        explode: false
        in: path
        name: statsType
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: "Default is descending order, set asc=1 for ascending order"
        explode: true
        in: query
        name: asc
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentSummaryStatsDTO'
                type: array
          description: OK
      summary: List Agents by Statistics
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/score/{infoType}/{infoId}:
    get:
      description: Get the current user's score for the corresponding resource.
      operationId: getScore
      parameters:
      - description: "Info type: prompt | agent | plugin | character"
        explode: false
        in: path
        name: infoType
        required: true
        schema:
          type: string
        style: simple
      - description: Unique resource identifier
        explode: false
        in: path
        name: infoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: OK
      summary: Get Score for Resource
      tags:
      - Interactive Statistics
      x-accepts:
      - application/json
  /api/v1/rag/tasks/{characterId}:
    get:
      description: List the RAG tasks by characterId.
      operationId: listRagTasks
      parameters:
      - description: The characterId to be queried
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RagTaskDetailsDTO'
                type: array
          description: OK
      summary: List RAG Tasks
      tags:
      - Rag
      x-accepts:
      - application/json
  /api/v1/rag/task/status/{taskId}:
    get:
      description: "Get the RAG task execution status: pending | running | succeeded\
        \ | failed | canceled."
      operationId: getRagTaskStatus
      parameters:
      - description: The taskId to be queried status
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Get RAG Task Status
      tags:
      - Rag
      x-accepts:
      - text/plain
  /api/v1/prompt/summary/{promptId}:
    get:
      description: Get prompt summary information.
      operationId: getPromptSummary
      parameters:
      - description: PromptId to be obtained
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptSummaryDTO'
          description: OK
      summary: Get Prompt Summary
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/exists/name/{name}:
    get:
      description: Check if the prompt name already exists.
      operationId: existsPromptName
      parameters:
      - description: Name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Check If Prompt Name Exists
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/details/{promptId}:
    get:
      description: Get prompt detailed information.
      operationId: getPromptDetails
      parameters:
      - description: PromptId to be obtained
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptDetailsDTO'
          description: OK
      summary: Get Prompt Details
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/prompt/create/name/{desired}:
    get:
      description: Create a new prompt name starting with a desired name.
      operationId: newPromptName
      parameters:
      - description: Desired name
        explode: false
        in: path
        name: desired
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create New Prompt Name
      tags:
      - Prompt
      x-accepts:
      - text/plain
  /api/v1/plugin/summary/{pluginId}:
    get:
      description: Get plugin summary information.
      operationId: getPluginSummary
      parameters:
      - description: PluginId to be obtained
        explode: false
        in: path
        name: pluginId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginSummaryDTO'
          description: OK
      summary: Get Plugin Summary
      tags:
      - Plugin
      x-accepts:
      - application/json
  /api/v1/plugin/details/{pluginId}:
    get:
      description: Get plugin detailed information.
      operationId: getPluginDetails
      parameters:
      - description: PluginId to be obtained
        explode: false
        in: path
        name: pluginId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginDetailsDTO'
          description: OK
      summary: Get Plugin Details
      tags:
      - Plugin
      x-accepts:
      - application/json
  /api/v1/org/subordinates:
    get:
      description: "Get the subordinate relationships of the current account, including\
        \ direct and indirect subordinates, by default does not include virtual managed\
        \ subordinates, so there will be no circular relationship.<br/>By specifying\
        \ all=1, virtual managed subordinates can be returned, in this case, there\
        \ may be a circular relationship."
      operationId: getSubordinates
      parameters:
      - description: Whether to return virtual managed subordinates
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get My Subordinate Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
  /api/v1/org/subordinates/dot:
    get:
      description: "Same as /api/v1/org/subordinates, but returns a DOT format view,\
        \ DOT reference: [graphviz](https://www.graphviz.org/)"
      operationId: getSubordinatesDot
      parameters:
      - description: Whether to return virtual managed subordinates
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Get DOT of Subordinate Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
  /api/v1/org/owners:
    get:
      description: "Get the superior relationships of the current account, including\
        \ direct and indirect owners, by default does not include virtual reported\
        \ owners, so there will be no circular relationship.<br/>By specifying all=1,\
        \ virtual reported owners can be returned, in this case, there may be a circular\
        \ relationship."
      operationId: getOwners
      parameters:
      - description: Whether to return virtual reported owners
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Get My Superior Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
  /api/v1/org/owners/dot:
    get:
      description: "Same as /api/v1/org/owners, but returns a DOT format view, DOT\
        \ reference: [graphviz](https://www.graphviz.org/)"
      operationId: getOwnersDot
      parameters:
      - description: Whether to return virtual reported owners
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Get DOT of Superior Relationship
      tags:
      - Organization
      x-accepts:
      - application/json
  /api/v1/chat/{characterId}:
    get:
      description: Get default chat id of current user and the character.
      operationId: getDefaultChatId
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Get Default Chat
      tags:
      - Chat
      x-accepts:
      - text/plain
  /api/v1/chat/messages/{chatId}:
    get:
      description: List messages of a chat.
      operationId: listMessages
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatMessageRecordDTO'
                type: array
          description: OK
      summary: List Chat Messages
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/chat/messages/{chatId}/{limit}/{offset}:
    get:
      description: List messages of a chat.
      operationId: listMessages_1
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - description: Messages limit
        explode: false
        in: path
        name: limit
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: Messages offset (from new to old)
        explode: false
        in: path
        name: offset
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatMessageRecordDTO'
                type: array
          description: OK
      summary: List Chat Messages
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/chat/messages/{chatId}/{limit}:
    get:
      description: List messages of a chat.
      operationId: listMessages_2
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      - description: Messages limit
        explode: false
        in: path
        name: limit
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatMessageRecordDTO'
                type: array
          description: OK
      summary: List Chat Messages
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/chat/memory/usage/{chatId}:
    get:
      description: Get memory usage of a chat.
      operationId: getMemoryUsage
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryUsageDTO'
          description: OK
      summary: Get Memory Usage
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/character/summary/{characterId}:
    get:
      description: Get character summary information.
      operationId: getCharacterSummary
      parameters:
      - description: CharacterId to be obtained
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterSummaryDTO'
          description: OK
      summary: Get Character Summary
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/pictures/{characterId}:
    get:
      description: List pictures of the character.
      operationId: listCharacterPictures
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List Character Pictures
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/exists/name/{name}:
    get:
      description: Check if the character name already exists.
      operationId: existsCharacterName
      parameters:
      - description: Name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Check If Character Name Exists
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/documents/{characterId}:
    get:
      description: List documents of the character.
      operationId: listCharacterDocuments
      parameters:
      - description: Character identifier
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List Character Documents
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/details/{characterId}:
    get:
      description: Get character detailed information.
      operationId: getCharacterDetails
      parameters:
      - description: CharacterId to be obtained
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDetailsDTO'
          description: OK
      summary: Get Character Details
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/create/name/{desired}:
    get:
      description: Create a new character name starting with a desired name.
      operationId: newCharacterName
      parameters:
      - description: Desired name
        explode: false
        in: path
        name: desired
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Create New Character Name
      tags:
      - Character
      x-accepts:
      - text/plain
  /api/v1/character/backends/{characterId}:
    get:
      description: List character backends.
      operationId: listCharacterBackends
      parameters:
      - description: The characterId to be queried
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CharacterBackendDetailsDTO'
                type: array
          description: OK
      summary: List Character Backends
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/backend/ids/{characterId}:
    get:
      description: List character backend identifiers.
      operationId: listCharacterBackendIds
      parameters:
      - description: The characterId to be queried
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List Character Backend ids
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/backend/default/{characterId}:
    get:
      description: Get the default backend configuration.
      operationId: getDefaultCharacterBackend
      parameters:
      - description: The characterId to be queried
        explode: false
        in: path
        name: characterId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterBackendDetailsDTO'
          description: OK
      summary: Get Default Character Backend
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/ai/models/{pageSize}:
    get:
      description: "Return model information by page, return the pageNum page, up\
        \ to pageSize model information."
      operationId: listAiModelInfo
      parameters:
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AiModelInfoDTO'
                type: array
          description: OK
      summary: List Models
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/models:
    get:
      description: "Return model information by page, return the pageNum page, up\
        \ to pageSize model information."
      operationId: listAiModelInfo_1
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AiModelInfoDTO'
                type: array
          description: OK
      summary: List Models
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/models/{pageSize}/{pageNum}:
    get:
      description: "Return model information by page, return the pageNum page, up\
        \ to pageSize model information."
      operationId: listAiModelInfo_2
      parameters:
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AiModelInfoDTO'
                type: array
          description: OK
      summary: List Models
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/model/{modelId}:
    get:
      description: Return specific model information.
      operationId: getAiModelInfo
      parameters:
      - description: Model identifier
        explode: false
        in: path
        name: modelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiModelInfoDTO'
          description: OK
      summary: Get Model Information
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/apikeys/{provider}:
    get:
      description: List all credential information of the model provider.
      operationId: listAiApiKeys
      parameters:
      - description: Model provider
        explode: false
        in: path
        name: provider
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AiApiKeyInfoDTO'
                type: array
          description: OK
      summary: List Credentials of Model Provider
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/ai/apikey/{id}:
    delete:
      description: Delete the credential information of the model provider.
      operationId: deleteAiApiKey
      parameters:
      - description: Credential identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Credential of Model Provider
      tags:
      - AI Service
      x-accepts:
      - application/json
    get:
      description: Get the credential information of the model provider.
      operationId: getAiApiKey
      parameters:
      - description: Credential identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiApiKeyInfoDTO'
          description: OK
      summary: Get credential of Model Provider
      tags:
      - AI Service
      x-accepts:
      - application/json
  /api/v1/agent/summary/{agentId}:
    get:
      description: Get agent summary information.
      operationId: getAgentSummary
      parameters:
      - description: agentId to be obtained
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSummaryDTO'
          description: OK
      summary: Get Agent Summary
      tags:
      - Agent
      x-accepts:
      - application/json
  /api/v1/agent/details/{agentId}:
    get:
      description: Get agent detailed information.
      operationId: getAgentDetails
      parameters:
      - description: AgentId to be obtained
        explode: false
        in: path
        name: agentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDetailsDTO'
          description: OK
      summary: Get Agent Details
      tags:
      - Agent
      x-accepts:
      - application/json
  /api/v1/admin/users/{pageSize}/{pageNum}:
    get:
      description: "Return user information by page, return the pageNum page, up to\
        \ pageSize user information."
      operationId: listUsers
      parameters:
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Current page number
        explode: false
        in: path
        name: pageNum
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserBasicInfoDTO'
                type: array
          description: OK
      summary: List User Information
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/users/{pageSize}:
    get:
      description: "Return user information by page, return the pageNum page, up to\
        \ pageSize user information."
      operationId: listUsers_1
      parameters:
      - description: Maximum quantity
        explode: false
        in: path
        name: pageSize
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserBasicInfoDTO'
                type: array
          description: OK
      summary: List User Information
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/users:
    get:
      description: "Return user information by page, return the pageNum page, up to\
        \ pageSize user information."
      operationId: listUsers_2
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserBasicInfoDTO'
                type: array
          description: OK
      summary: List User Information
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/user/{username}:
    delete:
      description: Delete user by username.
      operationId: deleteUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete User
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
    get:
      description: Return detailed user information.
      operationId: getDetailsOfUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDTO'
          description: OK
      summary: Get User Details
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/tokenBy/{token}:
    get:
      description: Get the detailed user information corresponding to the API Token.
      operationId: getUserByToken
      parameters:
      - description: API Token
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDTO'
          description: OK
      summary: Get User by API Token
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/token/{username}:
    get:
      description: Get the list of API Tokens of the user.
      operationId: listTokensOfUser
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiTokenInfoDTO'
                type: array
          description: OK
      summary: Get API Token of User
      tags:
      - Account Manager (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/encryption/encrypt/{text}:
    get:
      description: Encrypt a piece of text with the built-in key.
      operationId: encryptText
      parameters:
      - description: Text to be encrypted
        explode: false
        in: path
        name: text
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Encrypt Text
      tags:
      - Encryption Manager (for admin)
      x-accepts:
      - text/plain
  /api/v1/admin/app/meta:
    get:
      description: Get application information to accurately locate the corresponding
        project version.
      operationId: getAppMeta
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMetaDTO'
          description: OK
      summary: Get Application Information
      tags:
      - App Meta (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/app/expose:
    get:
      description: This method does nothing.
      operationId: expose
      parameters:
      - explode: true
        in: query
        name: openAiParam
        required: true
        schema:
          $ref: '#/components/schemas/OpenAiParamDTO'
        style: form
      - explode: true
        in: query
        name: qwenParam
        required: true
        schema:
          $ref: '#/components/schemas/QwenParamDTO'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Expose DTO definitions
      tags:
      - App Meta (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/app/config/{name}:
    get:
      description: Get the latest configuration information of the application by
        name.
      operationId: getAppConfig
      parameters:
      - description: Configuration name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfigInfoDTO'
          description: OK
      summary: Get Configuration
      tags:
      - App Config (for admin)
      x-accepts:
      - application/json
  /api/v1/admin/app/config/{name}/{version}:
    get:
      description: Get the configuration information of the application by name and
        version.
      operationId: getAppConfigByVersion
      parameters:
      - description: Configuration name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Configuration version
        explode: false
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfigInfoDTO'
          description: OK
      summary: Get Specified Version of Configuration
      tags:
      - App Config (for admin)
      x-accepts:
      - application/json
  /api/v1/account/tokens:
    get:
      description: List currently valid tokens.
      operationId: listTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiTokenInfoDTO'
                type: array
          description: OK
      summary: List API Tokens
      tags:
      - Account
      x-accepts:
      - application/json
  /api/v1/account/basic:
    get:
      description: "Return user basic information, including: username, nickname,\
        \ avatar link."
      operationId: getUserBasic
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicInfoDTO'
          description: OK
      summary: Get User Basic Information
      tags:
      - Account
      x-accepts:
      - application/json
  /api/v1/account/basic/{username}:
    get:
      description: "Return user basic information, including: username, nickname,\
        \ avatar link."
      operationId: getUserBasic_1
      parameters:
      - description: Username
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicInfoDTO'
          description: OK
      summary: Get User Basic Information
      tags:
      - Account
      x-accepts:
      - application/json
  /api/v1/prompt/name/{name}:
    delete:
      description: Delete prompt by name. return the list of successfully deleted
        promptIds.
      operationId: deletePromptByName
      parameters:
      - description: The prompt name to be deleted
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Delete Prompt by Name
      tags:
      - Prompt
      x-accepts:
      - application/json
  /api/v1/chat/memory/{chatId}:
    delete:
      description: Clear memory of the chat session.
      operationId: clearMemory
      parameters:
      - description: Chat session identifier
        explode: false
        in: path
        name: chatId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChatMessageRecordDTO'
                type: array
          description: OK
      summary: Clear Memory
      tags:
      - Chat
      x-accepts:
      - application/json
  /api/v1/character/picture/{key}:
    delete:
      description: Delete a picture of the character by key.
      operationId: deleteCharacterPicture
      parameters:
      - description: Image key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Character Picture
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/name/{name}:
    delete:
      description: Delete character by name. return the list of successfully deleted
        characterIds.
      operationId: deleteCharacterByName
      parameters:
      - description: The character name to be deleted
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Delete Character by Name
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/character/document/{key}:
    delete:
      description: Delete a document of the character by key.
      operationId: deleteCharacterDocument
      parameters:
      - description: Document key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Delete Character Document
      tags:
      - Character
      x-accepts:
      - application/json
  /api/v1/agent/batch/delete:
    delete:
      description: "Delete multiple agents. Ensure transactionality, return the list\
        \ of successfully deleted agentId."
      operationId: deleteAgents
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: int64
                type: integer
              type: array
        description: List of agentId to be deleted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  format: int64
                  type: integer
                type: array
          description: OK
      summary: Batch Delete Agents
      tags:
      - Agent
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    RagTaskDTO:
      description: RAG task information
      example:
        maxOverlapSize: 6
        sourceType: sourceType
        maxSegmentSize: 0
        source: source
      properties:
        sourceType:
          description: "Source type: file (default) | url"
          type: string
        source:
          description: "Source information, url, or a key for file"
          type: string
        maxSegmentSize:
          description: The maximum size of a segment in tokens.
          format: int32
          type: integer
        maxOverlapSize:
          description: The maximum size of the overlap between segments in tokens.
          format: int32
          type: integer
      type: object
    ChatContentDTO:
      description: Chat content
      example:
        type: type
        content: content
      properties:
        type:
          description: "Chat type: text (default) | image"
          type: string
        content:
          description: "Chat content(for image, it might be a normal url or data url)"
          type: string
      required:
      - content
      type: object
    ChatMessageDTO:
      description: Chat message
      example:
        role: role
        contents:
        - type: type
          content: content
        - type: type
          content: content
        name: name
        context: context
        contentText: contentText
        toolCalls:
        - name: name
          arguments: arguments
          id: id
        - name: name
          arguments: arguments
          id: id
      properties:
        role:
          description: "Chat role: system | assistant | user | tool_call | tool_result"
          type: string
        name:
          description: "user: Name of the user role; tool_call: Name of the called\
            \ tool"
          type: string
        contents:
          description: "default: Dialogue content; tool_result: tool call result,\
            \ serialized as json"
          items:
            $ref: '#/components/schemas/ChatContentDTO'
          type: array
        toolCalls:
          description: Tool calls information during the conversation
          items:
            $ref: '#/components/schemas/ChatToolCallDTO'
          type: array
        context:
          description: Contextual information in this round of conversation (the external
            RAG result can be passed in through this parameter)
          type: string
        contentText:
          type: string
          writeOnly: true
      type: object
    ChatPromptContentDTO:
      description: Prompt chat template content
      example:
        system: system
        messages:
        - role: role
          contents:
          - type: type
            content: content
          - type: type
            content: content
          name: name
          context: context
          contentText: contentText
          toolCalls:
          - name: name
            arguments: arguments
            id: id
          - name: name
            arguments: arguments
            id: id
        - role: role
          contents:
          - type: type
            content: content
          - type: type
            content: content
          name: name
          context: context
          contentText: contentText
          toolCalls:
          - name: name
            arguments: arguments
            id: id
          - name: name
            arguments: arguments
            id: id
        messageToSend:
          role: role
          contents:
          - type: type
            content: content
          - type: type
            content: content
          name: name
          context: context
          contentText: contentText
          toolCalls:
          - name: name
            arguments: arguments
            id: id
          - name: name
            arguments: arguments
            id: id
      properties:
        system:
          description: Prompt system template
          type: string
        messageToSend:
          $ref: '#/components/schemas/ChatMessageDTO'
        messages:
          description: Pre-set chat messages in the Prompt
          items:
            $ref: '#/components/schemas/ChatMessageDTO'
          type: array
      type: object
    ChatToolCallDTO:
      description: Tool call information during the conversation
      example:
        name: name
        arguments: arguments
        id: id
      properties:
        id:
          description: Tool id
          type: string
        name:
          description: Tool name
          type: string
        arguments:
          description: Tool parameters
          type: string
      type: object
    PromptUpdateDTO:
      description: Request data for updating prompt information
      example:
        parentUid: parentUid
        template: template
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        inputs: inputs
        format: format
        description: description
        example: example
        tags:
        - tags
        - tags
        chatTemplate:
          system: system
          messages:
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          messageToSend:
            role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
        draft: draft
        name: name
        lang: lang
      properties:
        parentUid:
          description: Referenced prompt
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Prompt name
          type: string
        description:
          description: Prompt description
          type: string
        template:
          description: "Prompt text template content, choose one from template and\
            \ chatTemplate field, priority: template > chatTemplate"
          type: string
        chatTemplate:
          $ref: '#/components/schemas/ChatPromptContentDTO'
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
        lang:
          description: "Prompt language: en (default) | zh_CN | ..."
          type: string
        example:
          description: Prompt example
          type: string
        inputs:
          description: "Prompt parameters, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    PromptRefDTO:
      description: Prompt reference information
      example:
        variables:
          key: "{}"
        promptId: 0
        draft: true
      properties:
        promptId:
          description: Prompt identifier
          format: int64
          type: integer
        variables:
          additionalProperties:
            description: "Variables applied to the template, can be empty"
            type: object
          description: "Variables applied to the template, can be empty"
          type: object
        draft:
          description: Whether to use draft content
          type: boolean
      required:
      - promptId
      type: object
    PromptTaskDTO:
      description: Prompt task information
      example:
        apiKeyValue: apiKeyValue
        cron: cron
        promptRef:
          variables:
            key: "{}"
          promptId: 0
          draft: true
        modelId: modelId
        apiKeyName: apiKeyName
        params:
          key: "{}"
        status: status
      properties:
        promptRef:
          $ref: '#/components/schemas/PromptRefDTO'
        modelId:
          description: Model identifier
          type: string
        apiKeyName:
          description: "API-KEY name, priority: apiKeyName > apiKeyValue"
          type: string
        apiKeyValue:
          description: API-KEY value
          type: string
        params:
          additionalProperties:
            description: Model call parameters
            type: object
          description: Model call parameters
          type: object
        cron:
          description: Task scheduling configuration which compatible with Quartz
            cron format
          type: string
        status:
          description: "Task execution status: pending | running | succeeded | failed"
          type: string
      required:
      - promptRef
      type: object
    PluginUpdateDTO:
      description: Request data for updating plugin information
      example:
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        apiFormat: apiFormat
        provider: provider
        manifestInfo: manifestInfo
        name: name
        apiInfo: apiInfo
        manifestFormat: manifestFormat
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Plugin name
          type: string
        manifestFormat:
          description: "Manifest format, currently supported: dash_scope (default),\
            \ open_ai"
          type: string
        manifestInfo:
          description: "Manifest content, can be full content or a URL"
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3 (default)"
          type: string
        apiInfo:
          description: "API description content, can be full content or a URL"
          type: string
        provider:
          description: "Provider information, default is the current user's username"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    ChatUpdateDTO:
      description: Request data for updating a chat session
      example:
        characterNickname: characterNickname
        apiKeyValue: apiKeyValue
        ext: ext
        about: about
        userNickname: userNickname
        backendId: backendId
        apiKeyName: apiKeyName
        characterId: 0
        userProfile: userProfile
        gmtRead: 2000-01-23T04:56:07.000+00:00
      properties:
        userNickname:
          description: User nickname for this session
          type: string
        userProfile:
          description: User profile for this session
          type: string
        characterNickname:
          description: Character nickname for this session
          type: string
        about:
          description: Anything about this session
          type: string
        characterId:
          description: Character id for this session
          format: int64
          type: integer
        backendId:
          description: Character backend for this session
          type: string
        apiKeyName:
          description: "API-KEY name, priority: apiKeyName > apiKeyValue"
          type: string
        apiKeyValue:
          description: API-KEY value
          type: string
        ext:
          description: Extra info for this session
          type: string
        gmtRead:
          description: Read time
          format: date-time
          type: string
      required:
      - characterId
      type: object
    CharacterUpdateDTO:
      description: Request data for updating character information
      example:
        parentUid: parentUid
        ext: ext
        visibility: visibility
        gender: gender
        defaultScene: defaultScene
        profile: profile
        greeting: greeting
        description: description
        chatExample: chatExample
        avatar: avatar
        picture: picture
        tags:
        - tags
        - tags
        draft: draft
        name: name
        nickname: nickname
        lang: lang
        chatStyle: chatStyle
      properties:
        parentUid:
          description: Referenced character
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Character name
          type: string
        description:
          description: Character description
          type: string
        nickname:
          description: Character nickname
          type: string
        avatar:
          description: Character avatar url
          type: string
        picture:
          description: Character picture url
          type: string
        gender:
          description: "Character gender: male | female | other"
          type: string
        profile:
          description: Character profile
          type: string
        greeting:
          description: Character greeting
          type: string
        chatStyle:
          description: Character chat-style
          type: string
        chatExample:
          description: Character chat-example
          type: string
        defaultScene:
          description: "Default scene, which will be set as the default conversation\
            \ background information when creating a new chat"
          type: string
        lang:
          description: "Character language: en (default) | zh | ..."
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Character draft information
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
      required:
      - name
      type: object
    CharacterBackendDTO:
      description: Character backend information
      example:
        moderationApiKeyName: moderationApiKeyName
        quotaType: quotaType
        isDefault: true
        moderationParams: moderationParams
        greetingPromptTaskId: greetingPromptTaskId
        moderationModelId: moderationModelId
        initQuota: 1
        chatPromptTaskId: chatPromptTaskId
        messageWindowSize: 0
        longTermMemoryWindowSize: 6
      properties:
        isDefault:
          description: Whether it is the default backend
          type: boolean
        chatPromptTaskId:
          description: Prompt task identifier for chat
          type: string
        greetingPromptTaskId:
          description: Prompt task identifier for greeting
          type: string
        moderationModelId:
          description: Moderation model for the character's response
          type: string
        moderationApiKeyName:
          description: Api key name for moderation model
          type: string
        moderationParams:
          description: Parameters for moderation model
          type: string
        messageWindowSize:
          description: Max messages in the character's memory
          format: int32
          type: integer
        longTermMemoryWindowSize:
          description: "Max rounds (a round includes a user message and a character\
            \ reply) in the character's long term memory, 0 to disable"
          format: int32
          type: integer
        initQuota:
          description: Initial quota when opening a chat
          format: int64
          type: integer
        quotaType:
          description: "Quota type: messages | tokens | none (not limited)"
          type: string
      type: object
    AgentUpdateDTO:
      description: Request data for updating agent information
      example:
        parentUid: parentUid
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        draft: draft
        format: format
        name: name
        description: description
        config: config
        parameters: parameters
        example: example
        tags:
        - tags
        - tags
      properties:
        parentUid:
          description: Referenced agent
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        format:
          description: "Agent format, currently supported: langflow"
          type: string
        name:
          description: Agent name
          type: string
        description:
          description: Agent description
          type: string
        config:
          description: Agent configuration
          type: string
        example:
          description: Agent example
          type: string
        parameters:
          description: "Agent parameters, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    UserFullDetailsDTO:
      description: Account detailed information (including password)
      example:
        website: website
        zoneinfo: zoneinfo
        birthdate: 2000-01-23T04:56:07.000+00:00
        address: address
        gender: gender
        preferredUsername: preferredUsername
        givenName: givenName
        profile: profile
        locale: locale
        picture: picture
        platform: platform
        enabled: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        password: password
        phoneNumber: phoneNumber
        requestId: requestId
        passwordExpiresAt: 2000-01-23T04:56:07.000+00:00
        familyName: familyName
        nickname: nickname
        middleName: middleName
        locked: true
        email: email
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        requestId:
          description: Request identifier
          type: string
        username:
          type: string
        nickname:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        familyName:
          type: string
        preferredUsername:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        gender:
          type: string
        birthdate:
          format: date-time
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phoneNumber:
          type: string
        updatedAt:
          format: date-time
          type: string
        platform:
          type: string
        enabled:
          type: boolean
        locked:
          type: boolean
        expiresAt:
          format: date-time
          type: string
        passwordExpiresAt:
          format: date-time
          type: string
        address:
          type: string
        password:
          type: string
      type: object
    UserDetailsDTO:
      description: Account detailed information
      example:
        website: website
        zoneinfo: zoneinfo
        birthdate: 2000-01-23T04:56:07.000+00:00
        address: address
        gender: gender
        preferredUsername: preferredUsername
        givenName: givenName
        profile: profile
        locale: locale
        picture: picture
        platform: platform
        enabled: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        phoneNumber: phoneNumber
        requestId: requestId
        passwordExpiresAt: 2000-01-23T04:56:07.000+00:00
        familyName: familyName
        nickname: nickname
        middleName: middleName
        locked: true
        email: email
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        requestId:
          description: Request identifier
          type: string
        username:
          type: string
        nickname:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        familyName:
          type: string
        preferredUsername:
          type: string
        profile:
          type: string
        picture:
          type: string
        website:
          type: string
        email:
          type: string
        gender:
          type: string
        birthdate:
          format: date-time
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        phoneNumber:
          type: string
        updatedAt:
          format: date-time
          type: string
        platform:
          type: string
        enabled:
          type: boolean
        locked:
          type: boolean
        expiresAt:
          format: date-time
          type: string
        passwordExpiresAt:
          format: date-time
          type: string
        address:
          type: string
      type: object
    PromptCreateDTO:
      description: Request data for creating new prompt information
      example:
        parentUid: parentUid
        template: template
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        inputs: inputs
        format: format
        description: description
        example: example
        tags:
        - tags
        - tags
        chatTemplate:
          system: system
          messages:
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          messageToSend:
            role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
        draft: draft
        name: name
        lang: lang
      properties:
        parentUid:
          description: Referenced prompt
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Prompt name
          type: string
        description:
          description: Prompt description
          type: string
        template:
          description: "Prompt text template content, choose one from template and\
            \ chatTemplate field, priority: template > chatTemplate"
          type: string
        chatTemplate:
          $ref: '#/components/schemas/ChatPromptContentDTO'
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
        lang:
          description: "Prompt language: en (default) | zh_CN | ..."
          type: string
        example:
          description: Prompt example
          type: string
        inputs:
          description: "Prompt parameters, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    InteractiveStatsDTO:
      description: Interactive statistics information
      example:
        referCount: 5
        score: 7
        gmtModified: 2000-01-23T04:56:07.000+00:00
        recommendCount: 5
        requestId: requestId
        scoreCount: 2
        referId: referId
        referType: referType
        viewCount: 1
        gmtCreate: 2000-01-23T04:56:07.000+00:00
      properties:
        requestId:
          description: Request identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        referType:
          description: Resource type
          type: string
        referId:
          description: Resource identifier
          type: string
        viewCount:
          description: View count
          format: int64
          type: integer
        referCount:
          description: Reference count
          format: int64
          type: integer
        recommendCount:
          description: Recommendation count
          format: int64
          type: integer
        scoreCount:
          description: Score count
          format: int64
          type: integer
        score:
          description: Average score
          format: int64
          type: integer
      type: object
    PromptItemForNameDTO:
      description: Prompt identifier and version information
      example:
        stats:
          referCount: 5
          score: 7
          gmtModified: 2000-01-23T04:56:07.000+00:00
          recommendCount: 5
          requestId: requestId
          scoreCount: 2
          referId: referId
          referType: referType
          viewCount: 1
          gmtCreate: 2000-01-23T04:56:07.000+00:00
        promptId: 0
        version: 6
      properties:
        promptId:
          description: promptId
          format: int64
          type: integer
        version:
          description: version
          format: int32
          type: integer
        stats:
          $ref: '#/components/schemas/InteractiveStatsDTO'
      type: object
    PromptAiParamDTO:
      description: Prompt AI service information
      example:
        promptRef:
          variables:
            key: "{}"
          promptId: 0
          draft: true
        params:
          key: "{}"
        prompt: prompt
        promptTemplate:
          template: template
          variables:
            key: "{}"
          chatTemplate:
            system: system
            messages:
            - role: role
              contents:
              - type: type
                content: content
              - type: type
                content: content
              name: name
              context: context
              contentText: contentText
              toolCalls:
              - name: name
                arguments: arguments
                id: id
              - name: name
                arguments: arguments
                id: id
            - role: role
              contents:
              - type: type
                content: content
              - type: type
                content: content
              name: name
              context: context
              contentText: contentText
              toolCalls:
              - name: name
                arguments: arguments
                id: id
              - name: name
                arguments: arguments
                id: id
            messageToSend:
              role: role
              contents:
              - type: type
                content: content
              - type: type
                content: content
              name: name
              context: context
              contentText: contentText
              toolCalls:
              - name: name
                arguments: arguments
                id: id
              - name: name
                arguments: arguments
                id: id
          format: format
      properties:
        prompt:
          description: "Complete input content, priority: prompt > promptTemplate\
            \ > promptRef"
          type: string
        promptTemplate:
          $ref: '#/components/schemas/PromptTemplateDTO'
        promptRef:
          $ref: '#/components/schemas/PromptRefDTO'
        params:
          additionalProperties:
            description: "Model call parameters, the actual supported fields are related\
              \ to modelId, depending on the model provider, specific fields can refer\
              \ to: OpenAiParamDTO, QwenParamDTO"
            type: object
          description: "Model call parameters, the actual supported fields are related\
            \ to modelId, depending on the model provider, specific fields can refer\
            \ to: OpenAiParamDTO, QwenParamDTO"
          type: object
      required:
      - params
      type: object
    PromptTemplateDTO:
      description: Prompt template content
      example:
        template: template
        variables:
          key: "{}"
        chatTemplate:
          system: system
          messages:
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          messageToSend:
            role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
        format: format
      properties:
        template:
          description: "Prompt text template content, choose one between this and\
            \ chatTemplate field, priority: template > chatTemplate"
          type: string
        chatTemplate:
          $ref: '#/components/schemas/ChatPromptContentDTO'
        variables:
          additionalProperties:
            description: "Variables applied to the template, can be empty"
            type: object
          description: "Variables applied to the template, can be empty"
          type: object
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
      type: object
    LlmResultDTO:
      description: Prompt service result
      example:
        requestId: requestId
        tokenUsage:
          inputTokenCount: 0
          totalTokenCount: 1
          outputTokenCount: 6
        finishReason: finishReason
        text: text
        message:
          role: role
          contents:
          - type: type
            content: content
          - type: type
            content: content
          name: name
          context: context
          contentText: contentText
          toolCalls:
          - name: name
            arguments: arguments
            id: id
          - name: name
            arguments: arguments
            id: id
      properties:
        requestId:
          description: Request identifier
          type: string
        text:
          description: "Model response content, the complete content is included in\
            \ non-streaming responses; only the delta content is included in streaming\
            \ responses (the complete content of streaming responses is in the content\
            \ of the last frame message field)"
          type: string
        message:
          $ref: '#/components/schemas/ChatMessageDTO'
        finishReason:
          description: "Model end reason: stop | length | tool_execution | content_filter"
          type: string
        tokenUsage:
          $ref: '#/components/schemas/TokenUsageDTO'
      type: object
    TokenUsageDTO:
      description: Token usage information
      example:
        inputTokenCount: 0
        totalTokenCount: 1
        outputTokenCount: 6
      properties:
        inputTokenCount:
          description: Input token count
          format: int32
          type: integer
        outputTokenCount:
          description: Output token count
          format: int32
          type: integer
        totalTokenCount:
          description: Total token count
          format: int32
          type: integer
      type: object
    SseEmitter:
      properties:
        timeout:
          format: int64
          type: integer
      type: object
    PromptQuery.Where:
      description: Query condition
      example:
        aiModels:
        - aiModels
        - aiModels
        tagsOp: tagsOp
        visibility: visibility
        name: name
        aiModelsOp: aiModelsOp
        text: text
        type: type
        lang: lang
        username: username
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: public, public_org (search this organization),\
            \ private (default)"
          type: string
        username:
          description: "Effective when searching public, public_org prompts, if not\
            \ specified, search all users"
          type: string
        tags:
          description: Tags
          items:
            description: Tags
            type: string
          type: array
        tagsOp:
          description: "Relationship between tags: and | or (default)"
          type: string
        aiModels:
          description: Model set
          items:
            description: Model set
            type: string
          type: array
        aiModelsOp:
          description: "Relationship between model sets: and | or (default)"
          type: string
        name:
          description: "Name, left match"
          type: string
        type:
          description: "Type, exact match: string (default) | chat"
          type: string
        lang:
          description: "Language, exact match"
          type: string
        text:
          description: "Name, description, template, example, fuzzy match, any one\
            \ match is sufficient; public scope + general search for all users does\
            \ not guarantee real-time."
          type: string
      type: object
    PromptQueryDTO:
      description: Prompt template query request
      example:
        orderBy:
        - orderBy
        - orderBy
        pageSize: 6
        where:
          aiModels:
          - aiModels
          - aiModels
          tagsOp: tagsOp
          visibility: visibility
          name: name
          aiModelsOp: aiModelsOp
          text: text
          type: type
          lang: lang
          username: username
          tags:
          - tags
          - tags
        pageNum: 0
      properties:
        where:
          $ref: '#/components/schemas/PromptQuery.Where'
        orderBy:
          description: |
            Sorting condition, supported sorting fields are:
            - version
            - modifyTime
            - createTime
            - (interactive statistical fields)

            Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
          items:
            description: |
              Sorting condition, supported sorting fields are:
              - version
              - modifyTime
              - createTime
              - (interactive statistical fields)

              Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
            type: string
          type: array
        pageNum:
          description: "Page number, default is 0"
          format: int64
          type: integer
        pageSize:
          description: "Number of items per page, 1～50, default is 10"
          format: int64
          type: integer
      type: object
    AiModelInfoDTO:
      description: Model information
      example:
        modelId: modelId
        provider: provider
        requestId: requestId
        name: name
        description: description
        type: type
      properties:
        requestId:
          description: Request identifier
          type: string
        modelId:
          description: "Model identifier: [provider]name"
          type: string
        name:
          description: Model name
          type: string
        description:
          description: Model description
          type: string
        provider:
          description: "Model provider: hugging_face | open_ai | local_ai | in_process\
            \ | dash_scope | unknown"
          type: string
        type:
          description: "Model type: text2text | text2chat | text2image | embedding\
            \ | moderation"
          type: string
      type: object
    PromptSummaryDTO:
      description: Prompt summary content
      example:
        parentUid: parentUid
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        promptUid: promptUid
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        type: type
        version: 6
        tags:
        - tags
        - tags
        requestId: requestId
        promptId: 0
        name: name
        lang: lang
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        promptId:
          description: "Prompt identifier, will change after publish"
          format: int64
          type: integer
        promptUid:
          description: Prompt immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced prompt
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Prompt name
          type: string
        type:
          description: "Prompt type: string | chat"
          type: string
        description:
          description: "Prompt description (50 characters, the excess part is represented\
            \ by ellipsis)"
          type: string
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
        lang:
          description: "Prompt language: en (default) | zh | ..."
          type: string
        username:
          description: Prompt owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
      type: object
    PromptDetailsDTO:
      description: Prompt detailed content
      example:
        parentUid: parentUid
        template: template
        ext: ext
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        promptUid: promptUid
        inputs: inputs
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        type: type
        version: 6
        tags:
        - tags
        - tags
        example: example
        chatTemplate:
          system: system
          messages:
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          - role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          messageToSend:
            role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
        requestId: requestId
        promptId: 0
        draft: draft
        name: name
        lang: lang
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        promptId:
          description: "Prompt identifier, will change after publish"
          format: int64
          type: integer
        promptUid:
          description: Prompt immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced prompt
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Prompt name
          type: string
        type:
          description: "Prompt type: string | chat"
          type: string
        description:
          description: "Prompt description (50 characters, the excess part is represented\
            \ by ellipsis)"
          type: string
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
        lang:
          description: "Prompt language: en (default) | zh | ..."
          type: string
        username:
          description: Prompt owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        template:
          description: Prompt text template content
          type: string
        chatTemplate:
          $ref: '#/components/schemas/ChatPromptContentDTO'
        example:
          description: Prompt example
          type: string
        inputs:
          description: "Prompt inputs, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
      type: object
    PluginCreateDTO:
      description: Request data for creating new plugin information
      example:
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        apiFormat: apiFormat
        provider: provider
        manifestInfo: manifestInfo
        name: name
        apiInfo: apiInfo
        manifestFormat: manifestFormat
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Plugin name
          type: string
        manifestFormat:
          description: "Manifest format, currently supported: dash_scope (default),\
            \ open_ai"
          type: string
        manifestInfo:
          description: "Manifest content, can be full content or a URL"
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3 (default)"
          type: string
        apiInfo:
          description: "API description content, can be full content or a URL"
          type: string
        provider:
          description: "Provider information, default is the current user's username"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    PluginQuery.Where:
      description: Query condition
      example:
        aiModels:
        - aiModels
        - aiModels
        tagsOp: tagsOp
        visibility: visibility
        apiFormat: apiFormat
        provider: provider
        name: name
        aiModelsOp: aiModelsOp
        text: text
        manifestFormat: manifestFormat
        username: username
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: public, public_org (search this organization),\
            \ private (default)"
          type: string
        username:
          description: "Effective when searching public, public_org prompts, if not\
            \ specified, search all users"
          type: string
        manifestFormat:
          description: "Manifest configuration format, currently supported: dash_scope,\
            \ open_ai."
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3."
          type: string
        tags:
          description: Tags
          items:
            description: Tags
            type: string
          type: array
        tagsOp:
          description: "Relationship between tags: and | or (default)"
          type: string
        aiModels:
          description: Model set
          items:
            description: Model set
            type: string
          type: array
        aiModelsOp:
          description: "Relationship between model sets: and | or (default)"
          type: string
        name:
          description: "Name, left match"
          type: string
        provider:
          description: "Provider, left match"
          type: string
        text:
          description: "Name, provider Information, manifest (real-time pulling is\
            \ not supported at the moment), fuzzy matching, any one match is sufficient;\
            \ public scope + general search for all users does not guarantee real-time."
          type: string
      type: object
    PluginQueryDTO:
      description: Plugin information query request
      example:
        orderBy:
        - orderBy
        - orderBy
        pageSize: 6
        where:
          aiModels:
          - aiModels
          - aiModels
          tagsOp: tagsOp
          visibility: visibility
          apiFormat: apiFormat
          provider: provider
          name: name
          aiModelsOp: aiModelsOp
          text: text
          manifestFormat: manifestFormat
          username: username
          tags:
          - tags
          - tags
        pageNum: 0
      properties:
        where:
          $ref: '#/components/schemas/PluginQuery.Where'
        orderBy:
          description: |
            Ordering condition, supported sorting fields are:
            - modifyTime
            - createTime

            Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
          items:
            description: |
              Ordering condition, supported sorting fields are:
              - modifyTime
              - createTime

              Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
            type: string
          type: array
        pageNum:
          description: "Page number, default is 0"
          format: int64
          type: integer
        pageSize:
          description: "Page item count, 1～50, default is 10"
          format: int64
          type: integer
      type: object
    PluginSummaryDTO:
      description: Plugin summary information
      example:
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        pluginId: 0
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        provider: provider
        apiFormat: apiFormat
        requestId: requestId
        name: name
        pluginUid: pluginUid
        manifestFormat: manifestFormat
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        pluginId:
          description: Plugin identifier
          format: int64
          type: integer
        pluginUid:
          description: Plugin immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        name:
          description: Plugin name
          type: string
        provider:
          description: Information of the provider
          type: string
        manifestFormat:
          description: "Manifest format, currently supported: dash_scope, open_ai"
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3"
          type: string
        username:
          description: Plugin owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
      type: object
    PluginDetailsDTO:
      description: Plugin detailed content
      example:
        ext: ext
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        pluginId: 0
        manifestInfo: manifestInfo
        toolSpecInfo: toolSpecInfo
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        apiInfo: apiInfo
        tags:
        - tags
        - tags
        provider: provider
        apiFormat: apiFormat
        requestId: requestId
        name: name
        pluginUid: pluginUid
        toolSpecFormat: toolSpecFormat
        manifestFormat: manifestFormat
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        pluginId:
          description: Plugin identifier
          format: int64
          type: integer
        pluginUid:
          description: Plugin immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        name:
          description: Plugin name
          type: string
        provider:
          description: Information of the provider
          type: string
        manifestFormat:
          description: "Manifest format, currently supported: dash_scope, open_ai"
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3"
          type: string
        username:
          description: Plugin owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        manifestInfo:
          description: "Manifest content, different formats may have differences"
          type: string
        apiInfo:
          description: "API description content, different formats may have content\
            \ differences"
          type: string
        toolSpecFormat:
          description: "Tool specification format, currently supported: open_ai"
          type: string
        toolSpecInfo:
          description: Tool specification content
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
      type: object
    ChatCreateDTO:
      description: Request data for starting a chat session
      example:
        characterNickname: characterNickname
        apiKeyValue: apiKeyValue
        ext: ext
        about: about
        userNickname: userNickname
        backendId: backendId
        apiKeyName: apiKeyName
        characterId: 0
        userProfile: userProfile
      properties:
        userNickname:
          description: User nickname for this session
          type: string
        userProfile:
          description: User profile for this session
          type: string
        characterNickname:
          description: Character nickname for this session
          type: string
        about:
          description: Anything about this session
          type: string
        characterId:
          description: Character id for this session
          format: int64
          type: integer
        backendId:
          description: Character backend for this session
          type: string
        apiKeyName:
          description: "API-KEY name, priority: apiKeyName > apiKeyValue"
          type: string
        apiKeyValue:
          description: API-KEY value
          type: string
        ext:
          description: Extra info for this session
          type: string
      required:
      - characterId
      type: object
    CharacterCreateDTO:
      description: Request data for creating new character information
      example:
        parentUid: parentUid
        ext: ext
        visibility: visibility
        gender: gender
        defaultScene: defaultScene
        profile: profile
        greeting: greeting
        description: description
        chatExample: chatExample
        avatar: avatar
        picture: picture
        tags:
        - tags
        - tags
        draft: draft
        name: name
        nickname: nickname
        lang: lang
        chatStyle: chatStyle
      properties:
        parentUid:
          description: Referenced character
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        name:
          description: Character name
          type: string
        description:
          description: Character description
          type: string
        nickname:
          description: Character nickname
          type: string
        avatar:
          description: Character avatar url
          type: string
        picture:
          description: Character picture url
          type: string
        gender:
          description: "Character gender: male | female | other"
          type: string
        profile:
          description: Character profile
          type: string
        greeting:
          description: Character greeting
          type: string
        chatStyle:
          description: Character chat-style
          type: string
        chatExample:
          description: Character chat-example
          type: string
        defaultScene:
          description: "Default scene, which will be set as the default conversation\
            \ background information when creating a new chat"
          type: string
        lang:
          description: "Character language: en (default) | zh | ..."
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Character draft information
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
      required:
      - name
      type: object
    CharacterItemForNameDTO:
      description: Character identifier and version information
      example:
        stats:
          referCount: 5
          score: 7
          gmtModified: 2000-01-23T04:56:07.000+00:00
          recommendCount: 5
          requestId: requestId
          scoreCount: 2
          referId: referId
          referType: referType
          viewCount: 1
          gmtCreate: 2000-01-23T04:56:07.000+00:00
        characterId: 0
        version: 6
      properties:
        characterId:
          description: characterId
          format: int64
          type: integer
        version:
          description: version
          format: int32
          type: integer
        stats:
          $ref: '#/components/schemas/InteractiveStatsDTO'
      type: object
    CharacterQuery.Where:
      description: Query condition
      example:
        highPriority: true
        tagsOp: tagsOp
        visibility: visibility
        name: name
        text: text
        lang: lang
        username: username
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: public, public_org (search this organization),\
            \ private (default)"
          type: string
        username:
          description: "Effective when searching public, public_org characters, if\
            \ not specified, search all users"
          type: string
        tags:
          description: Tags
          items:
            description: Tags
            type: string
          type: array
        tagsOp:
          description: "Relationship between tags: and | or (default)"
          type: string
        name:
          description: "Name, left match"
          type: string
        lang:
          description: "Language, exact match"
          type: string
        text:
          description: "Name, description, profile, chat style, fuzzy match, any one\
            \ match is sufficient; public scope + general search for all users does\
            \ not guarantee real-time."
          type: string
        highPriority:
          description: "Character priority, greater than 1 indicates a high priority"
          type: boolean
      type: object
    CharacterQueryDTO:
      description: Character query request
      example:
        orderBy:
        - orderBy
        - orderBy
        pageSize: 6
        where:
          highPriority: true
          tagsOp: tagsOp
          visibility: visibility
          name: name
          text: text
          lang: lang
          username: username
          tags:
          - tags
          - tags
        pageNum: 0
      properties:
        where:
          $ref: '#/components/schemas/CharacterQuery.Where'
        orderBy:
          description: |
            Sorting condition, supported sorting fields are:
            - version
            - modifyTime
            - createTime

            Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
          items:
            description: |
              Sorting condition, supported sorting fields are:
              - version
              - modifyTime
              - createTime

              Sorting priority follows the list order, default is descending, if ascending is expected, it needs to be specified after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
            type: string
          type: array
        pageNum:
          description: "Page number, default is 0"
          format: int64
          type: integer
        pageSize:
          description: "Number of items per page, 1～50, default is 10"
          format: int64
          type: integer
      type: object
    CharacterSummaryDTO:
      description: Character summary content
      example:
        parentUid: parentUid
        gmtModified: 2000-01-23T04:56:07.000+00:00
        visibility: visibility
        gender: gender
        defaultScene: defaultScene
        greeting: greeting
        description: description
        avatar: avatar
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 1
        picture: picture
        tags:
        - tags
        - tags
        requestId: requestId
        name: name
        nickname: nickname
        lang: lang
        characterId: 6
        characterUid: characterUid
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        characterId:
          description: "Character identifier, will change after publish"
          format: int64
          type: integer
        characterUid:
          description: Character immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced character
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Character name
          type: string
        description:
          description: Character description
          type: string
        nickname:
          description: Character nickname
          type: string
        avatar:
          description: Character avatar url
          type: string
        picture:
          description: Character picture url
          type: string
        gender:
          description: "Character gender: male | female | other"
          type: string
        lang:
          description: "Character language: en (default) | zh | ..."
          type: string
        greeting:
          description: Character greeting
          type: string
        defaultScene:
          description: "Default scene, which will be set as the default conversation\
            \ background information when creating a new chat"
          type: string
        username:
          description: Character owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
      type: object
    CharacterBackendDetailsDTO:
      description: Character backend detailed information
      example:
        moderationApiKeyName: moderationApiKeyName
        gmtModified: 2000-01-23T04:56:07.000+00:00
        moderationParams: moderationParams
        greetingPromptTaskId: greetingPromptTaskId
        moderationModelId: moderationModelId
        backendId: backendId
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        quotaType: quotaType
        isDefault: true
        requestId: requestId
        initQuota: 5
        chatPromptTaskId: chatPromptTaskId
        messageWindowSize: 1
        longTermMemoryWindowSize: 5
        characterUid: characterUid
      properties:
        requestId:
          description: Request identifier
          type: string
        backendId:
          description: Character backend identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        characterUid:
          description: Character immutable identifier
          type: string
        isDefault:
          description: Whether it is the default backend
          type: boolean
        chatPromptTaskId:
          description: Prompt task identifier for chat
          type: string
        greetingPromptTaskId:
          description: Prompt task identifier for greeting
          type: string
        moderationModelId:
          description: Moderation model for the character's response
          type: string
        moderationApiKeyName:
          description: Api key name for moderation model
          type: string
        moderationParams:
          description: Parameters for moderation model
          type: string
        messageWindowSize:
          description: Max messages in the character's memory
          format: int32
          type: integer
        longTermMemoryWindowSize:
          description: Max rounds (a round includes a user message and a character
            reply) in the character's long term memory
          format: int32
          type: integer
        initQuota:
          description: Initial quota when opening a chat
          format: int64
          type: integer
        quotaType:
          description: "Quota type: messages | tokens | none (not limited)"
          type: string
      type: object
    CharacterDetailsDTO:
      description: Character detailed content
      example:
        gmtModified: 2000-01-23T04:56:07.000+00:00
        gender: gender
        defaultScene: defaultScene
        greeting: greeting
        description: description
        requestId: requestId
        draft: draft
        nickname: nickname
        lang: lang
        characterId: 0
        characterUid: characterUid
        chatStyle: chatStyle
        parentUid: parentUid
        ext: ext
        visibility: visibility
        profile: profile
        chatExample: chatExample
        avatar: avatar
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
        backends:
        - moderationApiKeyName: moderationApiKeyName
          gmtModified: 2000-01-23T04:56:07.000+00:00
          moderationParams: moderationParams
          greetingPromptTaskId: greetingPromptTaskId
          moderationModelId: moderationModelId
          backendId: backendId
          gmtCreate: 2000-01-23T04:56:07.000+00:00
          quotaType: quotaType
          isDefault: true
          requestId: requestId
          initQuota: 5
          chatPromptTaskId: chatPromptTaskId
          messageWindowSize: 1
          longTermMemoryWindowSize: 5
          characterUid: characterUid
        - moderationApiKeyName: moderationApiKeyName
          gmtModified: 2000-01-23T04:56:07.000+00:00
          moderationParams: moderationParams
          greetingPromptTaskId: greetingPromptTaskId
          moderationModelId: moderationModelId
          backendId: backendId
          gmtCreate: 2000-01-23T04:56:07.000+00:00
          quotaType: quotaType
          isDefault: true
          requestId: requestId
          initQuota: 5
          chatPromptTaskId: chatPromptTaskId
          messageWindowSize: 1
          longTermMemoryWindowSize: 5
          characterUid: characterUid
        picture: picture
        tags:
        - tags
        - tags
        name: name
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        characterId:
          description: "Character identifier, will change after publish"
          format: int64
          type: integer
        characterUid:
          description: Character immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced character
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Character name
          type: string
        description:
          description: Character description
          type: string
        nickname:
          description: Character nickname
          type: string
        avatar:
          description: Character avatar url
          type: string
        picture:
          description: Character picture url
          type: string
        gender:
          description: "Character gender: male | female | other"
          type: string
        lang:
          description: "Character language: en (default) | zh | ..."
          type: string
        greeting:
          description: Character greeting
          type: string
        defaultScene:
          description: "Default scene, which will be set as the default conversation\
            \ background information when creating a new chat"
          type: string
        username:
          description: Character owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        profile:
          description: Character profile
          type: string
        chatStyle:
          description: Character chat-style
          type: string
        chatExample:
          description: Character chat-example
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Character draft information
          type: string
        backends:
          description: Character backends information
          items:
            $ref: '#/components/schemas/CharacterBackendDetailsDTO'
          type: array
      type: object
    AiApiKeyCreateDTO:
      description: Request data for adding new model credential information
      example:
        provider: provider
        name: name
        enabled: true
        token: token
      properties:
        name:
          description: Credential name
          type: string
        provider:
          description: "Model provider: hugging_face | open_ai | local_ai | in_process\
            \ | dash_scope | unknown"
          type: string
        token:
          description: Credential content
          type: string
        enabled:
          description: Whether to enable (enabled by default)
          type: boolean
      required:
      - name
      - provider
      - token
      type: object
    AgentCreateDTO:
      description: Request data for creating new agent information
      example:
        parentUid: parentUid
        ext: ext
        aiModels:
        - aiModels
        - aiModels
        visibility: visibility
        draft: draft
        format: format
        name: name
        description: description
        config: config
        parameters: parameters
        example: example
        tags:
        - tags
        - tags
      properties:
        parentUid:
          description: Referenced agent
          type: string
        visibility:
          description: "Visibility: private (default), public, public_org, hidden"
          type: string
        format:
          description: "Agent format, currently supported: langflow"
          type: string
        name:
          description: Agent name
          type: string
        description:
          description: Agent description
          type: string
        config:
          description: Agent configuration
          type: string
        example:
          description: Agent example
          type: string
        parameters:
          description: "Agent parameters, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: "Supported model set, empty means no model limit"
          items:
            description: "Supported model set, empty means no model limit"
            type: string
          type: array
      required:
      - name
      type: object
    AgentItemForNameDTO:
      description: Agent identifier and version information
      example:
        agentId: 0
        stats:
          referCount: 5
          score: 7
          gmtModified: 2000-01-23T04:56:07.000+00:00
          recommendCount: 5
          requestId: requestId
          scoreCount: 2
          referId: referId
          referType: referType
          viewCount: 1
          gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
      properties:
        agentId:
          description: agentId
          format: int64
          type: integer
        version:
          description: version
          format: int32
          type: integer
        stats:
          $ref: '#/components/schemas/InteractiveStatsDTO'
      type: object
    AgentQuery.Where:
      description: Query condition
      example:
        aiModels:
        - aiModels
        - aiModels
        tagsOp: tagsOp
        visibility: visibility
        format: format
        name: name
        aiModelsOp: aiModelsOp
        text: text
        username: username
        tags:
        - tags
        - tags
      properties:
        visibility:
          description: "Visibility: public, public_org (search this organization),\
            \ private (default)"
          type: string
        username:
          description: "Effective when searching public, public_org prompts, if not\
            \ specified, search all users"
          type: string
        format:
          description: "Agent configuration format, currently supported: langflow."
          type: string
        tags:
          description: Tags
          items:
            description: Tags
            type: string
          type: array
        tagsOp:
          description: "Relationship between tags: and | or (default)"
          type: string
        aiModels:
          description: Model set
          items:
            description: Model set
            type: string
          type: array
        aiModelsOp:
          description: "Relationship between model sets: and | or (default)"
          type: string
        name:
          description: "Name, left match"
          type: string
        text:
          description: "Name, description, example, fuzzy matching, any one match\
            \ is sufficient; public scope + general search for all users does not\
            \ guarantee real-time."
          type: string
      type: object
    AgentQueryDTO:
      description: Agent information query request
      example:
        orderBy:
        - orderBy
        - orderBy
        pageSize: 6
        where:
          aiModels:
          - aiModels
          - aiModels
          tagsOp: tagsOp
          visibility: visibility
          format: format
          name: name
          aiModelsOp: aiModelsOp
          text: text
          username: username
          tags:
          - tags
          - tags
        pageNum: 0
      properties:
        where:
          $ref: '#/components/schemas/AgentQuery.Where'
        orderBy:
          description: |
            Sorting condition, supported sorting fields are:
            - version
            - modifyTime
            - createTime

            Sorting priority follows the list order, default is descending. If ascending is expected, specify after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
          items:
            description: |
              Sorting condition, supported sorting fields are:
              - version
              - modifyTime
              - createTime

              Sorting priority follows the list order, default is descending. If ascending is expected, specify after the field, such as: orderBy: [\"score\", \"scoreCount asc\"] (scoreCount in ascending order)
            type: string
          type: array
        pageNum:
          description: "Page number, default is 0"
          format: int64
          type: integer
        pageSize:
          description: "Number of items per page, 1~50, default is 10"
          format: int64
          type: integer
      type: object
    AgentSummaryDTO:
      description: Agent summary information
      example:
        parentUid: parentUid
        agentId: 0
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
        tags:
        - tags
        - tags
        requestId: requestId
        name: name
        agentUid: agentUid
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        agentId:
          description: "Agent identifier, will change after publish"
          format: int64
          type: integer
        agentUid:
          description: Agent immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced agent
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        format:
          description: "Agent format, currently supported: langflow"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Agent name
          type: string
        description:
          description: Agent description
          type: string
        username:
          description: Agent owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
      type: object
    AgentDetailsDTO:
      description: Agent detailed content
      example:
        parentUid: parentUid
        ext: ext
        agentId: 0
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
        tags:
        - tags
        - tags
        example: example
        requestId: requestId
        draft: draft
        name: name
        agentUid: agentUid
        config: config
        parameters: parameters
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        agentId:
          description: "Agent identifier, will change after publish"
          format: int64
          type: integer
        agentUid:
          description: Agent immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced agent
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        format:
          description: "Agent format, currently supported: langflow"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Agent name
          type: string
        description:
          description: Agent description
          type: string
        username:
          description: Agent owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        config:
          description: Agent configuration
          type: string
        example:
          description: Agent example
          type: string
        parameters:
          description: "Agent parameters, JSON format"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
        draft:
          description: Draft content
          type: string
      type: object
    AppConfigCreateDTO:
      description: Configuration creation information
      example:
        name: name
        format: format
        content: content
      properties:
        name:
          description: Configuration name
          type: string
        format:
          description: "Configuration format: kv | json | yaml"
          type: string
        content:
          description: Configuration content
          type: string
      required:
      - name
      type: object
    HotTagDTO:
      description: Hot tag
      example:
        count: 0
        content: content
      properties:
        content:
          description: Tag content
          type: string
        count:
          description: Tag count
          format: int64
          type: integer
      type: object
    PromptSummaryStatsDTO:
      description: "Prompt template summary content, including interactive statistical\
        \ information"
      example:
        parentUid: parentUid
        referCount: 5
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        promptUid: promptUid
        scoreCount: 2
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        type: type
        version: 6
        tags:
        - tags
        - tags
        score: 7
        recommendCount: 5
        requestId: requestId
        promptId: 0
        name: name
        viewCount: 1
        lang: lang
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        promptId:
          description: "Prompt identifier, will change after publish"
          format: int64
          type: integer
        promptUid:
          description: Prompt immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced prompt
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Prompt name
          type: string
        type:
          description: "Prompt type: string | chat"
          type: string
        description:
          description: "Prompt description (50 characters, the excess part is represented\
            \ by ellipsis)"
          type: string
        format:
          description: "Prompt format: mustache (default) | f_string"
          type: string
        lang:
          description: "Prompt language: en (default) | zh | ..."
          type: string
        username:
          description: Prompt owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        viewCount:
          description: View count
          format: int64
          type: integer
        referCount:
          description: Reference count
          format: int64
          type: integer
        recommendCount:
          description: Recommendation count
          format: int64
          type: integer
        scoreCount:
          description: Score count
          format: int64
          type: integer
        score:
          description: Average score
          format: int64
          type: integer
      type: object
    PluginSummaryStatsDTO:
      description: "Plugin template summary content, including interactive statistical\
        \ information"
      example:
        referCount: 1
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        pluginId: 0
        scoreCount: 5
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        score: 2
        recommendCount: 5
        provider: provider
        apiFormat: apiFormat
        requestId: requestId
        name: name
        pluginUid: pluginUid
        viewCount: 6
        manifestFormat: manifestFormat
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        pluginId:
          description: Plugin identifier
          format: int64
          type: integer
        pluginUid:
          description: Plugin immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        name:
          description: Plugin name
          type: string
        provider:
          description: Information of the provider
          type: string
        manifestFormat:
          description: "Manifest format, currently supported: dash_scope, open_ai"
          type: string
        apiFormat:
          description: "API description format, currently supported: openapi_v3"
          type: string
        username:
          description: Plugin owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        viewCount:
          description: View count
          format: int64
          type: integer
        referCount:
          description: Reference count
          format: int64
          type: integer
        recommendCount:
          description: Recommendation count
          format: int64
          type: integer
        scoreCount:
          description: Score count
          format: int64
          type: integer
        score:
          description: Average score
          format: int64
          type: integer
      type: object
    CharacterSummaryStatsDTO:
      description: "Character summary content, including interactive statistical information"
      example:
        parentUid: parentUid
        referCount: 5
        gmtModified: 2000-01-23T04:56:07.000+00:00
        visibility: visibility
        gender: gender
        defaultScene: defaultScene
        scoreCount: 2
        greeting: greeting
        description: description
        avatar: avatar
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
        picture: picture
        tags:
        - tags
        - tags
        score: 7
        recommendCount: 5
        requestId: requestId
        name: name
        nickname: nickname
        viewCount: 1
        lang: lang
        characterId: 0
        characterUid: characterUid
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        characterId:
          description: "Character identifier, will change after publish"
          format: int64
          type: integer
        characterUid:
          description: Character immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced character
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Character name
          type: string
        description:
          description: Character description
          type: string
        nickname:
          description: Character nickname
          type: string
        avatar:
          description: Character avatar url
          type: string
        picture:
          description: Character picture url
          type: string
        gender:
          description: "Character gender: male | female | other"
          type: string
        lang:
          description: "Character language: en (default) | zh | ..."
          type: string
        greeting:
          description: Character greeting
          type: string
        defaultScene:
          description: "Default scene, which will be set as the default conversation\
            \ background information when creating a new chat"
          type: string
        username:
          description: Character owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        viewCount:
          description: View count
          format: int64
          type: integer
        referCount:
          description: Reference count
          format: int64
          type: integer
        recommendCount:
          description: Recommendation count
          format: int64
          type: integer
        scoreCount:
          description: Score count
          format: int64
          type: integer
        score:
          description: Average score
          format: int64
          type: integer
      type: object
    AgentSummaryStatsDTO:
      description: "Agent template summary content, including interactive statistical\
        \ information"
      example:
        parentUid: parentUid
        referCount: 5
        agentId: 0
        gmtModified: 2000-01-23T04:56:07.000+00:00
        aiModels:
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        - modelId: modelId
          provider: provider
          requestId: requestId
          name: name
          description: description
          type: type
        visibility: visibility
        scoreCount: 2
        format: format
        description: description
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        version: 6
        tags:
        - tags
        - tags
        score: 7
        recommendCount: 5
        requestId: requestId
        name: name
        agentUid: agentUid
        viewCount: 1
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        agentId:
          description: "Agent identifier, will change after publish"
          format: int64
          type: integer
        agentUid:
          description: Agent immutable identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        parentUid:
          description: Referenced agent
          type: string
        visibility:
          description: "Visibility: private, public, public_org, hidden"
          type: string
        format:
          description: "Agent format, currently supported: langflow"
          type: string
        version:
          description: Version
          format: int32
          type: integer
        name:
          description: Agent name
          type: string
        description:
          description: Agent description
          type: string
        username:
          description: Agent owner
          type: string
        tags:
          description: Tag set
          items:
            description: Tag set
            type: string
          type: array
        aiModels:
          description: Supported model set
          items:
            $ref: '#/components/schemas/AiModelInfoDTO'
          type: array
        viewCount:
          description: View count
          format: int64
          type: integer
        referCount:
          description: Reference count
          format: int64
          type: integer
        recommendCount:
          description: Recommendation count
          format: int64
          type: integer
        scoreCount:
          description: Score count
          format: int64
          type: integer
        score:
          description: Average score
          format: int64
          type: integer
      type: object
    RagTaskDetailsDTO:
      description: Prompt task detailed information
      example:
        ext: ext
        maxOverlapSize: 1
        gmtModified: 2000-01-23T04:56:07.000+00:00
        maxSegmentSize: 6
        source: source
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        gmtStart: 2000-01-23T04:56:07.000+00:00
        gmtEnd: 2000-01-23T04:56:07.000+00:00
        sourceType: sourceType
        requestId: requestId
        id: 0
        characterUid: characterUid
        status: status
      properties:
        requestId:
          description: Request identifier
          type: string
        id:
          description: RAG task identifier
          format: int64
          type: integer
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        gmtStart:
          description: Task start execution time
          format: date-time
          type: string
        gmtEnd:
          description: Task end execution time
          format: date-time
          type: string
        characterUid:
          description: Character identifier
          type: string
        sourceType:
          description: "Source type: file (default) | url"
          type: string
        source:
          description: "Source information, url, or a key for file"
          type: string
        maxSegmentSize:
          description: The maximum size of a segment in tokens.
          format: int32
          type: integer
        maxOverlapSize:
          description: The maximum size of the overlap between segments in tokens.
          format: int32
          type: integer
        status:
          description: "Task execution status: pending | running | succeeded | failed\
            \ | canceled"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
      type: object
    PromptTaskDetailsDTO:
      description: Prompt task detailed information
      example:
        apiKeyValue: apiKeyValue
        cron: cron
        ext: ext
        gmtModified: 2000-01-23T04:56:07.000+00:00
        promptRef:
          variables:
            key: "{}"
          promptId: 0
          draft: true
        modelId: modelId
        apiKeyName: apiKeyName
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        params:
          key: "{}"
        gmtStart: 2000-01-23T04:56:07.000+00:00
        gmtEnd: 2000-01-23T04:56:07.000+00:00
        requestId: requestId
        taskId: taskId
        status: status
      properties:
        requestId:
          description: Request identifier
          type: string
        taskId:
          description: Prompt task identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        gmtStart:
          description: Task start execution time
          format: date-time
          type: string
        gmtEnd:
          description: Task end execution time
          format: date-time
          type: string
        promptRef:
          $ref: '#/components/schemas/PromptRefDTO'
        modelId:
          description: Model identifier
          type: string
        apiKeyName:
          description: API-KEY name
          type: string
        apiKeyValue:
          description: API-KEY value
          type: string
        params:
          additionalProperties:
            description: Model call parameters
            type: object
          description: Model call parameters
          type: object
        cron:
          description: Task scheduling configuration which compatible with Quartz
            cron format
          type: string
        status:
          description: "Task execution status: pending | running | succeeded | failed\
            \ | canceled"
          type: string
        ext:
          description: "Additional information, JSON format"
          type: string
      type: object
    ChatContextDTO:
      description: Chat context
      example:
        characterNickname: characterNickname
        apiKeyValue: apiKeyValue
        ext: ext
        gmtModified: 2000-01-23T04:56:07.000+00:00
        chatId: chatId
        about: about
        userNickname: userNickname
        backendId: backendId
        apiKeyName: apiKeyName
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        userProfile: userProfile
        gmtRead: 2000-01-23T04:56:07.000+00:00
        quotaType: quotaType
        requestId: requestId
        quota: 0
      properties:
        requestId:
          description: Request identifier
          type: string
        chatId:
          description: Chat identifier
          type: string
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        gmtRead:
          description: Read time
          format: date-time
          type: string
        userNickname:
          description: User nickname for this session
          type: string
        userProfile:
          description: User profile for this session
          type: string
        characterNickname:
          description: Character nickname for this session
          type: string
        about:
          description: Anything about this session
          type: string
        backendId:
          description: Character backend for this session
          type: string
        apiKeyName:
          description: "API-KEY name, priority: apiKeyName > apiKeyValue"
          type: string
        apiKeyValue:
          description: API-KEY value
          type: string
        quota:
          description: Quota of this chat
          format: int64
          type: integer
        quotaType:
          description: "Quota type: messages | tokens | none (not limited)"
          type: string
        ext:
          description: Extra info for this session
          type: string
      required:
      - backendId
      type: object
    ChatMessageRecordDTO:
      description: Chat message record
      example:
        ext: ext
        messageId: 5
        message:
          role: role
          contents:
          - type: type
            content: content
          - type: type
            content: content
          name: name
          context: context
          contentText: contentText
          toolCalls:
          - name: name
            arguments: arguments
            id: id
          - name: name
            arguments: arguments
            id: id
        gmtCreate: 2000-01-23T04:56:07.000+00:00
      properties:
        message:
          $ref: '#/components/schemas/ChatMessageDTO'
        messageId:
          description: Message identifier
          format: int64
          type: integer
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        ext:
          description: Additional information
          type: string
      type: object
    ChatSessionDTO:
      description: Chat session
      example:
        character:
          parentUid: parentUid
          gmtModified: 2000-01-23T04:56:07.000+00:00
          visibility: visibility
          gender: gender
          defaultScene: defaultScene
          greeting: greeting
          description: description
          avatar: avatar
          gmtCreate: 2000-01-23T04:56:07.000+00:00
          version: 1
          picture: picture
          tags:
          - tags
          - tags
          requestId: requestId
          name: name
          nickname: nickname
          lang: lang
          characterId: 6
          characterUid: characterUid
          username: username
        provider: provider
        senderStatus: senderStatus
        context:
          characterNickname: characterNickname
          apiKeyValue: apiKeyValue
          ext: ext
          gmtModified: 2000-01-23T04:56:07.000+00:00
          chatId: chatId
          about: about
          userNickname: userNickname
          backendId: backendId
          apiKeyName: apiKeyName
          gmtCreate: 2000-01-23T04:56:07.000+00:00
          userProfile: userProfile
          gmtRead: 2000-01-23T04:56:07.000+00:00
          quotaType: quotaType
          requestId: requestId
          quota: 0
        isDebugEnabled: true
        latestMessageRecord:
          ext: ext
          messageId: 5
          message:
            role: role
            contents:
            - type: type
              content: content
            - type: type
              content: content
            name: name
            context: context
            contentText: contentText
            toolCalls:
            - name: name
              arguments: arguments
              id: id
            - name: name
              arguments: arguments
              id: id
          gmtCreate: 2000-01-23T04:56:07.000+00:00
      properties:
        context:
          $ref: '#/components/schemas/ChatContextDTO'
        character:
          $ref: '#/components/schemas/CharacterSummaryDTO'
        provider:
          description: "Model provider: hugging_face | open_ai | local_ai | in_process\
            \ | dash_scope | unknown"
          type: string
        latestMessageRecord:
          $ref: '#/components/schemas/ChatMessageRecordDTO'
        senderStatus:
          description: "Sender status: online | offline | invisible"
          type: string
        isDebugEnabled:
          description: Is it possible to debug
          type: boolean
      type: object
    MemoryUsageDTO:
      description: Memory usage information
      example:
        messageUsage: 0
        requestId: requestId
        tokenUsage:
          inputTokenCount: 0
          totalTokenCount: 1
          outputTokenCount: 6
      properties:
        requestId:
          description: Request identifier
          type: string
        messageUsage:
          description: Messages usage information
          format: int64
          type: integer
        tokenUsage:
          $ref: '#/components/schemas/TokenUsageDTO'
      type: object
    AiApiKeyInfoDTO:
      description: Model credential information
      example:
        gmtModified: 2000-01-23T04:56:07.000+00:00
        provider: provider
        requestId: requestId
        gmtUsed: 2000-01-23T04:56:07.000+00:00
        name: name
        id: 0
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        enabled: true
        token: token
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        id:
          description: Credential identifier
          format: int64
          type: integer
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        gmtUsed:
          description: Last use time
          format: date-time
          type: string
        name:
          description: Credential name
          type: string
        provider:
          description: "Model provider: hugging_face | open_ai | local_ai | in_process\
            \ | dash_scope | unknown"
          type: string
        token:
          description: Credential content
          type: string
        enabled:
          description: Whether to enable
          type: boolean
        username:
          description: Credential owner
          type: string
      type: object
    UserBasicInfoDTO:
      description: User summary information
      example:
        requestId: requestId
        nickname: nickname
        picture: picture
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        username:
          description: Username
          type: string
        nickname:
          description: Nickname
          type: string
        picture:
          description: Avatar
          type: string
      type: object
    ApiTokenInfoDTO:
      description: API token information
      example:
        gmtModified: 2000-01-23T04:56:07.000+00:00
        requestId: requestId
        id: 0
        issuedAt: 2000-01-23T04:56:07.000+00:00
        gmtCreate: 2000-01-23T04:56:07.000+00:00
        type: type
        expiresAt: 2000-01-23T04:56:07.000+00:00
        token: token
        policy: policy
        username: username
      properties:
        requestId:
          description: Request identifier
          type: string
        id:
          description: Token identifier
          format: int64
          type: integer
        gmtCreate:
          description: Creation time
          format: date-time
          type: string
        gmtModified:
          description: Modification time
          format: date-time
          type: string
        type:
          description: Token type
          type: string
        issuedAt:
          description: Token issuance time
          format: date-time
          type: string
        expiresAt:
          description: Token expiration time
          format: date-time
          type: string
        token:
          description: Token content
          type: string
        policy:
          description: Token policy
          type: string
        username:
          description: Token owner
          type: string
      type: object
    AppMetaDTO:
      description: Application metadata
      example:
        buildTimestamp: buildTimestamp
        commitUrl: commitUrl
        name: name
        runningEnv: runningEnv
        version: version
        buildNumber: buildNumber
        releaseNoteUrl: releaseNoteUrl
      properties:
        name:
          description: Application name
          type: string
        version:
          description: Application version
          type: string
        buildTimestamp:
          description: Build time
          type: string
        buildNumber:
          description: Build number
          type: string
        commitUrl:
          description: Commit URL
          type: string
        releaseNoteUrl:
          description: Release notes
          type: string
        runningEnv:
          description: Running environment
          type: string
      type: object
    OpenAiParamDTO:
      description: OpenAI series model parameters
      properties:
        apiKey:
          description: "API-KEY, higher priority than apiKeyName. Either apiKey or\
            \ apiKeyName must be specified."
          type: string
        apiKeyName:
          description: API-KEY name
          type: string
        modelId:
          description: Model identifier
          type: string
        baseUrl:
          description: "OpenAI service provider address, default: https://api.openai.com/v1"
          type: string
        temperature:
          description: "Used to adjust the degree of randomness from sampling in the\
            \ generated model, the value range is (0, 1.0), a temperature of 0 will\
            \ always produce the same output. The higher the temperature, the greater\
            \ the randomness."
          format: double
          type: number
        topP:
          description: "Probability threshold of the nucleus sampling method in the\
            \ generation process, for example, when the value is 0.8, only the smallest\
            \ set of most likely tokens whose probabilities add up to 0.8 or more\
            \ is retained as the candidate set. The value range is (0, 1.0), the larger\
            \ the value, the higher the randomness of the generation; the smaller\
            \ the value, the higher the certainty of the generation."
          format: double
          type: number
        maxTokens:
          description: The maximum number of tokens to generate in the chat completion.
            The total length of input tokens and generated tokens is limited by the
            model's context length.
          format: int32
          type: integer
        presencePenalty:
          description: "Number between -2.0 and 2.0. Positive values penalize new\
            \ tokens based on whether they appear in the text so far, increasing the\
            \ model's likelihood to talk about new topics."
          format: double
          type: number
        frequencyPenalty:
          description: "Number between -2.0 and 2.0. Positive values penalize new\
            \ tokens based on their existing frequency in the text so far, decreasing\
            \ the model's likelihood to repeat the same line verbatim."
          format: double
          type: number
        seed:
          description: "If specified, OpenAI will make a best effort to sample deterministically,\
            \ such that repeated requests with the same seed and parameters should\
            \ return the same result."
          format: int32
          type: integer
        stop:
          description: A collection of stop words that controls the API from generating
            more tokens.
          items:
            description: A collection of stop words that controls the API from generating
              more tokens.
            type: string
          type: array
      required:
      - modelId
      type: object
    QwenParamDTO:
      description: Qwen series model parameters
      properties:
        apiKey:
          description: "API-KEY, higher priority than apiKeyName. Either apiKey or\
            \ apiKeyName must be specified."
          type: string
        apiKeyName:
          description: API-KEY name
          type: string
        modelId:
          description: Model identifier
          type: string
        topP:
          description: "Probability threshold of the nucleus sampling method in the\
            \ generation process, for example, when the value is 0.8, only the smallest\
            \ set of most likely tokens whose probabilities add up to 0.8 or more\
            \ is retained as the candidate set. The value range is (0, 1.0), the larger\
            \ the value, the higher the randomness of the generation; the smaller\
            \ the value, the higher the certainty of the generation."
          format: double
          type: number
        topK:
          description: "The size of the sampling candidate set during generation.\
            \ For example, when the value is 50, only the top 50 tokens with the highest\
            \ scores in a single generation are included in the random sampling candidate\
            \ set. The larger the value, the higher the randomness of the generation;\
            \ the smaller the value, the higher the certainty of the generation. The\
            \ default value is 0, which means that the top_k strategy is not enabled,\
            \ and only the top_p strategy is effective."
          format: int32
          type: integer
        maxTokens:
          description: The maximum number of tokens to generate in the chat completion.
            The total length of input tokens and generated tokens is limited by the
            model's context length.
          format: int32
          type: integer
        enableSearch:
          description: Whether to use a search engine for data enhancement.
          type: boolean
        seed:
          description: "The random number seed used when generating, the user controls\
            \ the randomness of the content generated by the model. seed supports\
            \ unsigned 64-bit integers, with a default value of 1234. When using seed,\
            \ the model will try its best to generate the same or similar results,\
            \ but there is currently no guarantee that the results will be exactly\
            \ the same every time."
          format: int32
          type: integer
        repetitionPenalty:
          description: Used to control the repeatability when generating models. Increasing
            repetition_penalty can reduce the duplication of model generation. 1.0
            means no punishment.
          format: float
          type: number
        temperature:
          description: "Used to adjust the degree of randomness from sampling in the\
            \ generated model, the value range is [0, 2), a temperature of 0 will\
            \ always produce the same output. The higher the temperature, the greater\
            \ the randomness."
          format: float
          type: number
        stop:
          description: A collection of stop words that controls the API from generating
            more tokens.
          items:
            description: A collection of stop words that controls the API from generating
              more tokens.
            type: string
          type: array
      required:
      - modelId
      type: object
    AppConfigInfoDTO:
      description: Configuration information
      example:
        requestId: requestId
        name: name
        format: format
        version: 0
        content: content
      properties:
        requestId:
          description: Request identifier
          type: string
        name:
          description: Configuration name
          type: string
        format:
          description: "Configuration format: kv | json | yaml"
          type: string
        content:
          description: Configuration content
          type: string
        version:
          description: Configuration version
          format: int32
          type: integer
      type: object
    uploadCharacterPicture_request:
      properties:
        file:
          description: Character picture
          format: binary
          type: string
      required:
      - file
      type: object
    uploadCharacterDocument_request:
      properties:
        file:
          description: Character document
          format: binary
          type: string
      required:
      - file
      type: object
    uploadCharacterAvatar_request:
      properties:
        file:
          description: Character avatar
          format: binary
          type: string
      required:
      - file
      type: object
    uploadUserPicture_request:
      properties:
        file:
          description: User picture
          format: binary
          type: string
      required:
      - file
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http

