/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiException;
import fun.freechat.client.model.ChatCreateDTO;
import fun.freechat.client.model.ChatMessageDTO;
import fun.freechat.client.model.ChatMessageRecordDTO;
import fun.freechat.client.model.ChatSessionDTO;
import fun.freechat.client.model.ChatUpdateDTO;
import fun.freechat.client.model.LlmResultDTO;
import fun.freechat.client.model.SseEmitter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatApi
 */
@Disabled
public class ChatApiTest {

    private final ChatApi api = new ChatApi();

    /**
     * Clear Memory
     *
     * Clear memory of the chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearMemoryTest() throws ApiException {
        String chatId = null;
        List<ChatMessageRecordDTO> response = api.clearMemory(chatId);
        // TODO: test validations
    }

    /**
     * Delete Chat Session
     *
     * Delete the chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChatTest() throws ApiException {
        String chatId = null;
        Boolean response = api.deleteChat(chatId);
        // TODO: test validations
    }

    /**
     * Get Default Chat
     *
     * Get default chat id of current user and the character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultChatIdTest() throws ApiException {
        Long characterId = null;
        String response = api.getDefaultChatId(characterId);
        // TODO: test validations
    }

    /**
     * List Chats
     *
     * List chats of current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChatsTest() throws ApiException {
        List<ChatSessionDTO> response = api.listChats();
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessagesTest() throws ApiException {
        String chatId = null;
        List<ChatMessageRecordDTO> response = api.listMessages(chatId);
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessages1Test() throws ApiException {
        String chatId = null;
        Integer limit = null;
        Integer offset = null;
        List<ChatMessageRecordDTO> response = api.listMessages1(chatId, limit, offset);
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessages2Test() throws ApiException {
        String chatId = null;
        Integer limit = null;
        List<ChatMessageRecordDTO> response = api.listMessages2(chatId, limit);
        // TODO: test validations
    }

    /**
     * Rollback Chat Messages
     *
     * Rollback messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackMessagesTest() throws ApiException {
        String chatId = null;
        Integer count = null;
        List<Long> response = api.rollbackMessages(chatId, count);
        // TODO: test validations
    }

    /**
     * Send Chat Message
     *
     * Send a chat message to character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        String chatId = null;
        ChatMessageDTO chatMessageDTO = null;
        LlmResultDTO response = api.sendMessage(chatId, chatMessageDTO);
        // TODO: test validations
    }

    /**
     * Start Chat Session
     *
     * Start a chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChatTest() throws ApiException {
        ChatCreateDTO chatCreateDTO = null;
        String response = api.startChat(chatCreateDTO);
        // TODO: test validations
    }

    /**
     * Send Chat Message by Streaming Back
     *
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSendMessageTest() throws ApiException {
        String chatId = null;
        ChatMessageDTO chatMessageDTO = null;
        SseEmitter response = api.streamSendMessage(chatId, chatMessageDTO);
        // TODO: test validations
    }

    /**
     * Update Chat Session
     *
     * Update the chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChatTest() throws ApiException {
        String chatId = null;
        ChatUpdateDTO chatUpdateDTO = null;
        Boolean response = api.updateChat(chatId, chatUpdateDTO);
        // TODO: test validations
    }

}
