/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.2.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiException;
import fun.freechat.client.model.FlowCreateDTO;
import fun.freechat.client.model.FlowDetailsDTO;
import fun.freechat.client.model.FlowItemForNameDTO;
import fun.freechat.client.model.FlowQueryDTO;
import fun.freechat.client.model.FlowSummaryDTO;
import fun.freechat.client.model.FlowUpdateDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlowApi
 */
@Disabled
public class FlowApiTest {

    private final FlowApi api = new FlowApi();

    /**
     * Batch Search Flow Details
     *
     * Batch call shortcut for /api/v1/flow/details/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchFlowDetailsTest() throws ApiException {
        List<FlowQueryDTO> flowQueryDTO = null;
        List<List<FlowDetailsDTO>> response = api.batchSearchFlowDetails(flowQueryDTO);
        // TODO: test validations
    }

    /**
     * Batch Search Flow Summaries
     *
     * Batch call shortcut for /api/v1/flow/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchFlowSummaryTest() throws ApiException {
        List<FlowQueryDTO> flowQueryDTO = null;
        List<List<FlowSummaryDTO>> response = api.batchSearchFlowSummary(flowQueryDTO);
        // TODO: test validations
    }

    /**
     * Clone Flow
     *
     * Enter the flowId, generate a new record, the content is basically the same as the original flow, but the following fields are different: - Version number is 1 - Visibility is private - The parent flow is the source flowId - The creation time is the current moment.  - All statistical indicators are zeroed.  Return the new flowId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneFlowTest() throws ApiException {
        String flowId = null;
        String response = api.cloneFlow(flowId);
        // TODO: test validations
    }

    /**
     * Batch Clone Flows
     *
     * Batch clone multiple flows. Ensure transactionality, return the flowId list after success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneFlowsTest() throws ApiException {
        List<String> requestBody = null;
        List<String> response = api.cloneFlows(requestBody);
        // TODO: test validations
    }

    /**
     * Calculate Number of Flows
     *
     * Calculate the number of flows according to the specified query conditions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countFlowsTest() throws ApiException {
        FlowQueryDTO flowQueryDTO = null;
        Long response = api.countFlows(flowQueryDTO);
        // TODO: test validations
    }

    /**
     * Create Flow
     *
     * Create a flow, ignore required fields: - Flow name - Flow configuration  Limitations: - Description: 300 characters - Configuration: 2000 characters - Example: 2000 characters - Tags: 5 - Parameters: 10 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowTest() throws ApiException {
        FlowCreateDTO flowCreateDTO = null;
        String response = api.createFlow(flowCreateDTO);
        // TODO: test validations
    }

    /**
     * Batch Create Flows
     *
     * Batch create multiple flows. Ensure transactionality, return the flowId list after success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowsTest() throws ApiException {
        List<FlowCreateDTO> flowCreateDTO = null;
        List<String> response = api.createFlows(flowCreateDTO);
        // TODO: test validations
    }

    /**
     * Delete Flow
     *
     * Delete flow. Return success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        String flowId = null;
        Boolean response = api.deleteFlow(flowId);
        // TODO: test validations
    }

    /**
     * Batch Delete Flows
     *
     * Delete multiple flows. Ensure transactionality, return the list of successfully deleted flowId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowsTest() throws ApiException {
        List<String> requestBody = null;
        List<String> response = api.deleteFlows(requestBody);
        // TODO: test validations
    }

    /**
     * Get Flow Details
     *
     * Get flow detailed information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowDetailsTest() throws ApiException {
        String flowId = null;
        FlowDetailsDTO response = api.getFlowDetails(flowId);
        // TODO: test validations
    }

    /**
     * Get Flow Summary
     *
     * Get flow summary information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowSummaryTest() throws ApiException {
        String flowId = null;
        FlowSummaryDTO response = api.getFlowSummary(flowId);
        // TODO: test validations
    }

    /**
     * List Versions by Flow Name
     *
     * List the versions and corresponding flowIds by flow name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowVersionsByNameTest() throws ApiException {
        String name = null;
        List<FlowItemForNameDTO> response = api.listFlowVersionsByName(name);
        // TODO: test validations
    }

    /**
     * Publish Flow
     *
     * Publish flow, draft content becomes formal content, version number increases by 1. After successful publication, a new flowId will be generated and returned. You need to specify the visibility for publication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishFlowTest() throws ApiException {
        String flowId = null;
        String visibility = null;
        String response = api.publishFlow(flowId, visibility);
        // TODO: test validations
    }

    /**
     * Search Flow Details
     *
     * Same as /api/v1/flow/search, but returns detailed information of the flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchFlowDetailsTest() throws ApiException {
        FlowQueryDTO flowQueryDTO = null;
        List<FlowDetailsDTO> response = api.searchFlowDetails(flowQueryDTO);
        // TODO: test validations
    }

    /**
     * Search Flow Summary
     *
     * Search flows: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Format: exact match, currently supported: langflow   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - General: name, description, example, fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the flow summary content. - Support pagination. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchFlowSummaryTest() throws ApiException {
        FlowQueryDTO flowQueryDTO = null;
        List<FlowSummaryDTO> response = api.searchFlowSummary(flowQueryDTO);
        // TODO: test validations
    }

    /**
     * Update Flow
     *
     * Update flow, refer to /api/v1/flow/create, required field: flowId. Return success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        String flowId = null;
        FlowUpdateDTO flowUpdateDTO = null;
        Boolean response = api.updateFlow(flowId, flowUpdateDTO);
        // TODO: test validations
    }

}
