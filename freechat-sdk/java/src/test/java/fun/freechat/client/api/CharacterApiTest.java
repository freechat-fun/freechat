/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.2.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiException;
import fun.freechat.client.model.CharacterBackendDTO;
import fun.freechat.client.model.CharacterBackendDetailsDTO;
import fun.freechat.client.model.CharacterCreateDTO;
import fun.freechat.client.model.CharacterDetailsDTO;
import fun.freechat.client.model.CharacterItemForNameDTO;
import fun.freechat.client.model.CharacterQueryDTO;
import fun.freechat.client.model.CharacterSummaryDTO;
import fun.freechat.client.model.CharacterUpdateDTO;
import fun.freechat.client.model.ChatCreateDTO;
import fun.freechat.client.model.ChatMessageDTO;
import java.io.File;
import fun.freechat.client.model.LlmResultDTO;
import fun.freechat.client.model.SseEmitter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CharacterApi
 */
@Disabled
public class CharacterApiTest {

    private final CharacterApi api = new CharacterApi();

    /**
     * Add Character Backend
     *
     * Add a backend configuration for a character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCharacterBackendTest() throws ApiException {
        String characterId = null;
        CharacterBackendDTO characterBackendDTO = null;
        String response = api.addCharacterBackend(characterId, characterBackendDTO);
        // TODO: test validations
    }

    /**
     * Batch Search Character Details
     *
     * Batch call shortcut for /api/v1/character/details/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchCharacterDetailsTest() throws ApiException {
        List<CharacterQueryDTO> characterQueryDTO = null;
        List<List<CharacterDetailsDTO>> response = api.batchSearchCharacterDetails(characterQueryDTO);
        // TODO: test validations
    }

    /**
     * Batch Search Character Summaries
     *
     * Batch call shortcut for /api/v1/character/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchCharacterSummaryTest() throws ApiException {
        List<CharacterQueryDTO> characterQueryDTO = null;
        List<List<CharacterSummaryDTO>> response = api.batchSearchCharacterSummary(characterQueryDTO);
        // TODO: test validations
    }

    /**
     * Clone Character
     *
     * Enter the characterId, generate a new record, the content is basically the same as the original character, but the following fields are different: - Version number is 1 - Visibility is private - The parent character is the source characterId - The creation time is the current moment. - All statistical indicators are zeroed.  Return the new characterId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneCharacterTest() throws ApiException {
        String characterId = null;
        String response = api.cloneCharacter(characterId);
        // TODO: test validations
    }

    /**
     * Calculate Number of Characters
     *
     * Calculate the number of characters according to the specified query conditions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countCharactersTest() throws ApiException {
        CharacterQueryDTO characterQueryDTO = null;
        Long response = api.countCharacters(characterQueryDTO);
        // TODO: test validations
    }

    /**
     * Create Character
     *
     * Create a character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCharacterTest() throws ApiException {
        CharacterCreateDTO characterCreateDTO = null;
        String response = api.createCharacter(characterCreateDTO);
        // TODO: test validations
    }

    /**
     * Delete Character
     *
     * Delete character. Returns success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCharacterTest() throws ApiException {
        String characterId = null;
        Boolean response = api.deleteCharacter(characterId);
        // TODO: test validations
    }

    /**
     * Delete Character by Name
     *
     * Delete character by name. return the list of successfully deleted characterIds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCharacterByNameTest() throws ApiException {
        String name = null;
        List<String> response = api.deleteCharacterByName(name);
        // TODO: test validations
    }

    /**
     * Delete Chat Session
     *
     * Delete the chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChatTest() throws ApiException {
        String chatId = null;
        Boolean response = api.deleteChat(chatId);
        // TODO: test validations
    }

    /**
     * Check If Character Name Exists
     *
     * Check if the character name already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void existsCharacterNameTest() throws ApiException {
        String name = null;
        Boolean response = api.existsCharacterName(name);
        // TODO: test validations
    }

    /**
     * Get Character Details
     *
     * Get character detailed information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharacterDetailsTest() throws ApiException {
        String characterId = null;
        CharacterDetailsDTO response = api.getCharacterDetails(characterId);
        // TODO: test validations
    }

    /**
     * Get Latest Character Id by Name
     *
     * Get latest characterId by character name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharacterLatestIdByNameTest() throws ApiException {
        String name = null;
        String response = api.getCharacterLatestIdByName(name);
        // TODO: test validations
    }

    /**
     * Get Character Summary
     *
     * Get character summary information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharacterSummaryTest() throws ApiException {
        String characterId = null;
        CharacterSummaryDTO response = api.getCharacterSummary(characterId);
        // TODO: test validations
    }

    /**
     * Get Default Character Backend
     *
     * Get the default backend configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultCharacterBackendTest() throws ApiException {
        String characterId = null;
        CharacterBackendDetailsDTO response = api.getDefaultCharacterBackend(characterId);
        // TODO: test validations
    }

    /**
     * List Character Backend ids
     *
     * List character backend identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCharacterBackendIdsTest() throws ApiException {
        String characterId = null;
        List<String> response = api.listCharacterBackendIds(characterId);
        // TODO: test validations
    }

    /**
     * List Character Backends
     *
     * List character backends.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCharacterBackendsTest() throws ApiException {
        String characterId = null;
        List<CharacterBackendDetailsDTO> response = api.listCharacterBackends(characterId);
        // TODO: test validations
    }

    /**
     * List Versions by Character Name
     *
     * List the versions and corresponding characterIds by character name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCharacterVersionsByNameTest() throws ApiException {
        String name = null;
        List<CharacterItemForNameDTO> response = api.listCharacterVersionsByName(name);
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessagesTest() throws ApiException {
        String chatId = null;
        Integer limit = null;
        List<ChatMessageDTO> response = api.listMessages(chatId, limit);
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessages1Test() throws ApiException {
        String chatId = null;
        Integer limit = null;
        Integer offset = null;
        List<ChatMessageDTO> response = api.listMessages1(chatId, limit, offset);
        // TODO: test validations
    }

    /**
     * List Chat Messages
     *
     * List messages of a chat.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessages2Test() throws ApiException {
        String chatId = null;
        List<ChatMessageDTO> response = api.listMessages2(chatId);
        // TODO: test validations
    }

    /**
     * Create New Character Name
     *
     * Create a new character name starting with a desired name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newCharacterNameTest() throws ApiException {
        String desired = null;
        String response = api.newCharacterName(desired);
        // TODO: test validations
    }

    /**
     * Publish Character
     *
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishCharacterTest() throws ApiException {
        String characterId = null;
        String response = api.publishCharacter(characterId);
        // TODO: test validations
    }

    /**
     * Publish Character
     *
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishCharacter1Test() throws ApiException {
        String characterId = null;
        String visibility = null;
        String response = api.publishCharacter1(characterId, visibility);
        // TODO: test validations
    }

    /**
     * Remove Character Backend
     *
     * Remove a backend configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCharacterBackendTest() throws ApiException {
        String characterBackendId = null;
        Boolean response = api.removeCharacterBackend(characterBackendId);
        // TODO: test validations
    }

    /**
     * Search Character Details
     *
     * Same as /api/v1/character/search, but returns detailed information of the character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCharacterDetailsTest() throws ApiException {
        CharacterQueryDTO characterQueryDTO = null;
        List<CharacterDetailsDTO> response = api.searchCharacterDetails(characterQueryDTO);
        // TODO: test validations
    }

    /**
     * Search Character Summary
     *
     * Search characters: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Tags: exact match (support and, or logic).   - Name: left match.   - Language, exact match.   - General: name, description, profile, chat style, experience, fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the character summary content. - Support pagination. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCharacterSummaryTest() throws ApiException {
        CharacterQueryDTO characterQueryDTO = null;
        List<CharacterSummaryDTO> response = api.searchCharacterSummary(characterQueryDTO);
        // TODO: test validations
    }

    /**
     * Send Chat Message
     *
     * Send a chat message to character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        String chatId = null;
        ChatMessageDTO chatMessageDTO = null;
        LlmResultDTO response = api.sendMessage(chatId, chatMessageDTO);
        // TODO: test validations
    }

    /**
     * Set Default Character Backend
     *
     * Set the default backend configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultCharacterBackendTest() throws ApiException {
        String characterBackendId = null;
        Boolean response = api.setDefaultCharacterBackend(characterBackendId);
        // TODO: test validations
    }

    /**
     * Start Chat Session
     *
     * Start a chat session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChatTest() throws ApiException {
        ChatCreateDTO chatCreateDTO = null;
        String response = api.startChat(chatCreateDTO);
        // TODO: test validations
    }

    /**
     * Send Chat Message by Streaming Back
     *
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSendMessageTest() throws ApiException {
        String chatId = null;
        ChatMessageDTO chatMessageDTO = null;
        SseEmitter response = api.streamSendMessage(chatId, chatMessageDTO);
        // TODO: test validations
    }

    /**
     * Update Character
     *
     * Update character, refer to /api/v1/character/create, required field: characterId. Returns success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCharacterTest() throws ApiException {
        String characterId = null;
        CharacterUpdateDTO characterUpdateDTO = null;
        Boolean response = api.updateCharacter(characterId, characterUpdateDTO);
        // TODO: test validations
    }

    /**
     * Update Character Backend
     *
     * Update a backend configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCharacterBackendTest() throws ApiException {
        String characterBackendId = null;
        CharacterBackendDTO characterBackendDTO = null;
        Boolean response = api.updateCharacterBackend(characterBackendId, characterBackendDTO);
        // TODO: test validations
    }

    /**
     * Upload Character Avatar
     *
     * Upload an avatar of the character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadCharacterAvatarTest() throws ApiException {
        File _file = null;
        String response = api.uploadCharacterAvatar(_file);
        // TODO: test validations
    }

    /**
     * Upload Character Picture
     *
     * Upload a picture of the character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadCharacterPictureTest() throws ApiException {
        File _file = null;
        String response = api.uploadCharacterPicture(_file);
        // TODO: test validations
    }

}
