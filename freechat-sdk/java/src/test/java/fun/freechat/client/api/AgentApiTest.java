/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiException;
import fun.freechat.client.model.AgentCreateDTO;
import fun.freechat.client.model.AgentDetailsDTO;
import fun.freechat.client.model.AgentItemForNameDTO;
import fun.freechat.client.model.AgentQueryDTO;
import fun.freechat.client.model.AgentSummaryDTO;
import fun.freechat.client.model.AgentUpdateDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AgentApi
 */
@Disabled
public class AgentApiTest {

    private final AgentApi api = new AgentApi();

    /**
     * Batch Search Agent Details
     *
     * Batch call shortcut for /api/v1/agent/details/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchAgentDetailsTest() throws ApiException {
        List<AgentQueryDTO> agentQueryDTO = null;
        List<List<AgentDetailsDTO>> response = api.batchSearchAgentDetails(agentQueryDTO);
        // TODO: test validations
    }

    /**
     * Batch Search Agent Summaries
     *
     * Batch call shortcut for /api/v1/agent/search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSearchAgentSummaryTest() throws ApiException {
        List<AgentQueryDTO> agentQueryDTO = null;
        List<List<AgentSummaryDTO>> response = api.batchSearchAgentSummary(agentQueryDTO);
        // TODO: test validations
    }

    /**
     * Clone Agent
     *
     * Enter the agentId, generate a new record, the content is basically the same as the original agent, but the following fields are different: - Version number is 1 - Visibility is private - The parent agent is the source agentId - The creation time is the current moment.  - All statistical indicators are zeroed.  Return the new agentId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneAgentTest() throws ApiException {
        Long agentId = null;
        Long response = api.cloneAgent(agentId);
        // TODO: test validations
    }

    /**
     * Batch Clone Agents
     *
     * Batch clone multiple agents. Ensure transactionality, return the agentId list after success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneAgentsTest() throws ApiException {
        List<Long> requestBody = null;
        List<Long> response = api.cloneAgents(requestBody);
        // TODO: test validations
    }

    /**
     * Calculate Number of Agents
     *
     * Calculate the number of agents according to the specified query conditions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countAgentsTest() throws ApiException {
        AgentQueryDTO agentQueryDTO = null;
        Long response = api.countAgents(agentQueryDTO);
        // TODO: test validations
    }

    /**
     * Create Agent
     *
     * Create a agent, ignore required fields: - Agent name - Agent configuration  Limitations: - Description: 300 characters - Configuration: 2000 characters - Example: 2000 characters - Tags: 5 - Parameters: 10 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAgentTest() throws ApiException {
        AgentCreateDTO agentCreateDTO = null;
        Long response = api.createAgent(agentCreateDTO);
        // TODO: test validations
    }

    /**
     * Batch Create Agents
     *
     * Batch create multiple agents. Ensure transactionality, return the agentId list after success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAgentsTest() throws ApiException {
        List<AgentCreateDTO> agentCreateDTO = null;
        List<Long> response = api.createAgents(agentCreateDTO);
        // TODO: test validations
    }

    /**
     * Delete Agent
     *
     * Delete agent. Return success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAgentTest() throws ApiException {
        Long agentId = null;
        Boolean response = api.deleteAgent(agentId);
        // TODO: test validations
    }

    /**
     * Batch Delete Agents
     *
     * Delete multiple agents. Ensure transactionality, return the list of successfully deleted agentId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAgentsTest() throws ApiException {
        List<Long> requestBody = null;
        List<Long> response = api.deleteAgents(requestBody);
        // TODO: test validations
    }

    /**
     * Get Agent Details
     *
     * Get agent detailed information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAgentDetailsTest() throws ApiException {
        Long agentId = null;
        AgentDetailsDTO response = api.getAgentDetails(agentId);
        // TODO: test validations
    }

    /**
     * Get Agent Summary
     *
     * Get agent summary information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAgentSummaryTest() throws ApiException {
        Long agentId = null;
        AgentSummaryDTO response = api.getAgentSummary(agentId);
        // TODO: test validations
    }

    /**
     * List Versions by Agent Name
     *
     * List the versions and corresponding agentIds by agent name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAgentVersionsByNameTest() throws ApiException {
        String name = null;
        List<AgentItemForNameDTO> response = api.listAgentVersionsByName(name);
        // TODO: test validations
    }

    /**
     * Publish Agent
     *
     * Publish agent, draft content becomes formal content, version number increases by 1. After successful publication, a new agentId will be generated and returned. You need to specify the visibility for publication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishAgentTest() throws ApiException {
        Long agentId = null;
        String visibility = null;
        Long response = api.publishAgent(agentId, visibility);
        // TODO: test validations
    }

    /**
     * Search Agent Details
     *
     * Same as /api/v1/agent/search, but returns detailed information of the agent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAgentDetailsTest() throws ApiException {
        AgentQueryDTO agentQueryDTO = null;
        List<AgentDetailsDTO> response = api.searchAgentDetails(agentQueryDTO);
        // TODO: test validations
    }

    /**
     * Search Agent Summary
     *
     * Search agents: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Format: exact match, currently supported: langflow   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - General: name, description, example, fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the agent summary content. - Support pagination. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAgentSummaryTest() throws ApiException {
        AgentQueryDTO agentQueryDTO = null;
        List<AgentSummaryDTO> response = api.searchAgentSummary(agentQueryDTO);
        // TODO: test validations
    }

    /**
     * Update Agent
     *
     * Update agent, refer to /api/v1/agent/create, required field: agentId. Return success or failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgentTest() throws ApiException {
        Long agentId = null;
        AgentUpdateDTO agentUpdateDTO = null;
        Boolean response = api.updateAgent(agentId, agentUpdateDTO);
        // TODO: test validations
    }

}
