/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiCallback;
import fun.freechat.client.ApiClient;
import fun.freechat.client.ApiException;
import fun.freechat.client.ApiResponse;
import fun.freechat.client.Configuration;
import fun.freechat.client.Pair;
import fun.freechat.client.ProgressRequestBody;
import fun.freechat.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fun.freechat.client.model.ChatCreateDTO;
import fun.freechat.client.model.ChatMessageDTO;
import fun.freechat.client.model.ChatMessageRecordDTO;
import fun.freechat.client.model.ChatSessionDTO;
import fun.freechat.client.model.ChatUpdateDTO;
import fun.freechat.client.model.LlmResultDTO;
import fun.freechat.client.model.SseEmitter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChatApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clearMemory
     * @param chatId Chat session identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMemoryCall(String chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/memory/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMemoryValidateBeforeCall(String chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling clearMemory(Async)");
        }

        return clearMemoryCall(chatId, _callback);

    }

    /**
     * Clear Memory
     * Clear memory of the chat session.
     * @param chatId Chat session identifier (required)
     * @return List&lt;ChatMessageRecordDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChatMessageRecordDTO> clearMemory(String chatId) throws ApiException {
        ApiResponse<List<ChatMessageRecordDTO>> localVarResp = clearMemoryWithHttpInfo(chatId);
        return localVarResp.getData();
    }

    /**
     * Clear Memory
     * Clear memory of the chat session.
     * @param chatId Chat session identifier (required)
     * @return ApiResponse&lt;List&lt;ChatMessageRecordDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChatMessageRecordDTO>> clearMemoryWithHttpInfo(String chatId) throws ApiException {
        okhttp3.Call localVarCall = clearMemoryValidateBeforeCall(chatId, null);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear Memory (asynchronously)
     * Clear memory of the chat session.
     * @param chatId Chat session identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMemoryAsync(String chatId, final ApiCallback<List<ChatMessageRecordDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMemoryValidateBeforeCall(chatId, _callback);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChat
     * @param chatId Chat session identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChatCall(String chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChatValidateBeforeCall(String chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling deleteChat(Async)");
        }

        return deleteChatCall(chatId, _callback);

    }

    /**
     * Delete Chat Session
     * Delete the chat session.
     * @param chatId Chat session identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean deleteChat(String chatId) throws ApiException {
        ApiResponse<Boolean> localVarResp = deleteChatWithHttpInfo(chatId);
        return localVarResp.getData();
    }

    /**
     * Delete Chat Session
     * Delete the chat session.
     * @param chatId Chat session identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> deleteChatWithHttpInfo(String chatId) throws ApiException {
        okhttp3.Call localVarCall = deleteChatValidateBeforeCall(chatId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Chat Session (asynchronously)
     * Delete the chat session.
     * @param chatId Chat session identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChatAsync(String chatId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChatValidateBeforeCall(chatId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDefaultChatId
     * @param characterId Character identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultChatIdCall(Long characterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/{characterId}"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultChatIdValidateBeforeCall(Long characterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling getDefaultChatId(Async)");
        }

        return getDefaultChatIdCall(characterId, _callback);

    }

    /**
     * Get Default Chat
     * Get default chat id of current user and the character.
     * @param characterId Character identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String getDefaultChatId(Long characterId) throws ApiException {
        ApiResponse<String> localVarResp = getDefaultChatIdWithHttpInfo(characterId);
        return localVarResp.getData();
    }

    /**
     * Get Default Chat
     * Get default chat id of current user and the character.
     * @param characterId Character identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getDefaultChatIdWithHttpInfo(Long characterId) throws ApiException {
        okhttp3.Call localVarCall = getDefaultChatIdValidateBeforeCall(characterId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Default Chat (asynchronously)
     * Get default chat id of current user and the character.
     * @param characterId Character identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultChatIdAsync(Long characterId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultChatIdValidateBeforeCall(characterId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listChatsCall(_callback);

    }

    /**
     * List Chats
     * List chats of current user.
     * @return List&lt;ChatSessionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChatSessionDTO> listChats() throws ApiException {
        ApiResponse<List<ChatSessionDTO>> localVarResp = listChatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Chats
     * List chats of current user.
     * @return ApiResponse&lt;List&lt;ChatSessionDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChatSessionDTO>> listChatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listChatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ChatSessionDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Chats (asynchronously)
     * List chats of current user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChatsAsync(final ApiCallback<List<ChatSessionDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ChatSessionDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessages
     * @param chatId Chat session identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesCall(String chatId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/messages/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesValidateBeforeCall(String chatId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling listMessages(Async)");
        }

        return listMessagesCall(chatId, _callback);

    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @return List&lt;ChatMessageRecordDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChatMessageRecordDTO> listMessages(String chatId) throws ApiException {
        ApiResponse<List<ChatMessageRecordDTO>> localVarResp = listMessagesWithHttpInfo(chatId);
        return localVarResp.getData();
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @return ApiResponse&lt;List&lt;ChatMessageRecordDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChatMessageRecordDTO>> listMessagesWithHttpInfo(String chatId) throws ApiException {
        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(chatId, null);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Chat Messages (asynchronously)
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessagesAsync(String chatId, final ApiCallback<List<ChatMessageRecordDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesValidateBeforeCall(chatId, _callback);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessages1
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param offset Messages offset (from new to old) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessages1Call(String chatId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/messages/{chatId}/{limit}/{offset}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()))
            .replace("{" + "limit" + "}", localVarApiClient.escapeString(limit.toString()))
            .replace("{" + "offset" + "}", localVarApiClient.escapeString(offset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessages1ValidateBeforeCall(String chatId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling listMessages1(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling listMessages1(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listMessages1(Async)");
        }

        return listMessages1Call(chatId, limit, offset, _callback);

    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param offset Messages offset (from new to old) (required)
     * @return List&lt;ChatMessageRecordDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChatMessageRecordDTO> listMessages1(String chatId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<ChatMessageRecordDTO>> localVarResp = listMessages1WithHttpInfo(chatId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param offset Messages offset (from new to old) (required)
     * @return ApiResponse&lt;List&lt;ChatMessageRecordDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChatMessageRecordDTO>> listMessages1WithHttpInfo(String chatId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listMessages1ValidateBeforeCall(chatId, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Chat Messages (asynchronously)
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param offset Messages offset (from new to old) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessages1Async(String chatId, Integer limit, Integer offset, final ApiCallback<List<ChatMessageRecordDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessages1ValidateBeforeCall(chatId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessages2
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessages2Call(String chatId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/messages/{chatId}/{limit}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()))
            .replace("{" + "limit" + "}", localVarApiClient.escapeString(limit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessages2ValidateBeforeCall(String chatId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling listMessages2(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling listMessages2(Async)");
        }

        return listMessages2Call(chatId, limit, _callback);

    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @return List&lt;ChatMessageRecordDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ChatMessageRecordDTO> listMessages2(String chatId, Integer limit) throws ApiException {
        ApiResponse<List<ChatMessageRecordDTO>> localVarResp = listMessages2WithHttpInfo(chatId, limit);
        return localVarResp.getData();
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @return ApiResponse&lt;List&lt;ChatMessageRecordDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChatMessageRecordDTO>> listMessages2WithHttpInfo(String chatId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listMessages2ValidateBeforeCall(chatId, limit, null);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Chat Messages (asynchronously)
     * List messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param limit Messages limit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessages2Async(String chatId, Integer limit, final ApiCallback<List<ChatMessageRecordDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessages2ValidateBeforeCall(chatId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<ChatMessageRecordDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackMessages
     * @param chatId Chat session identifier (required)
     * @param count Message count to be rolled back (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackMessagesCall(String chatId, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/chat/messages/rollback/{chatId}/{count}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()))
            .replace("{" + "count" + "}", localVarApiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackMessagesValidateBeforeCall(String chatId, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling rollbackMessages(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling rollbackMessages(Async)");
        }

        return rollbackMessagesCall(chatId, count, _callback);

    }

    /**
     * Rollback Chat Messages
     * Rollback messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param count Message count to be rolled back (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> rollbackMessages(String chatId, Integer count) throws ApiException {
        ApiResponse<List<Long>> localVarResp = rollbackMessagesWithHttpInfo(chatId, count);
        return localVarResp.getData();
    }

    /**
     * Rollback Chat Messages
     * Rollback messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param count Message count to be rolled back (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> rollbackMessagesWithHttpInfo(String chatId, Integer count) throws ApiException {
        okhttp3.Call localVarCall = rollbackMessagesValidateBeforeCall(chatId, count, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback Chat Messages (asynchronously)
     * Rollback messages of a chat.
     * @param chatId Chat session identifier (required)
     * @param count Message count to be rolled back (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackMessagesAsync(String chatId, Integer count, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackMessagesValidateBeforeCall(chatId, count, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatMessageDTO;

        // create path and map variables
        String localVarPath = "/api/v1/chat/send/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling sendMessage(Async)");
        }

        // verify the required parameter 'chatMessageDTO' is set
        if (chatMessageDTO == null) {
            throw new ApiException("Missing the required parameter 'chatMessageDTO' when calling sendMessage(Async)");
        }

        return sendMessageCall(chatId, chatMessageDTO, _callback);

    }

    /**
     * Send Chat Message
     * Send a chat message to character.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @return LlmResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LlmResultDTO sendMessage(String chatId, ChatMessageDTO chatMessageDTO) throws ApiException {
        ApiResponse<LlmResultDTO> localVarResp = sendMessageWithHttpInfo(chatId, chatMessageDTO);
        return localVarResp.getData();
    }

    /**
     * Send Chat Message
     * Send a chat message to character.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @return ApiResponse&lt;LlmResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LlmResultDTO> sendMessageWithHttpInfo(String chatId, ChatMessageDTO chatMessageDTO) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(chatId, chatMessageDTO, null);
        Type localVarReturnType = new TypeToken<LlmResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Chat Message (asynchronously)
     * Send a chat message to character.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback<LlmResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(chatId, chatMessageDTO, _callback);
        Type localVarReturnType = new TypeToken<LlmResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startChat
     * @param chatCreateDTO Parameters for starting a chat session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startChatCall(ChatCreateDTO chatCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startChatValidateBeforeCall(ChatCreateDTO chatCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatCreateDTO' is set
        if (chatCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'chatCreateDTO' when calling startChat(Async)");
        }

        return startChatCall(chatCreateDTO, _callback);

    }

    /**
     * Start Chat Session
     * Start a chat session.
     * @param chatCreateDTO Parameters for starting a chat session (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String startChat(ChatCreateDTO chatCreateDTO) throws ApiException {
        ApiResponse<String> localVarResp = startChatWithHttpInfo(chatCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Start Chat Session
     * Start a chat session.
     * @param chatCreateDTO Parameters for starting a chat session (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> startChatWithHttpInfo(ChatCreateDTO chatCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = startChatValidateBeforeCall(chatCreateDTO, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Chat Session (asynchronously)
     * Start a chat session.
     * @param chatCreateDTO Parameters for starting a chat session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startChatAsync(ChatCreateDTO chatCreateDTO, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = startChatValidateBeforeCall(chatCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSendMessage
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSendMessageCall(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatMessageDTO;

        // create path and map variables
        String localVarPath = "/api/v1/chat/send/stream/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSendMessageValidateBeforeCall(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling streamSendMessage(Async)");
        }

        // verify the required parameter 'chatMessageDTO' is set
        if (chatMessageDTO == null) {
            throw new ApiException("Missing the required parameter 'chatMessageDTO' when calling streamSendMessage(Async)");
        }

        return streamSendMessageCall(chatId, chatMessageDTO, _callback);

    }

    /**
     * Send Chat Message by Streaming Back
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @return SseEmitter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SseEmitter streamSendMessage(String chatId, ChatMessageDTO chatMessageDTO) throws ApiException {
        ApiResponse<SseEmitter> localVarResp = streamSendMessageWithHttpInfo(chatId, chatMessageDTO);
        return localVarResp.getData();
    }

    /**
     * Send Chat Message by Streaming Back
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @return ApiResponse&lt;SseEmitter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SseEmitter> streamSendMessageWithHttpInfo(String chatId, ChatMessageDTO chatMessageDTO) throws ApiException {
        okhttp3.Call localVarCall = streamSendMessageValidateBeforeCall(chatId, chatMessageDTO, null);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Chat Message by Streaming Back (asynchronously)
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     * @param chatId Chat session identifier (required)
     * @param chatMessageDTO Chat message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSendMessageAsync(String chatId, ChatMessageDTO chatMessageDTO, final ApiCallback<SseEmitter> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSendMessageValidateBeforeCall(chatId, chatMessageDTO, _callback);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChat
     * @param chatId Chat session identifier (required)
     * @param chatUpdateDTO The chat session information to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChatCall(String chatId, ChatUpdateDTO chatUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = chatUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/chat/{chatId}"
            .replace("{" + "chatId" + "}", localVarApiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChatValidateBeforeCall(String chatId, ChatUpdateDTO chatUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling updateChat(Async)");
        }

        // verify the required parameter 'chatUpdateDTO' is set
        if (chatUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'chatUpdateDTO' when calling updateChat(Async)");
        }

        return updateChatCall(chatId, chatUpdateDTO, _callback);

    }

    /**
     * Update Chat Session
     * Update the chat session.
     * @param chatId Chat session identifier (required)
     * @param chatUpdateDTO The chat session information to be updated (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean updateChat(String chatId, ChatUpdateDTO chatUpdateDTO) throws ApiException {
        ApiResponse<Boolean> localVarResp = updateChatWithHttpInfo(chatId, chatUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Update Chat Session
     * Update the chat session.
     * @param chatId Chat session identifier (required)
     * @param chatUpdateDTO The chat session information to be updated (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> updateChatWithHttpInfo(String chatId, ChatUpdateDTO chatUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateChatValidateBeforeCall(chatId, chatUpdateDTO, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Chat Session (asynchronously)
     * Update the chat session.
     * @param chatId Chat session identifier (required)
     * @param chatUpdateDTO The chat session information to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChatAsync(String chatId, ChatUpdateDTO chatUpdateDTO, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChatValidateBeforeCall(chatId, chatUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
