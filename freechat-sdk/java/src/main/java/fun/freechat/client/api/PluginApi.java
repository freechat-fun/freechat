/*
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fun.freechat.client.api;

import fun.freechat.client.ApiCallback;
import fun.freechat.client.ApiClient;
import fun.freechat.client.ApiException;
import fun.freechat.client.ApiResponse;
import fun.freechat.client.Configuration;
import fun.freechat.client.Pair;
import fun.freechat.client.ProgressRequestBody;
import fun.freechat.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fun.freechat.client.model.PluginCreateDTO;
import fun.freechat.client.model.PluginDetailsDTO;
import fun.freechat.client.model.PluginQueryDTO;
import fun.freechat.client.model.PluginSummaryDTO;
import fun.freechat.client.model.PluginUpdateDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PluginApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PluginApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PluginApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchSearchPluginDetails
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSearchPluginDetailsCall(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginQueryDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/batch/details/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchSearchPluginDetailsValidateBeforeCall(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginQueryDTO' is set
        if (pluginQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginQueryDTO' when calling batchSearchPluginDetails(Async)");
        }

        return batchSearchPluginDetailsCall(pluginQueryDTO, _callback);

    }

    /**
     * Batch Search Plugin Details
     * Batch call shortcut for /api/v1/plugin/details/search.
     * @param pluginQueryDTO Query conditions (required)
     * @return List&lt;List&lt;PluginDetailsDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<PluginDetailsDTO>> batchSearchPluginDetails(List<PluginQueryDTO> pluginQueryDTO) throws ApiException {
        ApiResponse<List<List<PluginDetailsDTO>>> localVarResp = batchSearchPluginDetailsWithHttpInfo(pluginQueryDTO);
        return localVarResp.getData();
    }

    /**
     * Batch Search Plugin Details
     * Batch call shortcut for /api/v1/plugin/details/search.
     * @param pluginQueryDTO Query conditions (required)
     * @return ApiResponse&lt;List&lt;List&lt;PluginDetailsDTO&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<PluginDetailsDTO>>> batchSearchPluginDetailsWithHttpInfo(List<PluginQueryDTO> pluginQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = batchSearchPluginDetailsValidateBeforeCall(pluginQueryDTO, null);
        Type localVarReturnType = new TypeToken<List<List<PluginDetailsDTO>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Search Plugin Details (asynchronously)
     * Batch call shortcut for /api/v1/plugin/details/search.
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSearchPluginDetailsAsync(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback<List<List<PluginDetailsDTO>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchSearchPluginDetailsValidateBeforeCall(pluginQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<List<List<PluginDetailsDTO>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchSearchPluginSummary
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSearchPluginSummaryCall(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginQueryDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/batch/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchSearchPluginSummaryValidateBeforeCall(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginQueryDTO' is set
        if (pluginQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginQueryDTO' when calling batchSearchPluginSummary(Async)");
        }

        return batchSearchPluginSummaryCall(pluginQueryDTO, _callback);

    }

    /**
     * Batch Search Plugin Summaries
     * Batch call shortcut for /api/v1/plugin/search.
     * @param pluginQueryDTO Query conditions (required)
     * @return List&lt;List&lt;PluginSummaryDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<PluginSummaryDTO>> batchSearchPluginSummary(List<PluginQueryDTO> pluginQueryDTO) throws ApiException {
        ApiResponse<List<List<PluginSummaryDTO>>> localVarResp = batchSearchPluginSummaryWithHttpInfo(pluginQueryDTO);
        return localVarResp.getData();
    }

    /**
     * Batch Search Plugin Summaries
     * Batch call shortcut for /api/v1/plugin/search.
     * @param pluginQueryDTO Query conditions (required)
     * @return ApiResponse&lt;List&lt;List&lt;PluginSummaryDTO&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<PluginSummaryDTO>>> batchSearchPluginSummaryWithHttpInfo(List<PluginQueryDTO> pluginQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = batchSearchPluginSummaryValidateBeforeCall(pluginQueryDTO, null);
        Type localVarReturnType = new TypeToken<List<List<PluginSummaryDTO>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Search Plugin Summaries (asynchronously)
     * Batch call shortcut for /api/v1/plugin/search.
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSearchPluginSummaryAsync(List<PluginQueryDTO> pluginQueryDTO, final ApiCallback<List<List<PluginSummaryDTO>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchSearchPluginSummaryValidateBeforeCall(pluginQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<List<List<PluginSummaryDTO>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countPlugins
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countPluginsCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginQueryDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countPluginsValidateBeforeCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginQueryDTO' is set
        if (pluginQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginQueryDTO' when calling countPlugins(Async)");
        }

        return countPluginsCall(pluginQueryDTO, _callback);

    }

    /**
     * Calculate Number of Plugins
     * Calculate the number of plugins according to the specified query conditions.
     * @param pluginQueryDTO Query conditions (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long countPlugins(PluginQueryDTO pluginQueryDTO) throws ApiException {
        ApiResponse<Long> localVarResp = countPluginsWithHttpInfo(pluginQueryDTO);
        return localVarResp.getData();
    }

    /**
     * Calculate Number of Plugins
     * Calculate the number of plugins according to the specified query conditions.
     * @param pluginQueryDTO Query conditions (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> countPluginsWithHttpInfo(PluginQueryDTO pluginQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = countPluginsValidateBeforeCall(pluginQueryDTO, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate Number of Plugins (asynchronously)
     * Calculate the number of plugins according to the specified query conditions.
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countPluginsAsync(PluginQueryDTO pluginQueryDTO, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = countPluginsValidateBeforeCall(pluginQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlugin
     * @param pluginCreateDTO Information of the plugin to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPluginCall(PluginCreateDTO pluginCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPluginValidateBeforeCall(PluginCreateDTO pluginCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginCreateDTO' is set
        if (pluginCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginCreateDTO' when calling createPlugin(Async)");
        }

        return createPluginCall(pluginCreateDTO, _callback);

    }

    /**
     * Create Plugin
     * Create a plugin, required fields: - Plugin name - Plugin manifestInfo (URL or JSON) - Plugin apiInfo (URL or JSON)  Limitations: - Name: 100 characters - Example: 2000 characters - Tags: 5 
     * @param pluginCreateDTO Information of the plugin to be created (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String createPlugin(PluginCreateDTO pluginCreateDTO) throws ApiException {
        ApiResponse<String> localVarResp = createPluginWithHttpInfo(pluginCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Create Plugin
     * Create a plugin, required fields: - Plugin name - Plugin manifestInfo (URL or JSON) - Plugin apiInfo (URL or JSON)  Limitations: - Name: 100 characters - Example: 2000 characters - Tags: 5 
     * @param pluginCreateDTO Information of the plugin to be created (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createPluginWithHttpInfo(PluginCreateDTO pluginCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPluginValidateBeforeCall(pluginCreateDTO, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Plugin (asynchronously)
     * Create a plugin, required fields: - Plugin name - Plugin manifestInfo (URL or JSON) - Plugin apiInfo (URL or JSON)  Limitations: - Name: 100 characters - Example: 2000 characters - Tags: 5 
     * @param pluginCreateDTO Information of the plugin to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPluginAsync(PluginCreateDTO pluginCreateDTO, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPluginValidateBeforeCall(pluginCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPlugins
     * @param pluginCreateDTO List of plugin information to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPluginsCall(List<PluginCreateDTO> pluginCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPluginsValidateBeforeCall(List<PluginCreateDTO> pluginCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginCreateDTO' is set
        if (pluginCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginCreateDTO' when calling createPlugins(Async)");
        }

        return createPluginsCall(pluginCreateDTO, _callback);

    }

    /**
     * Batch Create Plugins
     * Batch create multiple plugins. Ensure transactionality, return the pluginId list after success.
     * @param pluginCreateDTO List of plugin information to be created (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> createPlugins(List<PluginCreateDTO> pluginCreateDTO) throws ApiException {
        ApiResponse<List<String>> localVarResp = createPluginsWithHttpInfo(pluginCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Batch Create Plugins
     * Batch create multiple plugins. Ensure transactionality, return the pluginId list after success.
     * @param pluginCreateDTO List of plugin information to be created (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> createPluginsWithHttpInfo(List<PluginCreateDTO> pluginCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPluginsValidateBeforeCall(pluginCreateDTO, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Create Plugins (asynchronously)
     * Batch create multiple plugins. Ensure transactionality, return the pluginId list after success.
     * @param pluginCreateDTO List of plugin information to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPluginsAsync(List<PluginCreateDTO> pluginCreateDTO, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPluginsValidateBeforeCall(pluginCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlugin
     * @param pluginId The pluginId to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePluginCall(String pluginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/{pluginId}"
            .replace("{" + "pluginId" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePluginValidateBeforeCall(String pluginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling deletePlugin(Async)");
        }

        return deletePluginCall(pluginId, _callback);

    }

    /**
     * Delete Plugin
     * Delete plugin. Returns success or failure.
     * @param pluginId The pluginId to be deleted (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean deletePlugin(String pluginId) throws ApiException {
        ApiResponse<Boolean> localVarResp = deletePluginWithHttpInfo(pluginId);
        return localVarResp.getData();
    }

    /**
     * Delete Plugin
     * Delete plugin. Returns success or failure.
     * @param pluginId The pluginId to be deleted (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> deletePluginWithHttpInfo(String pluginId) throws ApiException {
        okhttp3.Call localVarCall = deletePluginValidateBeforeCall(pluginId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Plugin (asynchronously)
     * Delete plugin. Returns success or failure.
     * @param pluginId The pluginId to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePluginAsync(String pluginId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePluginValidateBeforeCall(pluginId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlugins
     * @param requestBody List of pluginIds to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePluginsCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePluginsValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deletePlugins(Async)");
        }

        return deletePluginsCall(requestBody, _callback);

    }

    /**
     * Batch Delete Plugins
     * Delete multiple plugins. Ensure transactionality, return the list of successfully deleted pluginIds.
     * @param requestBody List of pluginIds to be deleted (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> deletePlugins(List<String> requestBody) throws ApiException {
        ApiResponse<List<String>> localVarResp = deletePluginsWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * Batch Delete Plugins
     * Delete multiple plugins. Ensure transactionality, return the list of successfully deleted pluginIds.
     * @param requestBody List of pluginIds to be deleted (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> deletePluginsWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deletePluginsValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Delete Plugins (asynchronously)
     * Delete multiple plugins. Ensure transactionality, return the list of successfully deleted pluginIds.
     * @param requestBody List of pluginIds to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePluginsAsync(List<String> requestBody, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePluginsValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPluginDetails
     * @param pluginId PluginId to be obtained (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginDetailsCall(String pluginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/details/{pluginId}"
            .replace("{" + "pluginId" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPluginDetailsValidateBeforeCall(String pluginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling getPluginDetails(Async)");
        }

        return getPluginDetailsCall(pluginId, _callback);

    }

    /**
     * Get Plugin Details
     * Get plugin detailed information.
     * @param pluginId PluginId to be obtained (required)
     * @return PluginDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PluginDetailsDTO getPluginDetails(String pluginId) throws ApiException {
        ApiResponse<PluginDetailsDTO> localVarResp = getPluginDetailsWithHttpInfo(pluginId);
        return localVarResp.getData();
    }

    /**
     * Get Plugin Details
     * Get plugin detailed information.
     * @param pluginId PluginId to be obtained (required)
     * @return ApiResponse&lt;PluginDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PluginDetailsDTO> getPluginDetailsWithHttpInfo(String pluginId) throws ApiException {
        okhttp3.Call localVarCall = getPluginDetailsValidateBeforeCall(pluginId, null);
        Type localVarReturnType = new TypeToken<PluginDetailsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Plugin Details (asynchronously)
     * Get plugin detailed information.
     * @param pluginId PluginId to be obtained (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginDetailsAsync(String pluginId, final ApiCallback<PluginDetailsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginDetailsValidateBeforeCall(pluginId, _callback);
        Type localVarReturnType = new TypeToken<PluginDetailsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPluginSummary
     * @param pluginId PluginId to be obtained (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginSummaryCall(String pluginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/summary/{pluginId}"
            .replace("{" + "pluginId" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPluginSummaryValidateBeforeCall(String pluginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling getPluginSummary(Async)");
        }

        return getPluginSummaryCall(pluginId, _callback);

    }

    /**
     * Get Plugin Summary
     * Get plugin summary information.
     * @param pluginId PluginId to be obtained (required)
     * @return PluginSummaryDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PluginSummaryDTO getPluginSummary(String pluginId) throws ApiException {
        ApiResponse<PluginSummaryDTO> localVarResp = getPluginSummaryWithHttpInfo(pluginId);
        return localVarResp.getData();
    }

    /**
     * Get Plugin Summary
     * Get plugin summary information.
     * @param pluginId PluginId to be obtained (required)
     * @return ApiResponse&lt;PluginSummaryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PluginSummaryDTO> getPluginSummaryWithHttpInfo(String pluginId) throws ApiException {
        okhttp3.Call localVarCall = getPluginSummaryValidateBeforeCall(pluginId, null);
        Type localVarReturnType = new TypeToken<PluginSummaryDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Plugin Summary (asynchronously)
     * Get plugin summary information.
     * @param pluginId PluginId to be obtained (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPluginSummaryAsync(String pluginId, final ApiCallback<PluginSummaryDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPluginSummaryValidateBeforeCall(pluginId, _callback);
        Type localVarReturnType = new TypeToken<PluginSummaryDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshPluginInfo
     * @param pluginId The pluginId to be fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshPluginInfoCall(String pluginId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/refresh/{pluginId}"
            .replace("{" + "pluginId" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshPluginInfoValidateBeforeCall(String pluginId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling refreshPluginInfo(Async)");
        }

        return refreshPluginInfoCall(pluginId, _callback);

    }

    /**
     * Refresh Plugin Information
     * For online manifest, api-docs information provided at the time of entry, this interface can immediately refresh the information in the system cache (default cache time is 1 hour). Generally, there is no need to call, unless you know that the corresponding plugin platform has just updated the interface, and the business side wants to get the latest information immediately, then call this interface to delete the system cache.
     * @param pluginId The pluginId to be fetched (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void refreshPluginInfo(String pluginId) throws ApiException {
        refreshPluginInfoWithHttpInfo(pluginId);
    }

    /**
     * Refresh Plugin Information
     * For online manifest, api-docs information provided at the time of entry, this interface can immediately refresh the information in the system cache (default cache time is 1 hour). Generally, there is no need to call, unless you know that the corresponding plugin platform has just updated the interface, and the business side wants to get the latest information immediately, then call this interface to delete the system cache.
     * @param pluginId The pluginId to be fetched (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> refreshPluginInfoWithHttpInfo(String pluginId) throws ApiException {
        okhttp3.Call localVarCall = refreshPluginInfoValidateBeforeCall(pluginId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh Plugin Information (asynchronously)
     * For online manifest, api-docs information provided at the time of entry, this interface can immediately refresh the information in the system cache (default cache time is 1 hour). Generally, there is no need to call, unless you know that the corresponding plugin platform has just updated the interface, and the business side wants to get the latest information immediately, then call this interface to delete the system cache.
     * @param pluginId The pluginId to be fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshPluginInfoAsync(String pluginId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshPluginInfoValidateBeforeCall(pluginId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPluginDetails
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPluginDetailsCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginQueryDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/details/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPluginDetailsValidateBeforeCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginQueryDTO' is set
        if (pluginQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginQueryDTO' when calling searchPluginDetails(Async)");
        }

        return searchPluginDetailsCall(pluginQueryDTO, _callback);

    }

    /**
     * Search Plugin Details
     * Same as /api/v1/plugin/search, but returns detailed information of the plugin.
     * @param pluginQueryDTO Query conditions (required)
     * @return List&lt;PluginDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PluginDetailsDTO> searchPluginDetails(PluginQueryDTO pluginQueryDTO) throws ApiException {
        ApiResponse<List<PluginDetailsDTO>> localVarResp = searchPluginDetailsWithHttpInfo(pluginQueryDTO);
        return localVarResp.getData();
    }

    /**
     * Search Plugin Details
     * Same as /api/v1/plugin/search, but returns detailed information of the plugin.
     * @param pluginQueryDTO Query conditions (required)
     * @return ApiResponse&lt;List&lt;PluginDetailsDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PluginDetailsDTO>> searchPluginDetailsWithHttpInfo(PluginQueryDTO pluginQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = searchPluginDetailsValidateBeforeCall(pluginQueryDTO, null);
        Type localVarReturnType = new TypeToken<List<PluginDetailsDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Plugin Details (asynchronously)
     * Same as /api/v1/plugin/search, but returns detailed information of the plugin.
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPluginDetailsAsync(PluginQueryDTO pluginQueryDTO, final ApiCallback<List<PluginDetailsDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPluginDetailsValidateBeforeCall(pluginQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<List<PluginDetailsDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPluginSummary
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPluginSummaryCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginQueryDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPluginSummaryValidateBeforeCall(PluginQueryDTO pluginQueryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginQueryDTO' is set
        if (pluginQueryDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginQueryDTO' when calling searchPluginSummary(Async)");
        }

        return searchPluginSummaryCall(pluginQueryDTO, _callback);

    }

    /**
     * Search Plugin Summary
     * Search plugins: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Plugin information format: currently supported: dash_scope, open_ai.   - Interface information format: currently supported: openapi_v3.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Provider: left match.   - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the plugin summary content. - Support pagination. 
     * @param pluginQueryDTO Query conditions (required)
     * @return List&lt;PluginSummaryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PluginSummaryDTO> searchPluginSummary(PluginQueryDTO pluginQueryDTO) throws ApiException {
        ApiResponse<List<PluginSummaryDTO>> localVarResp = searchPluginSummaryWithHttpInfo(pluginQueryDTO);
        return localVarResp.getData();
    }

    /**
     * Search Plugin Summary
     * Search plugins: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Plugin information format: currently supported: dash_scope, open_ai.   - Interface information format: currently supported: openapi_v3.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Provider: left match.   - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the plugin summary content. - Support pagination. 
     * @param pluginQueryDTO Query conditions (required)
     * @return ApiResponse&lt;List&lt;PluginSummaryDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PluginSummaryDTO>> searchPluginSummaryWithHttpInfo(PluginQueryDTO pluginQueryDTO) throws ApiException {
        okhttp3.Call localVarCall = searchPluginSummaryValidateBeforeCall(pluginQueryDTO, null);
        Type localVarReturnType = new TypeToken<List<PluginSummaryDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Plugin Summary (asynchronously)
     * Search plugins: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Plugin information format: currently supported: dash_scope, open_ai.   - Interface information format: currently supported: openapi_v3.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Provider: left match.   - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user&#39;s general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the plugin summary content. - Support pagination. 
     * @param pluginQueryDTO Query conditions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPluginSummaryAsync(PluginQueryDTO pluginQueryDTO, final ApiCallback<List<PluginSummaryDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPluginSummaryValidateBeforeCall(pluginQueryDTO, _callback);
        Type localVarReturnType = new TypeToken<List<PluginSummaryDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePlugin
     * @param pluginId The pluginId to be updated (required)
     * @param pluginUpdateDTO The plugin information to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePluginCall(String pluginId, PluginUpdateDTO pluginUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pluginUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/plugin/{pluginId}"
            .replace("{" + "pluginId" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePluginValidateBeforeCall(String pluginId, PluginUpdateDTO pluginUpdateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling updatePlugin(Async)");
        }

        // verify the required parameter 'pluginUpdateDTO' is set
        if (pluginUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'pluginUpdateDTO' when calling updatePlugin(Async)");
        }

        return updatePluginCall(pluginId, pluginUpdateDTO, _callback);

    }

    /**
     * Update Plugin
     * Update plugin, refer to /api/v1/plugin/create, required field: pluginId. Returns success or failure.
     * @param pluginId The pluginId to be updated (required)
     * @param pluginUpdateDTO The plugin information to be updated (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean updatePlugin(String pluginId, PluginUpdateDTO pluginUpdateDTO) throws ApiException {
        ApiResponse<Boolean> localVarResp = updatePluginWithHttpInfo(pluginId, pluginUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Update Plugin
     * Update plugin, refer to /api/v1/plugin/create, required field: pluginId. Returns success or failure.
     * @param pluginId The pluginId to be updated (required)
     * @param pluginUpdateDTO The plugin information to be updated (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> updatePluginWithHttpInfo(String pluginId, PluginUpdateDTO pluginUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePluginValidateBeforeCall(pluginId, pluginUpdateDTO, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Plugin (asynchronously)
     * Update plugin, refer to /api/v1/plugin/create, required field: pluginId. Returns success or failure.
     * @param pluginId The pluginId to be updated (required)
     * @param pluginUpdateDTO The plugin information to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePluginAsync(String pluginId, PluginUpdateDTO pluginUpdateDTO, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePluginValidateBeforeCall(pluginId, pluginUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
