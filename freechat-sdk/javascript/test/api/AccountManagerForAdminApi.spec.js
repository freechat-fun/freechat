/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.freechat-sdk);
  }
}(this, function(expect, freechat-sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new freechat-sdk.AccountManagerForAdminApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountManagerForAdminApi', function() {
    describe('createTokenForUser', function() {
      it('should call createTokenForUser successfully', function(done) {
        //uncomment below and update the code to test createTokenForUser
        //instance.createTokenForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTokenForUser', function() {
      it('should call deleteTokenForUser successfully', function(done) {
        //uncomment below and update the code to test deleteTokenForUser
        //instance.deleteTokenForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableTokenForUser', function() {
      it('should call disableTokenForUser successfully', function(done) {
        //uncomment below and update the code to test disableTokenForUser
        //instance.disableTokenForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDetailsOfUser', function() {
      it('should call getDetailsOfUser successfully', function(done) {
        //uncomment below and update the code to test getDetailsOfUser
        //instance.getDetailsOfUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserByToken', function() {
      it('should call getUserByToken successfully', function(done) {
        //uncomment below and update the code to test getUserByToken
        //instance.getUserByToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAuthoritiesOfUser', function() {
      it('should call listAuthoritiesOfUser successfully', function(done) {
        //uncomment below and update the code to test listAuthoritiesOfUser
        //instance.listAuthoritiesOfUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTokensOfUser', function() {
      it('should call listTokensOfUser successfully', function(done) {
        //uncomment below and update the code to test listTokensOfUser
        //instance.listTokensOfUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers1', function() {
      it('should call listUsers1 successfully', function(done) {
        //uncomment below and update the code to test listUsers1
        //instance.listUsers1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers2', function() {
      it('should call listUsers2 successfully', function(done) {
        //uncomment below and update the code to test listUsers2
        //instance.listUsers2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAuthoritiesOfUser', function() {
      it('should call updateAuthoritiesOfUser successfully', function(done) {
        //uncomment below and update the code to test updateAuthoritiesOfUser
        //instance.updateAuthoritiesOfUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
