/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.freechat-sdk);
  }
}(this, function(expect, freechat-sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new freechat-sdk.InteractiveStatisticsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InteractiveStatisticsApi', function() {
    describe('addStatistic', function() {
      it('should call addStatistic successfully', function(done) {
        //uncomment below and update the code to test addStatistic
        //instance.addStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScore', function() {
      it('should call getScore successfully', function(done) {
        //uncomment below and update the code to test getScore
        //instance.getScore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatistic', function() {
      it('should call getStatistic successfully', function(done) {
        //uncomment below and update the code to test getStatistic
        //instance.getStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatistics', function() {
      it('should call getStatistics successfully', function(done) {
        //uncomment below and update the code to test getStatistics
        //instance.getStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('increaseStatistic', function() {
      it('should call increaseStatistic successfully', function(done) {
        //uncomment below and update the code to test increaseStatistic
        //instance.increaseStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCharactersByStatistic', function() {
      it('should call listCharactersByStatistic successfully', function(done) {
        //uncomment below and update the code to test listCharactersByStatistic
        //instance.listCharactersByStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCharactersByStatistic1', function() {
      it('should call listCharactersByStatistic1 successfully', function(done) {
        //uncomment below and update the code to test listCharactersByStatistic1
        //instance.listCharactersByStatistic1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCharactersByStatistic2', function() {
      it('should call listCharactersByStatistic2 successfully', function(done) {
        //uncomment below and update the code to test listCharactersByStatistic2
        //instance.listCharactersByStatistic2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowsByStatistic', function() {
      it('should call listFlowsByStatistic successfully', function(done) {
        //uncomment below and update the code to test listFlowsByStatistic
        //instance.listFlowsByStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowsByStatistic1', function() {
      it('should call listFlowsByStatistic1 successfully', function(done) {
        //uncomment below and update the code to test listFlowsByStatistic1
        //instance.listFlowsByStatistic1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlowsByStatistic2', function() {
      it('should call listFlowsByStatistic2 successfully', function(done) {
        //uncomment below and update the code to test listFlowsByStatistic2
        //instance.listFlowsByStatistic2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPluginsByStatistic', function() {
      it('should call listPluginsByStatistic successfully', function(done) {
        //uncomment below and update the code to test listPluginsByStatistic
        //instance.listPluginsByStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPluginsByStatistic1', function() {
      it('should call listPluginsByStatistic1 successfully', function(done) {
        //uncomment below and update the code to test listPluginsByStatistic1
        //instance.listPluginsByStatistic1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPluginsByStatistic2', function() {
      it('should call listPluginsByStatistic2 successfully', function(done) {
        //uncomment below and update the code to test listPluginsByStatistic2
        //instance.listPluginsByStatistic2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPromptsByStatistic', function() {
      it('should call listPromptsByStatistic successfully', function(done) {
        //uncomment below and update the code to test listPromptsByStatistic
        //instance.listPromptsByStatistic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPromptsByStatistic1', function() {
      it('should call listPromptsByStatistic1 successfully', function(done) {
        //uncomment below and update the code to test listPromptsByStatistic1
        //instance.listPromptsByStatistic1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPromptsByStatistic2', function() {
      it('should call listPromptsByStatistic2 successfully', function(done) {
        //uncomment below and update the code to test listPromptsByStatistic2
        //instance.listPromptsByStatistic2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
