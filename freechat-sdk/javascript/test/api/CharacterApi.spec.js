/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.freechat-sdk);
  }
}(this, function(expect, freechat-sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new freechat-sdk.CharacterApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CharacterApi', function() {
    describe('addCharacterBackend', function() {
      it('should call addCharacterBackend successfully', function(done) {
        //uncomment below and update the code to test addCharacterBackend
        //instance.addCharacterBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchSearchCharacterDetails', function() {
      it('should call batchSearchCharacterDetails successfully', function(done) {
        //uncomment below and update the code to test batchSearchCharacterDetails
        //instance.batchSearchCharacterDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchSearchCharacterSummary', function() {
      it('should call batchSearchCharacterSummary successfully', function(done) {
        //uncomment below and update the code to test batchSearchCharacterSummary
        //instance.batchSearchCharacterSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cloneCharacter', function() {
      it('should call cloneCharacter successfully', function(done) {
        //uncomment below and update the code to test cloneCharacter
        //instance.cloneCharacter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countCharacters', function() {
      it('should call countCharacters successfully', function(done) {
        //uncomment below and update the code to test countCharacters
        //instance.countCharacters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCharacter', function() {
      it('should call createCharacter successfully', function(done) {
        //uncomment below and update the code to test createCharacter
        //instance.createCharacter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCharacter', function() {
      it('should call deleteCharacter successfully', function(done) {
        //uncomment below and update the code to test deleteCharacter
        //instance.deleteCharacter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChat', function() {
      it('should call deleteChat successfully', function(done) {
        //uncomment below and update the code to test deleteChat
        //instance.deleteChat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCharacterDetails', function() {
      it('should call getCharacterDetails successfully', function(done) {
        //uncomment below and update the code to test getCharacterDetails
        //instance.getCharacterDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCharacterLatestIdByName', function() {
      it('should call getCharacterLatestIdByName successfully', function(done) {
        //uncomment below and update the code to test getCharacterLatestIdByName
        //instance.getCharacterLatestIdByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCharacterSummary', function() {
      it('should call getCharacterSummary successfully', function(done) {
        //uncomment below and update the code to test getCharacterSummary
        //instance.getCharacterSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultCharacterBackend', function() {
      it('should call getDefaultCharacterBackend successfully', function(done) {
        //uncomment below and update the code to test getDefaultCharacterBackend
        //instance.getDefaultCharacterBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCharacterBackendIds', function() {
      it('should call listCharacterBackendIds successfully', function(done) {
        //uncomment below and update the code to test listCharacterBackendIds
        //instance.listCharacterBackendIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCharacterVersionsByName', function() {
      it('should call listCharacterVersionsByName successfully', function(done) {
        //uncomment below and update the code to test listCharacterVersionsByName
        //instance.listCharacterVersionsByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessages', function() {
      it('should call listMessages successfully', function(done) {
        //uncomment below and update the code to test listMessages
        //instance.listMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessages1', function() {
      it('should call listMessages1 successfully', function(done) {
        //uncomment below and update the code to test listMessages1
        //instance.listMessages1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessages2', function() {
      it('should call listMessages2 successfully', function(done) {
        //uncomment below and update the code to test listMessages2
        //instance.listMessages2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishCharacter', function() {
      it('should call publishCharacter successfully', function(done) {
        //uncomment below and update the code to test publishCharacter
        //instance.publishCharacter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishCharacter1', function() {
      it('should call publishCharacter1 successfully', function(done) {
        //uncomment below and update the code to test publishCharacter1
        //instance.publishCharacter1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeCharacterBackend', function() {
      it('should call removeCharacterBackend successfully', function(done) {
        //uncomment below and update the code to test removeCharacterBackend
        //instance.removeCharacterBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchCharacterDetails', function() {
      it('should call searchCharacterDetails successfully', function(done) {
        //uncomment below and update the code to test searchCharacterDetails
        //instance.searchCharacterDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchCharacterSummary', function() {
      it('should call searchCharacterSummary successfully', function(done) {
        //uncomment below and update the code to test searchCharacterSummary
        //instance.searchCharacterSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessage', function() {
      it('should call sendMessage successfully', function(done) {
        //uncomment below and update the code to test sendMessage
        //instance.sendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDefaultCharacterBackend', function() {
      it('should call setDefaultCharacterBackend successfully', function(done) {
        //uncomment below and update the code to test setDefaultCharacterBackend
        //instance.setDefaultCharacterBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startChat', function() {
      it('should call startChat successfully', function(done) {
        //uncomment below and update the code to test startChat
        //instance.startChat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamSendMessage', function() {
      it('should call streamSendMessage successfully', function(done) {
        //uncomment below and update the code to test streamSendMessage
        //instance.streamSendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCharacter', function() {
      it('should call updateCharacter successfully', function(done) {
        //uncomment below and update the code to test updateCharacter
        //instance.updateCharacter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCharacterBackend', function() {
      it('should call updateCharacterBackend successfully', function(done) {
        //uncomment below and update the code to test updateCharacterBackend
        //instance.updateCharacterBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadCharacterAvatar', function() {
      it('should call uploadCharacterAvatar successfully', function(done) {
        //uncomment below and update the code to test uploadCharacterAvatar
        //instance.uploadCharacterAvatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadCharacterPicture', function() {
      it('should call uploadCharacterPicture successfully', function(done) {
        //uncomment below and update the code to test uploadCharacterPicture
        //instance.uploadCharacterPicture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
