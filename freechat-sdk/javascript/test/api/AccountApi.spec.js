/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.freechat-sdk);
  }
}(this, function(expect, freechat-sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new freechat-sdk.AccountApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountApi', function() {
    describe('createToken', function() {
      it('should call createToken successfully', function(done) {
        //uncomment below and update the code to test createToken
        //instance.createToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTokenWithDuration', function() {
      it('should call createTokenWithDuration successfully', function(done) {
        //uncomment below and update the code to test createTokenWithDuration
        //instance.createTokenWithDuration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteToken', function() {
      it('should call deleteToken successfully', function(done) {
        //uncomment below and update the code to test deleteToken
        //instance.deleteToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableToken', function() {
      it('should call disableToken successfully', function(done) {
        //uncomment below and update the code to test disableToken
        //instance.disableToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserBasic', function() {
      it('should call getUserBasic successfully', function(done) {
        //uncomment below and update the code to test getUserBasic
        //instance.getUserBasic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserDetails', function() {
      it('should call getUserDetails successfully', function(done) {
        //uncomment below and update the code to test getUserDetails
        //instance.getUserDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTokens', function() {
      it('should call listTokens successfully', function(done) {
        //uncomment below and update the code to test listTokens
        //instance.listTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserInfo', function() {
      it('should call updateUserInfo successfully', function(done) {
        //uncomment below and update the code to test updateUserInfo
        //instance.updateUserInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadUserPicture', function() {
      it('should call uploadUserPicture successfully', function(done) {
        //uncomment below and update the code to test uploadUserPicture
        //instance.uploadUserPicture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
