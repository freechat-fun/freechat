/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatCreateDTO model module.
 * @module model/ChatCreateDTO
 * @version 0.1.0
 */
class ChatCreateDTO {
    /**
     * Constructs a new <code>ChatCreateDTO</code>.
     * Request data for starting a chat session
     * @alias module:model/ChatCreateDTO
     * @param backendId {String} Character backend for this session.
     */
    constructor(backendId) { 
        
        ChatCreateDTO.initialize(this, backendId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backendId) { 
        obj['backendId'] = backendId;
    }

    /**
     * Constructs a <code>ChatCreateDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatCreateDTO} obj Optional instance to populate.
     * @return {module:model/ChatCreateDTO} The populated <code>ChatCreateDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatCreateDTO();

            if (data.hasOwnProperty('userNickname')) {
                obj['userNickname'] = ApiClient.convertToType(data['userNickname'], 'String');
            }
            if (data.hasOwnProperty('userProfile')) {
                obj['userProfile'] = ApiClient.convertToType(data['userProfile'], 'String');
            }
            if (data.hasOwnProperty('characterNickname')) {
                obj['characterNickname'] = ApiClient.convertToType(data['characterNickname'], 'String');
            }
            if (data.hasOwnProperty('backendId')) {
                obj['backendId'] = ApiClient.convertToType(data['backendId'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatCreateDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatCreateDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatCreateDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['userNickname'] && !(typeof data['userNickname'] === 'string' || data['userNickname'] instanceof String)) {
            throw new Error("Expected the field `userNickname` to be a primitive type in the JSON string but got " + data['userNickname']);
        }
        // ensure the json data is a string
        if (data['userProfile'] && !(typeof data['userProfile'] === 'string' || data['userProfile'] instanceof String)) {
            throw new Error("Expected the field `userProfile` to be a primitive type in the JSON string but got " + data['userProfile']);
        }
        // ensure the json data is a string
        if (data['characterNickname'] && !(typeof data['characterNickname'] === 'string' || data['characterNickname'] instanceof String)) {
            throw new Error("Expected the field `characterNickname` to be a primitive type in the JSON string but got " + data['characterNickname']);
        }
        // ensure the json data is a string
        if (data['backendId'] && !(typeof data['backendId'] === 'string' || data['backendId'] instanceof String)) {
            throw new Error("Expected the field `backendId` to be a primitive type in the JSON string but got " + data['backendId']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }

        return true;
    }


}

ChatCreateDTO.RequiredProperties = ["backendId"];

/**
 * User nickname for this session.
 * @member {String} userNickname
 */
ChatCreateDTO.prototype['userNickname'] = undefined;

/**
 * User profile for this session.
 * @member {String} userProfile
 */
ChatCreateDTO.prototype['userProfile'] = undefined;

/**
 * Character nickname for this session.
 * @member {String} characterNickname
 */
ChatCreateDTO.prototype['characterNickname'] = undefined;

/**
 * Character backend for this session.
 * @member {String} backendId
 */
ChatCreateDTO.prototype['backendId'] = undefined;

/**
 * Extra info for this session.
 * @member {String} ext
 */
ChatCreateDTO.prototype['ext'] = undefined;






export default ChatCreateDTO;

