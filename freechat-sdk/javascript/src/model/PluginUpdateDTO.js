/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PluginUpdateDTO model module.
 * @module model/PluginUpdateDTO
 * @version 0.1.0
 */
class PluginUpdateDTO {
    /**
     * Constructs a new <code>PluginUpdateDTO</code>.
     * Request data for updating plugin information
     * @alias module:model/PluginUpdateDTO
     * @param name {String} Plugin name
     */
    constructor(name) { 
        
        PluginUpdateDTO.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>PluginUpdateDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PluginUpdateDTO} obj Optional instance to populate.
     * @return {module:model/PluginUpdateDTO} The populated <code>PluginUpdateDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PluginUpdateDTO();

            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('manifestFormat')) {
                obj['manifestFormat'] = ApiClient.convertToType(data['manifestFormat'], 'String');
            }
            if (data.hasOwnProperty('manifestInfo')) {
                obj['manifestInfo'] = ApiClient.convertToType(data['manifestInfo'], 'String');
            }
            if (data.hasOwnProperty('apiFormat')) {
                obj['apiFormat'] = ApiClient.convertToType(data['apiFormat'], 'String');
            }
            if (data.hasOwnProperty('apiInfo')) {
                obj['apiInfo'] = ApiClient.convertToType(data['apiInfo'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('aiModels')) {
                obj['aiModels'] = ApiClient.convertToType(data['aiModels'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PluginUpdateDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PluginUpdateDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PluginUpdateDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['manifestFormat'] && !(typeof data['manifestFormat'] === 'string' || data['manifestFormat'] instanceof String)) {
            throw new Error("Expected the field `manifestFormat` to be a primitive type in the JSON string but got " + data['manifestFormat']);
        }
        // ensure the json data is a string
        if (data['manifestInfo'] && !(typeof data['manifestInfo'] === 'string' || data['manifestInfo'] instanceof String)) {
            throw new Error("Expected the field `manifestInfo` to be a primitive type in the JSON string but got " + data['manifestInfo']);
        }
        // ensure the json data is a string
        if (data['apiFormat'] && !(typeof data['apiFormat'] === 'string' || data['apiFormat'] instanceof String)) {
            throw new Error("Expected the field `apiFormat` to be a primitive type in the JSON string but got " + data['apiFormat']);
        }
        // ensure the json data is a string
        if (data['apiInfo'] && !(typeof data['apiInfo'] === 'string' || data['apiInfo'] instanceof String)) {
            throw new Error("Expected the field `apiInfo` to be a primitive type in the JSON string but got " + data['apiInfo']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aiModels'])) {
            throw new Error("Expected the field `aiModels` to be an array in the JSON data but got " + data['aiModels']);
        }

        return true;
    }


}

PluginUpdateDTO.RequiredProperties = ["name"];

/**
 * Visibility: private (default), public, public_org, hidden
 * @member {String} visibility
 */
PluginUpdateDTO.prototype['visibility'] = undefined;

/**
 * Plugin name
 * @member {String} name
 */
PluginUpdateDTO.prototype['name'] = undefined;

/**
 * Manifest format, currently supported: dash_scope (default), open_ai
 * @member {String} manifestFormat
 */
PluginUpdateDTO.prototype['manifestFormat'] = undefined;

/**
 * Manifest content, can be full content or a URL
 * @member {String} manifestInfo
 */
PluginUpdateDTO.prototype['manifestInfo'] = undefined;

/**
 * API description format, currently supported: openapi_v3 (default)
 * @member {String} apiFormat
 */
PluginUpdateDTO.prototype['apiFormat'] = undefined;

/**
 * API description content, can be full content or a URL
 * @member {String} apiInfo
 */
PluginUpdateDTO.prototype['apiInfo'] = undefined;

/**
 * Provider information, default is the current user's username
 * @member {String} provider
 */
PluginUpdateDTO.prototype['provider'] = undefined;

/**
 * Additional information, JSON format
 * @member {String} ext
 */
PluginUpdateDTO.prototype['ext'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
PluginUpdateDTO.prototype['tags'] = undefined;

/**
 * Supported model set, empty means no model limit
 * @member {Array.<String>} aiModels
 */
PluginUpdateDTO.prototype['aiModels'] = undefined;






export default PluginUpdateDTO;

