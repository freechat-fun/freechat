/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CharacterInfoDraftDTO model module.
 * @module model/CharacterInfoDraftDTO
 * @version 0.1.0
 */
class CharacterInfoDraftDTO {
    /**
     * Constructs a new <code>CharacterInfoDraftDTO</code>.
     * Character draft information (for prompt)
     * @alias module:model/CharacterInfoDraftDTO
     */
    constructor() { 
        
        CharacterInfoDraftDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CharacterInfoDraftDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharacterInfoDraftDTO} obj Optional instance to populate.
     * @return {module:model/CharacterInfoDraftDTO} The populated <code>CharacterInfoDraftDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharacterInfoDraftDTO();

            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('greeting')) {
                obj['greeting'] = ApiClient.convertToType(data['greeting'], 'String');
            }
            if (data.hasOwnProperty('chatStyle')) {
                obj['chatStyle'] = ApiClient.convertToType(data['chatStyle'], 'String');
            }
            if (data.hasOwnProperty('chatExample')) {
                obj['chatExample'] = ApiClient.convertToType(data['chatExample'], 'String');
            }
            if (data.hasOwnProperty('experience')) {
                obj['experience'] = ApiClient.convertToType(data['experience'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharacterInfoDraftDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharacterInfoDraftDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }
        // ensure the json data is a string
        if (data['greeting'] && !(typeof data['greeting'] === 'string' || data['greeting'] instanceof String)) {
            throw new Error("Expected the field `greeting` to be a primitive type in the JSON string but got " + data['greeting']);
        }
        // ensure the json data is a string
        if (data['chatStyle'] && !(typeof data['chatStyle'] === 'string' || data['chatStyle'] instanceof String)) {
            throw new Error("Expected the field `chatStyle` to be a primitive type in the JSON string but got " + data['chatStyle']);
        }
        // ensure the json data is a string
        if (data['chatExample'] && !(typeof data['chatExample'] === 'string' || data['chatExample'] instanceof String)) {
            throw new Error("Expected the field `chatExample` to be a primitive type in the JSON string but got " + data['chatExample']);
        }
        // ensure the json data is a string
        if (data['experience'] && !(typeof data['experience'] === 'string' || data['experience'] instanceof String)) {
            throw new Error("Expected the field `experience` to be a primitive type in the JSON string but got " + data['experience']);
        }

        return true;
    }


}



/**
 * Character profile
 * @member {String} profile
 */
CharacterInfoDraftDTO.prototype['profile'] = undefined;

/**
 * Character greeting
 * @member {String} greeting
 */
CharacterInfoDraftDTO.prototype['greeting'] = undefined;

/**
 * Character chat-style
 * @member {String} chatStyle
 */
CharacterInfoDraftDTO.prototype['chatStyle'] = undefined;

/**
 * Character chat-example
 * @member {String} chatExample
 */
CharacterInfoDraftDTO.prototype['chatExample'] = undefined;

/**
 * Character experience
 * @member {String} experience
 */
CharacterInfoDraftDTO.prototype['experience'] = undefined;






export default CharacterInfoDraftDTO;

