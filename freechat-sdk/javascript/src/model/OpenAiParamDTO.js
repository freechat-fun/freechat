/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpenAiParamDTO model module.
 * @module model/OpenAiParamDTO
 * @version 0.1.0
 */
class OpenAiParamDTO {
    /**
     * Constructs a new <code>OpenAiParamDTO</code>.
     * OpenAI series model parameters
     * @alias module:model/OpenAiParamDTO
     * @param modelId {String} Model identifier
     */
    constructor(modelId) { 
        
        OpenAiParamDTO.initialize(this, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId) { 
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>OpenAiParamDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenAiParamDTO} obj Optional instance to populate.
     * @return {module:model/OpenAiParamDTO} The populated <code>OpenAiParamDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenAiParamDTO();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('apiKeyName')) {
                obj['apiKeyName'] = ApiClient.convertToType(data['apiKeyName'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('topP')) {
                obj['topP'] = ApiClient.convertToType(data['topP'], 'Number');
            }
            if (data.hasOwnProperty('maxTokens')) {
                obj['maxTokens'] = ApiClient.convertToType(data['maxTokens'], 'Number');
            }
            if (data.hasOwnProperty('presencePenalty')) {
                obj['presencePenalty'] = ApiClient.convertToType(data['presencePenalty'], 'Number');
            }
            if (data.hasOwnProperty('frequencyPenalty')) {
                obj['frequencyPenalty'] = ApiClient.convertToType(data['frequencyPenalty'], 'Number');
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
            if (data.hasOwnProperty('stop')) {
                obj['stop'] = ApiClient.convertToType(data['stop'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenAiParamDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenAiParamDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenAiParamDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['apiKeyName'] && !(typeof data['apiKeyName'] === 'string' || data['apiKeyName'] instanceof String)) {
            throw new Error("Expected the field `apiKeyName` to be a primitive type in the JSON string but got " + data['apiKeyName']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stop'])) {
            throw new Error("Expected the field `stop` to be an array in the JSON data but got " + data['stop']);
        }

        return true;
    }


}

OpenAiParamDTO.RequiredProperties = ["modelId"];

/**
 * API-KEY, higher priority than apiKeyName. Either apiKey or apiKeyName must be specified.
 * @member {String} apiKey
 */
OpenAiParamDTO.prototype['apiKey'] = undefined;

/**
 * API-KEY name
 * @member {String} apiKeyName
 */
OpenAiParamDTO.prototype['apiKeyName'] = undefined;

/**
 * Model identifier
 * @member {String} modelId
 */
OpenAiParamDTO.prototype['modelId'] = undefined;

/**
 * OpenAI service provider address, default: https://api.openai.com/v1
 * @member {String} baseUrl
 */
OpenAiParamDTO.prototype['baseUrl'] = undefined;

/**
 * Used to adjust the degree of randomness from sampling in the generated model, the value range is (0, 1.0), a temperature of 0 will always produce the same output. The higher the temperature, the greater the randomness.
 * @member {Number} temperature
 */
OpenAiParamDTO.prototype['temperature'] = undefined;

/**
 * Probability threshold of the nucleus sampling method in the generation process, for example, when the value is 0.8, only the smallest set of most likely tokens whose probabilities add up to 0.8 or more is retained as the candidate set. The value range is (0, 1.0), the larger the value, the higher the randomness of the generation; the smaller the value, the higher the certainty of the generation.
 * @member {Number} topP
 */
OpenAiParamDTO.prototype['topP'] = undefined;

/**
 * The maximum number of tokens to generate in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.
 * @member {Number} maxTokens
 */
OpenAiParamDTO.prototype['maxTokens'] = undefined;

/**
 * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
 * @member {Number} presencePenalty
 */
OpenAiParamDTO.prototype['presencePenalty'] = undefined;

/**
 * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
 * @member {Number} frequencyPenalty
 */
OpenAiParamDTO.prototype['frequencyPenalty'] = undefined;

/**
 * If specified, OpenAI will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result.
 * @member {Number} seed
 */
OpenAiParamDTO.prototype['seed'] = undefined;

/**
 * Up to 4 sequences where the API will stop generating further tokens.
 * @member {Array.<String>} stop
 */
OpenAiParamDTO.prototype['stop'] = undefined;






export default OpenAiParamDTO;

