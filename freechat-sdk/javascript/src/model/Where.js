/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Where model module.
 * @module model/Where
 * @version 0.1.0
 */
class Where {
    /**
     * Constructs a new <code>Where</code>.
     * Query condition
     * @alias module:model/Where
     */
    constructor() { 
        
        Where.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Where</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Where} obj Optional instance to populate.
     * @return {module:model/Where} The populated <code>Where</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Where();

            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tagsOp')) {
                obj['tagsOp'] = ApiClient.convertToType(data['tagsOp'], 'String');
            }
            if (data.hasOwnProperty('aiModels')) {
                obj['aiModels'] = ApiClient.convertToType(data['aiModels'], ['String']);
            }
            if (data.hasOwnProperty('aiModelsOp')) {
                obj['aiModelsOp'] = ApiClient.convertToType(data['aiModelsOp'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Where</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Where</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['tagsOp'] && !(typeof data['tagsOp'] === 'string' || data['tagsOp'] instanceof String)) {
            throw new Error("Expected the field `tagsOp` to be a primitive type in the JSON string but got " + data['tagsOp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aiModels'])) {
            throw new Error("Expected the field `aiModels` to be an array in the JSON data but got " + data['aiModels']);
        }
        // ensure the json data is a string
        if (data['aiModelsOp'] && !(typeof data['aiModelsOp'] === 'string' || data['aiModelsOp'] instanceof String)) {
            throw new Error("Expected the field `aiModelsOp` to be a primitive type in the JSON string but got " + data['aiModelsOp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Visibility: public, public_org (search this organization), private (default)
 * @member {String} visibility
 */
Where.prototype['visibility'] = undefined;

/**
 * Effective when searching public, public_org prompts, if not specified, search all users
 * @member {String} username
 */
Where.prototype['username'] = undefined;

/**
 * Tags
 * @member {Array.<String>} tags
 */
Where.prototype['tags'] = undefined;

/**
 * Relationship between tags: and | or (default)
 * @member {String} tagsOp
 */
Where.prototype['tagsOp'] = undefined;

/**
 * Model set
 * @member {Array.<String>} aiModels
 */
Where.prototype['aiModels'] = undefined;

/**
 * Relationship between model sets: and | or (default)
 * @member {String} aiModelsOp
 */
Where.prototype['aiModelsOp'] = undefined;

/**
 * Name, left match
 * @member {String} name
 */
Where.prototype['name'] = undefined;

/**
 * Type, exact match: string (default) | chat
 * @member {String} type
 */
Where.prototype['type'] = undefined;

/**
 * Language, exact match
 * @member {String} lang
 */
Where.prototype['lang'] = undefined;

/**
 * Name, description, template, example, fuzzy match, any one match is sufficient; public scope + general search for all users does not guarantee real-time.
 * @member {String} text
 */
Where.prototype['text'] = undefined;






export default Where;

