/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatMessageDTO from './ChatMessageDTO';
import LlmTokenUsageDTO from './LlmTokenUsageDTO';

/**
 * The LlmResultDTO model module.
 * @module model/LlmResultDTO
 * @version 0.1.0
 */
class LlmResultDTO {
    /**
     * Constructs a new <code>LlmResultDTO</code>.
     * Prompt service result
     * @alias module:model/LlmResultDTO
     */
    constructor() { 
        
        LlmResultDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LlmResultDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LlmResultDTO} obj Optional instance to populate.
     * @return {module:model/LlmResultDTO} The populated <code>LlmResultDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LlmResultDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ChatMessageDTO.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('finishReason')) {
                obj['finishReason'] = ApiClient.convertToType(data['finishReason'], 'String');
            }
            if (data.hasOwnProperty('tokenUsage')) {
                obj['tokenUsage'] = LlmTokenUsageDTO.constructFromObject(data['tokenUsage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LlmResultDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LlmResultDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          ChatMessageDTO.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['finishReason'] && !(typeof data['finishReason'] === 'string' || data['finishReason'] instanceof String)) {
            throw new Error("Expected the field `finishReason` to be a primitive type in the JSON string but got " + data['finishReason']);
        }
        // validate the optional field `tokenUsage`
        if (data['tokenUsage']) { // data not null
          LlmTokenUsageDTO.validateJSON(data['tokenUsage']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
LlmResultDTO.prototype['requestId'] = undefined;

/**
 * Model response content, the complete content is included in non-streaming responses; only the delta content is included in streaming responses (the complete content of streaming responses is in the content of the last frame message field)
 * @member {String} text
 */
LlmResultDTO.prototype['text'] = undefined;

/**
 * @member {module:model/ChatMessageDTO} message
 */
LlmResultDTO.prototype['message'] = undefined;

/**
 * Model end reason: stop | length | tool_execution | content_filter
 * @member {String} finishReason
 */
LlmResultDTO.prototype['finishReason'] = undefined;

/**
 * @member {module:model/LlmTokenUsageDTO} tokenUsage
 */
LlmResultDTO.prototype['tokenUsage'] = undefined;






export default LlmResultDTO;

