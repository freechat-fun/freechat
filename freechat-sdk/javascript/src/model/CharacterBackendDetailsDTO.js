/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CharacterBackendDetailsDTO model module.
 * @module model/CharacterBackendDetailsDTO
 * @version 0.1.0
 */
class CharacterBackendDetailsDTO {
    /**
     * Constructs a new <code>CharacterBackendDetailsDTO</code>.
     * Character backend detailed information
     * @alias module:model/CharacterBackendDetailsDTO
     */
    constructor() { 
        
        CharacterBackendDetailsDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CharacterBackendDetailsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharacterBackendDetailsDTO} obj Optional instance to populate.
     * @return {module:model/CharacterBackendDetailsDTO} The populated <code>CharacterBackendDetailsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharacterBackendDetailsDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('backendId')) {
                obj['backendId'] = ApiClient.convertToType(data['backendId'], 'String');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('characterId')) {
                obj['characterId'] = ApiClient.convertToType(data['characterId'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('greetingPromptTaskId')) {
                obj['greetingPromptTaskId'] = ApiClient.convertToType(data['greetingPromptTaskId'], 'String');
            }
            if (data.hasOwnProperty('experiencePromptTaskId')) {
                obj['experiencePromptTaskId'] = ApiClient.convertToType(data['experiencePromptTaskId'], 'String');
            }
            if (data.hasOwnProperty('messageWindowSize')) {
                obj['messageWindowSize'] = ApiClient.convertToType(data['messageWindowSize'], 'Number');
            }
            if (data.hasOwnProperty('forwardToUser')) {
                obj['forwardToUser'] = ApiClient.convertToType(data['forwardToUser'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharacterBackendDetailsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharacterBackendDetailsDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['backendId'] && !(typeof data['backendId'] === 'string' || data['backendId'] instanceof String)) {
            throw new Error("Expected the field `backendId` to be a primitive type in the JSON string but got " + data['backendId']);
        }
        // ensure the json data is a string
        if (data['characterId'] && !(typeof data['characterId'] === 'string' || data['characterId'] instanceof String)) {
            throw new Error("Expected the field `characterId` to be a primitive type in the JSON string but got " + data['characterId']);
        }
        // ensure the json data is a string
        if (data['greetingPromptTaskId'] && !(typeof data['greetingPromptTaskId'] === 'string' || data['greetingPromptTaskId'] instanceof String)) {
            throw new Error("Expected the field `greetingPromptTaskId` to be a primitive type in the JSON string but got " + data['greetingPromptTaskId']);
        }
        // ensure the json data is a string
        if (data['experiencePromptTaskId'] && !(typeof data['experiencePromptTaskId'] === 'string' || data['experiencePromptTaskId'] instanceof String)) {
            throw new Error("Expected the field `experiencePromptTaskId` to be a primitive type in the JSON string but got " + data['experiencePromptTaskId']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
CharacterBackendDetailsDTO.prototype['requestId'] = undefined;

/**
 * Character backend identifier
 * @member {String} backendId
 */
CharacterBackendDetailsDTO.prototype['backendId'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
CharacterBackendDetailsDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
CharacterBackendDetailsDTO.prototype['gmtModified'] = undefined;

/**
 * Character identifier
 * @member {String} characterId
 */
CharacterBackendDetailsDTO.prototype['characterId'] = undefined;

/**
 * Whether it is the default backend
 * @member {Boolean} isDefault
 */
CharacterBackendDetailsDTO.prototype['isDefault'] = undefined;

/**
 * Prompt task identifier for greeting
 * @member {String} greetingPromptTaskId
 */
CharacterBackendDetailsDTO.prototype['greetingPromptTaskId'] = undefined;

/**
 * Prompt task identifier for experience
 * @member {String} experiencePromptTaskId
 */
CharacterBackendDetailsDTO.prototype['experiencePromptTaskId'] = undefined;

/**
 * Max messages in the character's memory
 * @member {Number} messageWindowSize
 */
CharacterBackendDetailsDTO.prototype['messageWindowSize'] = undefined;

/**
 * Whether to forward messages to the character owner
 * @member {Boolean} forwardToUser
 */
CharacterBackendDetailsDTO.prototype['forwardToUser'] = undefined;






export default CharacterBackendDetailsDTO;

