/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PromptRefDTO model module.
 * @module model/PromptRefDTO
 * @version 0.1.0
 */
class PromptRefDTO {
    /**
     * Constructs a new <code>PromptRefDTO</code>.
     * Prompt reference information
     * @alias module:model/PromptRefDTO
     * @param promptId {String} Prompt identifier
     */
    constructor(promptId) { 
        
        PromptRefDTO.initialize(this, promptId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, promptId) { 
        obj['promptId'] = promptId;
    }

    /**
     * Constructs a <code>PromptRefDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromptRefDTO} obj Optional instance to populate.
     * @return {module:model/PromptRefDTO} The populated <code>PromptRefDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromptRefDTO();

            if (data.hasOwnProperty('promptId')) {
                obj['promptId'] = ApiClient.convertToType(data['promptId'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': Object});
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromptRefDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromptRefDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PromptRefDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['promptId'] && !(typeof data['promptId'] === 'string' || data['promptId'] instanceof String)) {
            throw new Error("Expected the field `promptId` to be a primitive type in the JSON string but got " + data['promptId']);
        }

        return true;
    }


}

PromptRefDTO.RequiredProperties = ["promptId"];

/**
 * Prompt identifier
 * @member {String} promptId
 */
PromptRefDTO.prototype['promptId'] = undefined;

/**
 * Variables applied to the template, can be empty
 * @member {Object.<String, Object>} variables
 */
PromptRefDTO.prototype['variables'] = undefined;

/**
 * Whether to use draft content
 * @member {Boolean} draft
 */
PromptRefDTO.prototype['draft'] = undefined;






export default PromptRefDTO;

