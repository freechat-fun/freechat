/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppMetaDTO model module.
 * @module model/AppMetaDTO
 * @version 0.1.0
 */
class AppMetaDTO {
    /**
     * Constructs a new <code>AppMetaDTO</code>.
     * Application metadata
     * @alias module:model/AppMetaDTO
     */
    constructor() { 
        
        AppMetaDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppMetaDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppMetaDTO} obj Optional instance to populate.
     * @return {module:model/AppMetaDTO} The populated <code>AppMetaDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppMetaDTO();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('buildTimestamp')) {
                obj['buildTimestamp'] = ApiClient.convertToType(data['buildTimestamp'], 'String');
            }
            if (data.hasOwnProperty('buildNumber')) {
                obj['buildNumber'] = ApiClient.convertToType(data['buildNumber'], 'String');
            }
            if (data.hasOwnProperty('commitUrl')) {
                obj['commitUrl'] = ApiClient.convertToType(data['commitUrl'], 'String');
            }
            if (data.hasOwnProperty('releaseNoteUrl')) {
                obj['releaseNoteUrl'] = ApiClient.convertToType(data['releaseNoteUrl'], 'String');
            }
            if (data.hasOwnProperty('runningEnv')) {
                obj['runningEnv'] = ApiClient.convertToType(data['runningEnv'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppMetaDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppMetaDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['buildTimestamp'] && !(typeof data['buildTimestamp'] === 'string' || data['buildTimestamp'] instanceof String)) {
            throw new Error("Expected the field `buildTimestamp` to be a primitive type in the JSON string but got " + data['buildTimestamp']);
        }
        // ensure the json data is a string
        if (data['buildNumber'] && !(typeof data['buildNumber'] === 'string' || data['buildNumber'] instanceof String)) {
            throw new Error("Expected the field `buildNumber` to be a primitive type in the JSON string but got " + data['buildNumber']);
        }
        // ensure the json data is a string
        if (data['commitUrl'] && !(typeof data['commitUrl'] === 'string' || data['commitUrl'] instanceof String)) {
            throw new Error("Expected the field `commitUrl` to be a primitive type in the JSON string but got " + data['commitUrl']);
        }
        // ensure the json data is a string
        if (data['releaseNoteUrl'] && !(typeof data['releaseNoteUrl'] === 'string' || data['releaseNoteUrl'] instanceof String)) {
            throw new Error("Expected the field `releaseNoteUrl` to be a primitive type in the JSON string but got " + data['releaseNoteUrl']);
        }
        // ensure the json data is a string
        if (data['runningEnv'] && !(typeof data['runningEnv'] === 'string' || data['runningEnv'] instanceof String)) {
            throw new Error("Expected the field `runningEnv` to be a primitive type in the JSON string but got " + data['runningEnv']);
        }

        return true;
    }


}



/**
 * Application name
 * @member {String} name
 */
AppMetaDTO.prototype['name'] = undefined;

/**
 * Application version
 * @member {String} version
 */
AppMetaDTO.prototype['version'] = undefined;

/**
 * Build time
 * @member {String} buildTimestamp
 */
AppMetaDTO.prototype['buildTimestamp'] = undefined;

/**
 * Build number
 * @member {String} buildNumber
 */
AppMetaDTO.prototype['buildNumber'] = undefined;

/**
 * Commit URL
 * @member {String} commitUrl
 */
AppMetaDTO.prototype['commitUrl'] = undefined;

/**
 * Release notes
 * @member {String} releaseNoteUrl
 */
AppMetaDTO.prototype['releaseNoteUrl'] = undefined;

/**
 * Running environment
 * @member {String} runningEnv
 */
AppMetaDTO.prototype['runningEnv'] = undefined;






export default AppMetaDTO;

