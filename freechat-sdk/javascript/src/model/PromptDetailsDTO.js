/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AiModelInfoDTO from './AiModelInfoDTO';
import ChatPromptContentDTO from './ChatPromptContentDTO';

/**
 * The PromptDetailsDTO model module.
 * @module model/PromptDetailsDTO
 * @version 0.1.0
 */
class PromptDetailsDTO {
    /**
     * Constructs a new <code>PromptDetailsDTO</code>.
     * Prompt detailed content
     * @alias module:model/PromptDetailsDTO
     */
    constructor() { 
        
        PromptDetailsDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PromptDetailsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromptDetailsDTO} obj Optional instance to populate.
     * @return {module:model/PromptDetailsDTO} The populated <code>PromptDetailsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromptDetailsDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('promptId')) {
                obj['promptId'] = ApiClient.convertToType(data['promptId'], 'String');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('aiModels')) {
                obj['aiModels'] = ApiClient.convertToType(data['aiModels'], [AiModelInfoDTO]);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('chatTemplate')) {
                obj['chatTemplate'] = ChatPromptContentDTO.constructFromObject(data['chatTemplate']);
            }
            if (data.hasOwnProperty('example')) {
                obj['example'] = ApiClient.convertToType(data['example'], 'String');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromptDetailsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromptDetailsDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['promptId'] && !(typeof data['promptId'] === 'string' || data['promptId'] instanceof String)) {
            throw new Error("Expected the field `promptId` to be a primitive type in the JSON string but got " + data['promptId']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['aiModels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aiModels'])) {
                throw new Error("Expected the field `aiModels` to be an array in the JSON data but got " + data['aiModels']);
            }
            // validate the optional field `aiModels` (array)
            for (const item of data['aiModels']) {
                AiModelInfoDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // validate the optional field `chatTemplate`
        if (data['chatTemplate']) { // data not null
          ChatPromptContentDTO.validateJSON(data['chatTemplate']);
        }
        // ensure the json data is a string
        if (data['example'] && !(typeof data['example'] === 'string' || data['example'] instanceof String)) {
            throw new Error("Expected the field `example` to be a primitive type in the JSON string but got " + data['example']);
        }
        // ensure the json data is a string
        if (data['inputs'] && !(typeof data['inputs'] === 'string' || data['inputs'] instanceof String)) {
            throw new Error("Expected the field `inputs` to be a primitive type in the JSON string but got " + data['inputs']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // ensure the json data is a string
        if (data['draft'] && !(typeof data['draft'] === 'string' || data['draft'] instanceof String)) {
            throw new Error("Expected the field `draft` to be a primitive type in the JSON string but got " + data['draft']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
PromptDetailsDTO.prototype['requestId'] = undefined;

/**
 * Prompt identifier
 * @member {String} promptId
 */
PromptDetailsDTO.prototype['promptId'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
PromptDetailsDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
PromptDetailsDTO.prototype['gmtModified'] = undefined;

/**
 * Visibility: private, public, public_org, hidden
 * @member {String} visibility
 */
PromptDetailsDTO.prototype['visibility'] = undefined;

/**
 * Version
 * @member {Number} version
 */
PromptDetailsDTO.prototype['version'] = undefined;

/**
 * Prompt name
 * @member {String} name
 */
PromptDetailsDTO.prototype['name'] = undefined;

/**
 * Prompt type: string | chat
 * @member {String} type
 */
PromptDetailsDTO.prototype['type'] = undefined;

/**
 * Prompt description (50 characters, the excess part is represented by ellipsis)
 * @member {String} description
 */
PromptDetailsDTO.prototype['description'] = undefined;

/**
 * Prompt format: mustache (default) | f_string
 * @member {String} format
 */
PromptDetailsDTO.prototype['format'] = undefined;

/**
 * Prompt language: en (default) | zh_CN | ...
 * @member {String} lang
 */
PromptDetailsDTO.prototype['lang'] = undefined;

/**
 * Prompt owner
 * @member {String} username
 */
PromptDetailsDTO.prototype['username'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
PromptDetailsDTO.prototype['tags'] = undefined;

/**
 * Supported model set
 * @member {Array.<module:model/AiModelInfoDTO>} aiModels
 */
PromptDetailsDTO.prototype['aiModels'] = undefined;

/**
 * Prompt text template content
 * @member {String} template
 */
PromptDetailsDTO.prototype['template'] = undefined;

/**
 * @member {module:model/ChatPromptContentDTO} chatTemplate
 */
PromptDetailsDTO.prototype['chatTemplate'] = undefined;

/**
 * Prompt example
 * @member {String} example
 */
PromptDetailsDTO.prototype['example'] = undefined;

/**
 * Prompt inputs, JSON format
 * @member {String} inputs
 */
PromptDetailsDTO.prototype['inputs'] = undefined;

/**
 * Additional information, JSON format
 * @member {String} ext
 */
PromptDetailsDTO.prototype['ext'] = undefined;

/**
 * Draft content
 * @member {String} draft
 */
PromptDetailsDTO.prototype['draft'] = undefined;






export default PromptDetailsDTO;

