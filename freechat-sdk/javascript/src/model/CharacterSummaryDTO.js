/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CharacterSummaryDTO model module.
 * @module model/CharacterSummaryDTO
 * @version 0.1.0
 */
class CharacterSummaryDTO {
    /**
     * Constructs a new <code>CharacterSummaryDTO</code>.
     * Character summary content
     * @alias module:model/CharacterSummaryDTO
     * @param name {String} Character name
     */
    constructor(name) { 
        
        CharacterSummaryDTO.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CharacterSummaryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharacterSummaryDTO} obj Optional instance to populate.
     * @return {module:model/CharacterSummaryDTO} The populated <code>CharacterSummaryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharacterSummaryDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('characterId')) {
                obj['characterId'] = ApiClient.convertToType(data['characterId'], 'String');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = ApiClient.convertToType(data['picture'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharacterSummaryDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharacterSummaryDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CharacterSummaryDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['characterId'] && !(typeof data['characterId'] === 'string' || data['characterId'] instanceof String)) {
            throw new Error("Expected the field `characterId` to be a primitive type in the JSON string but got " + data['characterId']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['picture'] && !(typeof data['picture'] === 'string' || data['picture'] instanceof String)) {
            throw new Error("Expected the field `picture` to be a primitive type in the JSON string but got " + data['picture']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

CharacterSummaryDTO.RequiredProperties = ["name"];

/**
 * Request identifier
 * @member {String} requestId
 */
CharacterSummaryDTO.prototype['requestId'] = undefined;

/**
 * Character identifier
 * @member {String} characterId
 */
CharacterSummaryDTO.prototype['characterId'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
CharacterSummaryDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
CharacterSummaryDTO.prototype['gmtModified'] = undefined;

/**
 * Visibility: private, public, public_org, hidden
 * @member {String} visibility
 */
CharacterSummaryDTO.prototype['visibility'] = undefined;

/**
 * Version
 * @member {Number} version
 */
CharacterSummaryDTO.prototype['version'] = undefined;

/**
 * Character name
 * @member {String} name
 */
CharacterSummaryDTO.prototype['name'] = undefined;

/**
 * Character description
 * @member {String} description
 */
CharacterSummaryDTO.prototype['description'] = undefined;

/**
 * Character avatar url
 * @member {String} avatar
 */
CharacterSummaryDTO.prototype['avatar'] = undefined;

/**
 * Character picture url
 * @member {String} picture
 */
CharacterSummaryDTO.prototype['picture'] = undefined;

/**
 * Character language: English | Chinese (Simplified) | ...
 * @member {String} lang
 */
CharacterSummaryDTO.prototype['lang'] = undefined;

/**
 * Character owner
 * @member {String} username
 */
CharacterSummaryDTO.prototype['username'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
CharacterSummaryDTO.prototype['tags'] = undefined;






export default CharacterSummaryDTO;

