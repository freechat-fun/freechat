/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CharacterInfoDraftDTO from './CharacterInfoDraftDTO';

/**
 * The CharacterUpdateDTO model module.
 * @module model/CharacterUpdateDTO
 * @version 0.1.0
 */
class CharacterUpdateDTO {
    /**
     * Constructs a new <code>CharacterUpdateDTO</code>.
     * Request data for updating character information
     * @alias module:model/CharacterUpdateDTO
     * @param name {String} Character name
     */
    constructor(name) { 
        
        CharacterUpdateDTO.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CharacterUpdateDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharacterUpdateDTO} obj Optional instance to populate.
     * @return {module:model/CharacterUpdateDTO} The populated <code>CharacterUpdateDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharacterUpdateDTO();

            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = ApiClient.convertToType(data['picture'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('greeting')) {
                obj['greeting'] = ApiClient.convertToType(data['greeting'], 'String');
            }
            if (data.hasOwnProperty('chatStyle')) {
                obj['chatStyle'] = ApiClient.convertToType(data['chatStyle'], 'String');
            }
            if (data.hasOwnProperty('chatExample')) {
                obj['chatExample'] = ApiClient.convertToType(data['chatExample'], 'String');
            }
            if (data.hasOwnProperty('experience')) {
                obj['experience'] = ApiClient.convertToType(data['experience'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = CharacterInfoDraftDTO.constructFromObject(data['draft']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharacterUpdateDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharacterUpdateDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CharacterUpdateDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['picture'] && !(typeof data['picture'] === 'string' || data['picture'] instanceof String)) {
            throw new Error("Expected the field `picture` to be a primitive type in the JSON string but got " + data['picture']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }
        // ensure the json data is a string
        if (data['greeting'] && !(typeof data['greeting'] === 'string' || data['greeting'] instanceof String)) {
            throw new Error("Expected the field `greeting` to be a primitive type in the JSON string but got " + data['greeting']);
        }
        // ensure the json data is a string
        if (data['chatStyle'] && !(typeof data['chatStyle'] === 'string' || data['chatStyle'] instanceof String)) {
            throw new Error("Expected the field `chatStyle` to be a primitive type in the JSON string but got " + data['chatStyle']);
        }
        // ensure the json data is a string
        if (data['chatExample'] && !(typeof data['chatExample'] === 'string' || data['chatExample'] instanceof String)) {
            throw new Error("Expected the field `chatExample` to be a primitive type in the JSON string but got " + data['chatExample']);
        }
        // ensure the json data is a string
        if (data['experience'] && !(typeof data['experience'] === 'string' || data['experience'] instanceof String)) {
            throw new Error("Expected the field `experience` to be a primitive type in the JSON string but got " + data['experience']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // validate the optional field `draft`
        if (data['draft']) { // data not null
          CharacterInfoDraftDTO.validateJSON(data['draft']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

CharacterUpdateDTO.RequiredProperties = ["name"];

/**
 * Referenced character
 * @member {String} parentId
 */
CharacterUpdateDTO.prototype['parentId'] = undefined;

/**
 * Visibility: private (default), public, public_org, hidden
 * @member {String} visibility
 */
CharacterUpdateDTO.prototype['visibility'] = undefined;

/**
 * Character name
 * @member {String} name
 */
CharacterUpdateDTO.prototype['name'] = undefined;

/**
 * Character description
 * @member {String} description
 */
CharacterUpdateDTO.prototype['description'] = undefined;

/**
 * Character avatar url
 * @member {String} avatar
 */
CharacterUpdateDTO.prototype['avatar'] = undefined;

/**
 * Character picture url
 * @member {String} picture
 */
CharacterUpdateDTO.prototype['picture'] = undefined;

/**
 * Character gender: male | female | non_human | unknown
 * @member {String} gender
 */
CharacterUpdateDTO.prototype['gender'] = undefined;

/**
 * Character profile
 * @member {String} profile
 */
CharacterUpdateDTO.prototype['profile'] = undefined;

/**
 * Character greeting
 * @member {String} greeting
 */
CharacterUpdateDTO.prototype['greeting'] = undefined;

/**
 * Character chat-style
 * @member {String} chatStyle
 */
CharacterUpdateDTO.prototype['chatStyle'] = undefined;

/**
 * Character chat-example
 * @member {String} chatExample
 */
CharacterUpdateDTO.prototype['chatExample'] = undefined;

/**
 * Character experience
 * @member {String} experience
 */
CharacterUpdateDTO.prototype['experience'] = undefined;

/**
 * Character language: English | Chinese (Simplified) | ...
 * @member {String} lang
 */
CharacterUpdateDTO.prototype['lang'] = undefined;

/**
 * Additional information, JSON format
 * @member {String} ext
 */
CharacterUpdateDTO.prototype['ext'] = undefined;

/**
 * @member {module:model/CharacterInfoDraftDTO} draft
 */
CharacterUpdateDTO.prototype['draft'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
CharacterUpdateDTO.prototype['tags'] = undefined;






export default CharacterUpdateDTO;

