/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PromptRefDTO from './PromptRefDTO';

/**
 * The PromptTaskDetailsDTO model module.
 * @module model/PromptTaskDetailsDTO
 * @version 0.1.0
 */
class PromptTaskDetailsDTO {
    /**
     * Constructs a new <code>PromptTaskDetailsDTO</code>.
     * Prompt task detailed information
     * @alias module:model/PromptTaskDetailsDTO
     */
    constructor() { 
        
        PromptTaskDetailsDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PromptTaskDetailsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromptTaskDetailsDTO} obj Optional instance to populate.
     * @return {module:model/PromptTaskDetailsDTO} The populated <code>PromptTaskDetailsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromptTaskDetailsDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('gmtExecuted')) {
                obj['gmtExecuted'] = ApiClient.convertToType(data['gmtExecuted'], 'Date');
            }
            if (data.hasOwnProperty('promptRef')) {
                obj['promptRef'] = PromptRefDTO.constructFromObject(data['promptRef']);
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('apiKeyName')) {
                obj['apiKeyName'] = ApiClient.convertToType(data['apiKeyName'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('cron')) {
                obj['cron'] = ApiClient.convertToType(data['cron'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromptTaskDetailsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromptTaskDetailsDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // validate the optional field `promptRef`
        if (data['promptRef']) { // data not null
          PromptRefDTO.validateJSON(data['promptRef']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['apiKeyName'] && !(typeof data['apiKeyName'] === 'string' || data['apiKeyName'] instanceof String)) {
            throw new Error("Expected the field `apiKeyName` to be a primitive type in the JSON string but got " + data['apiKeyName']);
        }
        // ensure the json data is a string
        if (data['cron'] && !(typeof data['cron'] === 'string' || data['cron'] instanceof String)) {
            throw new Error("Expected the field `cron` to be a primitive type in the JSON string but got " + data['cron']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
PromptTaskDetailsDTO.prototype['requestId'] = undefined;

/**
 * Prompt task identifier
 * @member {String} taskId
 */
PromptTaskDetailsDTO.prototype['taskId'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
PromptTaskDetailsDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
PromptTaskDetailsDTO.prototype['gmtModified'] = undefined;

/**
 * Latest executed time
 * @member {Date} gmtExecuted
 */
PromptTaskDetailsDTO.prototype['gmtExecuted'] = undefined;

/**
 * @member {module:model/PromptRefDTO} promptRef
 */
PromptTaskDetailsDTO.prototype['promptRef'] = undefined;

/**
 * Model identifier
 * @member {String} modelId
 */
PromptTaskDetailsDTO.prototype['modelId'] = undefined;

/**
 * API-KEY name
 * @member {String} apiKeyName
 */
PromptTaskDetailsDTO.prototype['apiKeyName'] = undefined;

/**
 * Model call parameters
 * @member {Object.<String, Object>} params
 */
PromptTaskDetailsDTO.prototype['params'] = undefined;

/**
 * Task scheduling configuration which compatible with Quartz cron format
 * @member {String} cron
 */
PromptTaskDetailsDTO.prototype['cron'] = undefined;

/**
 * Task execution status: pending | running | succeeded | failed
 * @member {String} status
 */
PromptTaskDetailsDTO.prototype['status'] = undefined;






export default PromptTaskDetailsDTO;

