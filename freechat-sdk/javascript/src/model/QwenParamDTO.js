/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QwenParamDTO model module.
 * @module model/QwenParamDTO
 * @version 0.1.0
 */
class QwenParamDTO {
    /**
     * Constructs a new <code>QwenParamDTO</code>.
     * Qwen series model parameters
     * @alias module:model/QwenParamDTO
     * @param modelId {String} Model identifier
     */
    constructor(modelId) { 
        
        QwenParamDTO.initialize(this, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId) { 
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>QwenParamDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QwenParamDTO} obj Optional instance to populate.
     * @return {module:model/QwenParamDTO} The populated <code>QwenParamDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QwenParamDTO();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('apiKeyName')) {
                obj['apiKeyName'] = ApiClient.convertToType(data['apiKeyName'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('topP')) {
                obj['topP'] = ApiClient.convertToType(data['topP'], 'Number');
            }
            if (data.hasOwnProperty('topK')) {
                obj['topK'] = ApiClient.convertToType(data['topK'], 'Number');
            }
            if (data.hasOwnProperty('enableSearch')) {
                obj['enableSearch'] = ApiClient.convertToType(data['enableSearch'], 'Boolean');
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QwenParamDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QwenParamDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QwenParamDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['apiKeyName'] && !(typeof data['apiKeyName'] === 'string' || data['apiKeyName'] instanceof String)) {
            throw new Error("Expected the field `apiKeyName` to be a primitive type in the JSON string but got " + data['apiKeyName']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }

        return true;
    }


}

QwenParamDTO.RequiredProperties = ["modelId"];

/**
 * API-KEY, higher priority than apiKeyName. Either apiKey or apiKeyName must be specified.
 * @member {String} apiKey
 */
QwenParamDTO.prototype['apiKey'] = undefined;

/**
 * API-KEY name
 * @member {String} apiKeyName
 */
QwenParamDTO.prototype['apiKeyName'] = undefined;

/**
 * Model identifier
 * @member {String} modelId
 */
QwenParamDTO.prototype['modelId'] = undefined;

/**
 * Probability threshold of the nucleus sampling method in the generation process, for example, when the value is 0.8, only the smallest set of most likely tokens whose probabilities add up to 0.8 or more is retained as the candidate set. The value range is (0, 1.0), the larger the value, the higher the randomness of the generation; the smaller the value, the higher the certainty of the generation. The default value is 0.5.
 * @member {Number} topP
 */
QwenParamDTO.prototype['topP'] = undefined;

/**
 * The size of the sampling candidate set during generation. For example, when the value is 50, only the top 50 tokens with the highest scores in a single generation are included in the random sampling candidate set. The larger the value, the higher the randomness of the generation; the smaller the value, the higher the certainty of the generation. The default value is 0, which means that the top_k strategy is not enabled, and only the top_p strategy is effective. The default value is 0.
 * @member {Number} topK
 */
QwenParamDTO.prototype['topK'] = undefined;

/**
 * Whether to use a search engine for data enhancement. Default is false.
 * @member {Boolean} enableSearch
 */
QwenParamDTO.prototype['enableSearch'] = undefined;

/**
 * During generation, the seed of the random number, used to control the randomness of the model generation. If the same seed is used, the results of each run will be the same; when you need to reproduce the results of the model, you can use the same seed. The default value is 1234.
 * @member {Number} seed
 */
QwenParamDTO.prototype['seed'] = undefined;






export default QwenParamDTO;

