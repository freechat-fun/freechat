/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PromptRefDTO from './PromptRefDTO';
import PromptTemplateDTO from './PromptTemplateDTO';

/**
 * The PromptAiParamDTO model module.
 * @module model/PromptAiParamDTO
 * @version 0.1.0
 */
class PromptAiParamDTO {
    /**
     * Constructs a new <code>PromptAiParamDTO</code>.
     * Prompt AI service information
     * @alias module:model/PromptAiParamDTO
     * @param params {Object.<String, Object>} Model call parameters, the actual supported fields are related to modelId, depending on the model provider, specific fields can refer to: OpenAiParamDTO, QwenParamDTO
     */
    constructor(params) { 
        
        PromptAiParamDTO.initialize(this, params);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, params) { 
        obj['params'] = params;
    }

    /**
     * Constructs a <code>PromptAiParamDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromptAiParamDTO} obj Optional instance to populate.
     * @return {module:model/PromptAiParamDTO} The populated <code>PromptAiParamDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromptAiParamDTO();

            if (data.hasOwnProperty('prompt')) {
                obj['prompt'] = ApiClient.convertToType(data['prompt'], 'String');
            }
            if (data.hasOwnProperty('promptTemplate')) {
                obj['promptTemplate'] = PromptTemplateDTO.constructFromObject(data['promptTemplate']);
            }
            if (data.hasOwnProperty('promptRef')) {
                obj['promptRef'] = PromptRefDTO.constructFromObject(data['promptRef']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromptAiParamDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromptAiParamDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PromptAiParamDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['prompt'] && !(typeof data['prompt'] === 'string' || data['prompt'] instanceof String)) {
            throw new Error("Expected the field `prompt` to be a primitive type in the JSON string but got " + data['prompt']);
        }
        // validate the optional field `promptTemplate`
        if (data['promptTemplate']) { // data not null
          PromptTemplateDTO.validateJSON(data['promptTemplate']);
        }
        // validate the optional field `promptRef`
        if (data['promptRef']) { // data not null
          PromptRefDTO.validateJSON(data['promptRef']);
        }

        return true;
    }


}

PromptAiParamDTO.RequiredProperties = ["params"];

/**
 * Complete input content, priority: prompt > promptTemplate > promptRef
 * @member {String} prompt
 */
PromptAiParamDTO.prototype['prompt'] = undefined;

/**
 * @member {module:model/PromptTemplateDTO} promptTemplate
 */
PromptAiParamDTO.prototype['promptTemplate'] = undefined;

/**
 * @member {module:model/PromptRefDTO} promptRef
 */
PromptAiParamDTO.prototype['promptRef'] = undefined;

/**
 * Model call parameters, the actual supported fields are related to modelId, depending on the model provider, specific fields can refer to: OpenAiParamDTO, QwenParamDTO
 * @member {Object.<String, Object>} params
 */
PromptAiParamDTO.prototype['params'] = undefined;






export default PromptAiParamDTO;

