/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AiApiKeyInfoDTO model module.
 * @module model/AiApiKeyInfoDTO
 * @version 0.1.0
 */
class AiApiKeyInfoDTO {
    /**
     * Constructs a new <code>AiApiKeyInfoDTO</code>.
     * Model credential information
     * @alias module:model/AiApiKeyInfoDTO
     */
    constructor() { 
        
        AiApiKeyInfoDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AiApiKeyInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AiApiKeyInfoDTO} obj Optional instance to populate.
     * @return {module:model/AiApiKeyInfoDTO} The populated <code>AiApiKeyInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AiApiKeyInfoDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('gmtUsed')) {
                obj['gmtUsed'] = ApiClient.convertToType(data['gmtUsed'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AiApiKeyInfoDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AiApiKeyInfoDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
AiApiKeyInfoDTO.prototype['requestId'] = undefined;

/**
 * Credential identifier
 * @member {Number} id
 */
AiApiKeyInfoDTO.prototype['id'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
AiApiKeyInfoDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
AiApiKeyInfoDTO.prototype['gmtModified'] = undefined;

/**
 * Last use time
 * @member {Date} gmtUsed
 */
AiApiKeyInfoDTO.prototype['gmtUsed'] = undefined;

/**
 * Credential name
 * @member {String} name
 */
AiApiKeyInfoDTO.prototype['name'] = undefined;

/**
 * Model provider: hugging_face | open_ai | local_ai | in_process | dash_scope | unknown
 * @member {String} provider
 */
AiApiKeyInfoDTO.prototype['provider'] = undefined;

/**
 * Credential content
 * @member {String} token
 */
AiApiKeyInfoDTO.prototype['token'] = undefined;

/**
 * Whether to enable
 * @member {Boolean} enabled
 */
AiApiKeyInfoDTO.prototype['enabled'] = undefined;

/**
 * Credential owner
 * @member {String} username
 */
AiApiKeyInfoDTO.prototype['username'] = undefined;






export default AiApiKeyInfoDTO;

