/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserDetailsDTO model module.
 * @module model/UserDetailsDTO
 * @version 0.1.0
 */
class UserDetailsDTO {
    /**
     * Constructs a new <code>UserDetailsDTO</code>.
     * Account detailed information
     * @alias module:model/UserDetailsDTO
     */
    constructor() { 
        
        UserDetailsDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserDetailsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDetailsDTO} obj Optional instance to populate.
     * @return {module:model/UserDetailsDTO} The populated <code>UserDetailsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDetailsDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('preferredUsername')) {
                obj['preferredUsername'] = ApiClient.convertToType(data['preferredUsername'], 'String');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], 'String');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = ApiClient.convertToType(data['picture'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ApiClient.convertToType(data['birthdate'], 'Date');
            }
            if (data.hasOwnProperty('zoneinfo')) {
                obj['zoneinfo'] = ApiClient.convertToType(data['zoneinfo'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('passwordExpiresAt')) {
                obj['passwordExpiresAt'] = ApiClient.convertToType(data['passwordExpiresAt'], 'Date');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDetailsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDetailsDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['preferredUsername'] && !(typeof data['preferredUsername'] === 'string' || data['preferredUsername'] instanceof String)) {
            throw new Error("Expected the field `preferredUsername` to be a primitive type in the JSON string but got " + data['preferredUsername']);
        }
        // ensure the json data is a string
        if (data['profile'] && !(typeof data['profile'] === 'string' || data['profile'] instanceof String)) {
            throw new Error("Expected the field `profile` to be a primitive type in the JSON string but got " + data['profile']);
        }
        // ensure the json data is a string
        if (data['picture'] && !(typeof data['picture'] === 'string' || data['picture'] instanceof String)) {
            throw new Error("Expected the field `picture` to be a primitive type in the JSON string but got " + data['picture']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['zoneinfo'] && !(typeof data['zoneinfo'] === 'string' || data['zoneinfo'] instanceof String)) {
            throw new Error("Expected the field `zoneinfo` to be a primitive type in the JSON string but got " + data['zoneinfo']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
UserDetailsDTO.prototype['requestId'] = undefined;

/**
 * @member {String} username
 */
UserDetailsDTO.prototype['username'] = undefined;

/**
 * @member {String} nickname
 */
UserDetailsDTO.prototype['nickname'] = undefined;

/**
 * @member {String} givenName
 */
UserDetailsDTO.prototype['givenName'] = undefined;

/**
 * @member {String} middleName
 */
UserDetailsDTO.prototype['middleName'] = undefined;

/**
 * @member {String} familyName
 */
UserDetailsDTO.prototype['familyName'] = undefined;

/**
 * @member {String} preferredUsername
 */
UserDetailsDTO.prototype['preferredUsername'] = undefined;

/**
 * @member {String} profile
 */
UserDetailsDTO.prototype['profile'] = undefined;

/**
 * @member {String} picture
 */
UserDetailsDTO.prototype['picture'] = undefined;

/**
 * @member {String} website
 */
UserDetailsDTO.prototype['website'] = undefined;

/**
 * @member {String} email
 */
UserDetailsDTO.prototype['email'] = undefined;

/**
 * @member {String} gender
 */
UserDetailsDTO.prototype['gender'] = undefined;

/**
 * @member {Date} birthdate
 */
UserDetailsDTO.prototype['birthdate'] = undefined;

/**
 * @member {String} zoneinfo
 */
UserDetailsDTO.prototype['zoneinfo'] = undefined;

/**
 * @member {String} locale
 */
UserDetailsDTO.prototype['locale'] = undefined;

/**
 * @member {String} phoneNumber
 */
UserDetailsDTO.prototype['phoneNumber'] = undefined;

/**
 * @member {Date} updatedAt
 */
UserDetailsDTO.prototype['updatedAt'] = undefined;

/**
 * @member {String} platform
 */
UserDetailsDTO.prototype['platform'] = undefined;

/**
 * @member {Boolean} enabled
 */
UserDetailsDTO.prototype['enabled'] = undefined;

/**
 * @member {Boolean} locked
 */
UserDetailsDTO.prototype['locked'] = undefined;

/**
 * @member {Date} expiresAt
 */
UserDetailsDTO.prototype['expiresAt'] = undefined;

/**
 * @member {Date} passwordExpiresAt
 */
UserDetailsDTO.prototype['passwordExpiresAt'] = undefined;

/**
 * @member {String} address
 */
UserDetailsDTO.prototype['address'] = undefined;






export default UserDetailsDTO;

