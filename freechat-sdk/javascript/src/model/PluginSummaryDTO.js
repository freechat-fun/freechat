/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AiModelInfoDTO from './AiModelInfoDTO';

/**
 * The PluginSummaryDTO model module.
 * @module model/PluginSummaryDTO
 * @version 0.1.0
 */
class PluginSummaryDTO {
    /**
     * Constructs a new <code>PluginSummaryDTO</code>.
     * Plugin summary information
     * @alias module:model/PluginSummaryDTO
     */
    constructor() { 
        
        PluginSummaryDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PluginSummaryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PluginSummaryDTO} obj Optional instance to populate.
     * @return {module:model/PluginSummaryDTO} The populated <code>PluginSummaryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PluginSummaryDTO();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('pluginId')) {
                obj['pluginId'] = ApiClient.convertToType(data['pluginId'], 'String');
            }
            if (data.hasOwnProperty('gmtCreate')) {
                obj['gmtCreate'] = ApiClient.convertToType(data['gmtCreate'], 'Date');
            }
            if (data.hasOwnProperty('gmtModified')) {
                obj['gmtModified'] = ApiClient.convertToType(data['gmtModified'], 'Date');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('manifestFormat')) {
                obj['manifestFormat'] = ApiClient.convertToType(data['manifestFormat'], 'String');
            }
            if (data.hasOwnProperty('apiFormat')) {
                obj['apiFormat'] = ApiClient.convertToType(data['apiFormat'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('aiModels')) {
                obj['aiModels'] = ApiClient.convertToType(data['aiModels'], [AiModelInfoDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PluginSummaryDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PluginSummaryDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['pluginId'] && !(typeof data['pluginId'] === 'string' || data['pluginId'] instanceof String)) {
            throw new Error("Expected the field `pluginId` to be a primitive type in the JSON string but got " + data['pluginId']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['manifestFormat'] && !(typeof data['manifestFormat'] === 'string' || data['manifestFormat'] instanceof String)) {
            throw new Error("Expected the field `manifestFormat` to be a primitive type in the JSON string but got " + data['manifestFormat']);
        }
        // ensure the json data is a string
        if (data['apiFormat'] && !(typeof data['apiFormat'] === 'string' || data['apiFormat'] instanceof String)) {
            throw new Error("Expected the field `apiFormat` to be a primitive type in the JSON string but got " + data['apiFormat']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['aiModels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aiModels'])) {
                throw new Error("Expected the field `aiModels` to be an array in the JSON data but got " + data['aiModels']);
            }
            // validate the optional field `aiModels` (array)
            for (const item of data['aiModels']) {
                AiModelInfoDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Request identifier
 * @member {String} requestId
 */
PluginSummaryDTO.prototype['requestId'] = undefined;

/**
 * Plugin identifier
 * @member {String} pluginId
 */
PluginSummaryDTO.prototype['pluginId'] = undefined;

/**
 * Creation time
 * @member {Date} gmtCreate
 */
PluginSummaryDTO.prototype['gmtCreate'] = undefined;

/**
 * Modification time
 * @member {Date} gmtModified
 */
PluginSummaryDTO.prototype['gmtModified'] = undefined;

/**
 * Visibility: private, public, public_org, hidden
 * @member {String} visibility
 */
PluginSummaryDTO.prototype['visibility'] = undefined;

/**
 * Plugin name
 * @member {String} name
 */
PluginSummaryDTO.prototype['name'] = undefined;

/**
 * Information of the provider
 * @member {String} provider
 */
PluginSummaryDTO.prototype['provider'] = undefined;

/**
 * Manifest format, currently supported: dash_scope, open_ai
 * @member {String} manifestFormat
 */
PluginSummaryDTO.prototype['manifestFormat'] = undefined;

/**
 * API description format, currently supported: openapi_v3
 * @member {String} apiFormat
 */
PluginSummaryDTO.prototype['apiFormat'] = undefined;

/**
 * Plugin owner
 * @member {String} username
 */
PluginSummaryDTO.prototype['username'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
PluginSummaryDTO.prototype['tags'] = undefined;

/**
 * Supported model set
 * @member {Array.<module:model/AiModelInfoDTO>} aiModels
 */
PluginSummaryDTO.prototype['aiModels'] = undefined;






export default PluginSummaryDTO;

