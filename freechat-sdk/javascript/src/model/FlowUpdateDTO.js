/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FlowUpdateDTO model module.
 * @module model/FlowUpdateDTO
 * @version 0.1.0
 */
class FlowUpdateDTO {
    /**
     * Constructs a new <code>FlowUpdateDTO</code>.
     * Request data for updating flow information
     * @alias module:model/FlowUpdateDTO
     * @param name {String} Flow name
     */
    constructor(name) { 
        
        FlowUpdateDTO.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>FlowUpdateDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlowUpdateDTO} obj Optional instance to populate.
     * @return {module:model/FlowUpdateDTO} The populated <code>FlowUpdateDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlowUpdateDTO();

            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], 'String');
            }
            if (data.hasOwnProperty('example')) {
                obj['example'] = ApiClient.convertToType(data['example'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('aiModels')) {
                obj['aiModels'] = ApiClient.convertToType(data['aiModels'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlowUpdateDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlowUpdateDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlowUpdateDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['config'] && !(typeof data['config'] === 'string' || data['config'] instanceof String)) {
            throw new Error("Expected the field `config` to be a primitive type in the JSON string but got " + data['config']);
        }
        // ensure the json data is a string
        if (data['example'] && !(typeof data['example'] === 'string' || data['example'] instanceof String)) {
            throw new Error("Expected the field `example` to be a primitive type in the JSON string but got " + data['example']);
        }
        // ensure the json data is a string
        if (data['parameters'] && !(typeof data['parameters'] === 'string' || data['parameters'] instanceof String)) {
            throw new Error("Expected the field `parameters` to be a primitive type in the JSON string but got " + data['parameters']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // ensure the json data is a string
        if (data['draft'] && !(typeof data['draft'] === 'string' || data['draft'] instanceof String)) {
            throw new Error("Expected the field `draft` to be a primitive type in the JSON string but got " + data['draft']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aiModels'])) {
            throw new Error("Expected the field `aiModels` to be an array in the JSON data but got " + data['aiModels']);
        }

        return true;
    }


}

FlowUpdateDTO.RequiredProperties = ["name"];

/**
 * Referenced flow
 * @member {String} parentId
 */
FlowUpdateDTO.prototype['parentId'] = undefined;

/**
 * Visibility: private (default), public, public_org, hidden
 * @member {String} visibility
 */
FlowUpdateDTO.prototype['visibility'] = undefined;

/**
 * Flow format, currently supported: langflow
 * @member {String} format
 */
FlowUpdateDTO.prototype['format'] = undefined;

/**
 * Flow name
 * @member {String} name
 */
FlowUpdateDTO.prototype['name'] = undefined;

/**
 * Flow description
 * @member {String} description
 */
FlowUpdateDTO.prototype['description'] = undefined;

/**
 * Flow configuration
 * @member {String} config
 */
FlowUpdateDTO.prototype['config'] = undefined;

/**
 * Flow example
 * @member {String} example
 */
FlowUpdateDTO.prototype['example'] = undefined;

/**
 * Flow parameters, JSON format
 * @member {String} parameters
 */
FlowUpdateDTO.prototype['parameters'] = undefined;

/**
 * Additional information, JSON format
 * @member {String} ext
 */
FlowUpdateDTO.prototype['ext'] = undefined;

/**
 * Draft content
 * @member {String} draft
 */
FlowUpdateDTO.prototype['draft'] = undefined;

/**
 * Tag set
 * @member {Array.<String>} tags
 */
FlowUpdateDTO.prototype['tags'] = undefined;

/**
 * Supported model set, empty means no model limit
 * @member {Array.<String>} aiModels
 */
FlowUpdateDTO.prototype['aiModels'] = undefined;






export default FlowUpdateDTO;

