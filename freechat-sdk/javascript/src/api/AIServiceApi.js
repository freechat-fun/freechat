/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AiApiKeyCreateDTO from '../model/AiApiKeyCreateDTO';
import AiApiKeyInfoDTO from '../model/AiApiKeyInfoDTO';
import AiModelInfoDTO from '../model/AiModelInfoDTO';

/**
* AIService service.
* @module api/AIServiceApi
* @version 0.1.0
*/
export default class AIServiceApi {

    /**
    * Constructs a new AIServiceApi. 
    * @alias module:api/AIServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Model Provider Credential
     * Add a credential for the model service.
     * @param {module:model/AiApiKeyCreateDTO} aiApiKeyCreateDTO Model call credential information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    addAiApiKeyWithHttpInfo(aiApiKeyCreateDTO) {
      let postBody = aiApiKeyCreateDTO;
      // verify the required parameter 'aiApiKeyCreateDTO' is set
      if (aiApiKeyCreateDTO === undefined || aiApiKeyCreateDTO === null) {
        throw new Error("Missing the required parameter 'aiApiKeyCreateDTO' when calling addAiApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/ai/apikey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Model Provider Credential
     * Add a credential for the model service.
     * @param {module:model/AiApiKeyCreateDTO} aiApiKeyCreateDTO Model call credential information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    addAiApiKey(aiApiKeyCreateDTO) {
      return this.addAiApiKeyWithHttpInfo(aiApiKeyCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Credential of Model Provider
     * Delete the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteAiApiKeyWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAiApiKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/ai/apikey/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Credential of Model Provider
     * Delete the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteAiApiKey(id) {
      return this.deleteAiApiKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable Model Provider Credential
     * Disable the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    disableAiApiKeyWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableAiApiKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/ai/apikey/disable/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable Model Provider Credential
     * Disable the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    disableAiApiKey(id) {
      return this.disableAiApiKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable Model Provider Credential
     * Enable the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    enableAiApiKeyWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableAiApiKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/ai/apikey/enable/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Enable Model Provider Credential
     * Enable the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    enableAiApiKey(id) {
      return this.enableAiApiKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get credential of Model Provider
     * Get the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AiApiKeyInfoDTO} and HTTP response
     */
    getAiApiKeyWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAiApiKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AiApiKeyInfoDTO;
      return this.apiClient.callApi(
        '/api/v1/ai/apikey/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get credential of Model Provider
     * Get the credential information of the model provider.
     * @param {Number} id Credential identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AiApiKeyInfoDTO}
     */
    getAiApiKey(id) {
      return this.getAiApiKeyWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Model Information
     * Return specific model information.
     * @param {String} modelId Model identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AiModelInfoDTO} and HTTP response
     */
    getAiModelInfoWithHttpInfo(modelId) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getAiModelInfo");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AiModelInfoDTO;
      return this.apiClient.callApi(
        '/api/v1/ai/model/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Model Information
     * Return specific model information.
     * @param {String} modelId Model identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AiModelInfoDTO}
     */
    getAiModelInfo(modelId) {
      return this.getAiModelInfoWithHttpInfo(modelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Credentials of Model Provider
     * List all credential information of the model provider.
     * @param {String} provider Model provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AiApiKeyInfoDTO>} and HTTP response
     */
    listAiApiKeysWithHttpInfo(provider) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling listAiApiKeys");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AiApiKeyInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/ai/apikeys/{provider}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Credentials of Model Provider
     * List all credential information of the model provider.
     * @param {String} provider Model provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AiApiKeyInfoDTO>}
     */
    listAiApiKeys(provider) {
      return this.listAiApiKeysWithHttpInfo(provider)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @param {Number} pageSize Maximum quantity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AiModelInfoDTO>} and HTTP response
     */
    listAiModelInfoWithHttpInfo(pageSize) {
      let postBody = null;
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listAiModelInfo");
      }

      let pathParams = {
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AiModelInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/ai/models/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @param {Number} pageSize Maximum quantity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AiModelInfoDTO>}
     */
    listAiModelInfo(pageSize) {
      return this.listAiModelInfoWithHttpInfo(pageSize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AiModelInfoDTO>} and HTTP response
     */
    listAiModelInfo1WithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AiModelInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/ai/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AiModelInfoDTO>}
     */
    listAiModelInfo1() {
      return this.listAiModelInfo1WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AiModelInfoDTO>} and HTTP response
     */
    listAiModelInfo2WithHttpInfo(pageSize, pageNum) {
      let postBody = null;
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listAiModelInfo2");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listAiModelInfo2");
      }

      let pathParams = {
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AiModelInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/ai/models/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Models
     * Return model information by page, return the pageNum page, up to pageSize model information.
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AiModelInfoDTO>}
     */
    listAiModelInfo2(pageSize, pageNum) {
      return this.listAiModelInfo2WithHttpInfo(pageSize, pageNum)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
