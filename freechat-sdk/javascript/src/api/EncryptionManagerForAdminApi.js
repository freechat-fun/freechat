/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* EncryptionManagerForAdmin service.
* @module api/EncryptionManagerForAdminApi
* @version 0.1.0
*/
export default class EncryptionManagerForAdminApi {

    /**
    * Constructs a new EncryptionManagerForAdminApi. 
    * @alias module:api/EncryptionManagerForAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Encrypt Text
     * Encrypt a piece of text with the built-in key.
     * @param {String} text Text to be encrypted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    encryptTextWithHttpInfo(text) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling encryptText");
      }

      let pathParams = {
        'text': text
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/admin/encryption/encrypt/{text}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Encrypt Text
     * Encrypt a piece of text with the built-in key.
     * @param {String} text Text to be encrypted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    encryptText(text) {
      return this.encryptTextWithHttpInfo(text)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
