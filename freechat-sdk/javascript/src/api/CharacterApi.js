/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CharacterBackendDTO from '../model/CharacterBackendDTO';
import CharacterBackendDetailsDTO from '../model/CharacterBackendDetailsDTO';
import CharacterCreateDTO from '../model/CharacterCreateDTO';
import CharacterDetailsDTO from '../model/CharacterDetailsDTO';
import CharacterItemForNameDTO from '../model/CharacterItemForNameDTO';
import CharacterQueryDTO from '../model/CharacterQueryDTO';
import CharacterSummaryDTO from '../model/CharacterSummaryDTO';
import CharacterUpdateDTO from '../model/CharacterUpdateDTO';
import ChatContentDTO from '../model/ChatContentDTO';
import ChatCreateDTO from '../model/ChatCreateDTO';
import ChatMessageDTO from '../model/ChatMessageDTO';
import LlmResultDTO from '../model/LlmResultDTO';
import SseEmitter from '../model/SseEmitter';

/**
* Character service.
* @module api/CharacterApi
* @version 0.1.0
*/
export default class CharacterApi {

    /**
    * Constructs a new CharacterApi. 
    * @alias module:api/CharacterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Character Backend
     * Add a backend configuration for a character.
     * @param {String} characterId The characterId to be added a backend
     * @param {module:model/CharacterBackendDTO} characterBackendDTO The character backend to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    addCharacterBackendWithHttpInfo(characterId, characterBackendDTO) {
      let postBody = characterBackendDTO;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling addCharacterBackend");
      }
      // verify the required parameter 'characterBackendDTO' is set
      if (characterBackendDTO === undefined || characterBackendDTO === null) {
        throw new Error("Missing the required parameter 'characterBackendDTO' when calling addCharacterBackend");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/backend/{characterId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Character Backend
     * Add a backend configuration for a character.
     * @param {String} characterId The characterId to be added a backend
     * @param {module:model/CharacterBackendDTO} characterBackendDTO The character backend to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    addCharacterBackend(characterId, characterBackendDTO) {
      return this.addCharacterBackendWithHttpInfo(characterId, characterBackendDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Search Character Details
     * Batch call shortcut for /api/v1/character/details/search.
     * @param {Array.<module:model/CharacterQueryDTO>} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[CharacterDetailsDTO]>} and HTTP response
     */
    batchSearchCharacterDetailsWithHttpInfo(characterQueryDTO) {
      let postBody = characterQueryDTO;
      // verify the required parameter 'characterQueryDTO' is set
      if (characterQueryDTO === undefined || characterQueryDTO === null) {
        throw new Error("Missing the required parameter 'characterQueryDTO' when calling batchSearchCharacterDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[CharacterDetailsDTO]];
      return this.apiClient.callApi(
        '/api/v1/character/batch/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Character Details
     * Batch call shortcut for /api/v1/character/details/search.
     * @param {Array.<module:model/CharacterQueryDTO>} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[CharacterDetailsDTO]>}
     */
    batchSearchCharacterDetails(characterQueryDTO) {
      return this.batchSearchCharacterDetailsWithHttpInfo(characterQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Search Character Summaries
     * Batch call shortcut for /api/v1/character/search.
     * @param {Array.<module:model/CharacterQueryDTO>} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[CharacterSummaryDTO]>} and HTTP response
     */
    batchSearchCharacterSummaryWithHttpInfo(characterQueryDTO) {
      let postBody = characterQueryDTO;
      // verify the required parameter 'characterQueryDTO' is set
      if (characterQueryDTO === undefined || characterQueryDTO === null) {
        throw new Error("Missing the required parameter 'characterQueryDTO' when calling batchSearchCharacterSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[CharacterSummaryDTO]];
      return this.apiClient.callApi(
        '/api/v1/character/batch/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Character Summaries
     * Batch call shortcut for /api/v1/character/search.
     * @param {Array.<module:model/CharacterQueryDTO>} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[CharacterSummaryDTO]>}
     */
    batchSearchCharacterSummary(characterQueryDTO) {
      return this.batchSearchCharacterSummaryWithHttpInfo(characterQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clone Character
     * Enter the characterId, generate a new record, the content is basically the same as the original character, but the following fields are different: - Version number is 1 - Visibility is private - The parent character is the source characterId - The creation time is the current moment. - All statistical indicators are zeroed.  Return the new characterId. 
     * @param {String} characterId The referenced characterId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cloneCharacterWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling cloneCharacter");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/clone/{characterId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clone Character
     * Enter the characterId, generate a new record, the content is basically the same as the original character, but the following fields are different: - Version number is 1 - Visibility is private - The parent character is the source characterId - The creation time is the current moment. - All statistical indicators are zeroed.  Return the new characterId. 
     * @param {String} characterId The referenced characterId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cloneCharacter(characterId) {
      return this.cloneCharacterWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate Number of Characters
     * Calculate the number of characters according to the specified query conditions.
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    countCharactersWithHttpInfo(characterQueryDTO) {
      let postBody = characterQueryDTO;
      // verify the required parameter 'characterQueryDTO' is set
      if (characterQueryDTO === undefined || characterQueryDTO === null) {
        throw new Error("Missing the required parameter 'characterQueryDTO' when calling countCharacters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/character/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Calculate Number of Characters
     * Calculate the number of characters according to the specified query conditions.
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    countCharacters(characterQueryDTO) {
      return this.countCharactersWithHttpInfo(characterQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Character
     * Create a character.
     * @param {module:model/CharacterCreateDTO} characterCreateDTO Information of the character to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createCharacterWithHttpInfo(characterCreateDTO) {
      let postBody = characterCreateDTO;
      // verify the required parameter 'characterCreateDTO' is set
      if (characterCreateDTO === undefined || characterCreateDTO === null) {
        throw new Error("Missing the required parameter 'characterCreateDTO' when calling createCharacter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Character
     * Create a character.
     * @param {module:model/CharacterCreateDTO} characterCreateDTO Information of the character to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createCharacter(characterCreateDTO) {
      return this.createCharacterWithHttpInfo(characterCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Character
     * Delete character. Returns success or failure.
     * @param {String} characterId The characterId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteCharacterWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling deleteCharacter");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/{characterId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Character
     * Delete character. Returns success or failure.
     * @param {String} characterId The characterId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteCharacter(characterId) {
      return this.deleteCharacterWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Chat Session
     * Delete the chat session.
     * @param {String} chatId Chat session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteChatWithHttpInfo(chatId) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling deleteChat");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/chat/{chatId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Chat Session
     * Delete the chat session.
     * @param {String} chatId Chat session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteChat(chatId) {
      return this.deleteChatWithHttpInfo(chatId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Character Details
     * Get character detailed information.
     * @param {String} characterId CharacterId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CharacterDetailsDTO} and HTTP response
     */
    getCharacterDetailsWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharacterDetails");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CharacterDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/character/details/{characterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Character Details
     * Get character detailed information.
     * @param {String} characterId CharacterId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CharacterDetailsDTO}
     */
    getCharacterDetails(characterId) {
      return this.getCharacterDetailsWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Latest Character Id by Name
     * Get latest characterId by character name.
     * @param {String} name Character name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getCharacterLatestIdByNameWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getCharacterLatestIdByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/latest/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Latest Character Id by Name
     * Get latest characterId by character name.
     * @param {String} name Character name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    getCharacterLatestIdByName(name) {
      return this.getCharacterLatestIdByNameWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Character Summary
     * Get character summary information.
     * @param {String} characterId CharacterId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CharacterSummaryDTO} and HTTP response
     */
    getCharacterSummaryWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharacterSummary");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CharacterSummaryDTO;
      return this.apiClient.callApi(
        '/api/v1/character/summary/{characterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Character Summary
     * Get character summary information.
     * @param {String} characterId CharacterId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CharacterSummaryDTO}
     */
    getCharacterSummary(characterId) {
      return this.getCharacterSummaryWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Default Character Backend
     * Get the default backend configuration.
     * @param {String} characterId The characterId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CharacterBackendDetailsDTO} and HTTP response
     */
    getDefaultCharacterBackendWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling getDefaultCharacterBackend");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CharacterBackendDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/character/backend/default/{characterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Default Character Backend
     * Get the default backend configuration.
     * @param {String} characterId The characterId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CharacterBackendDetailsDTO}
     */
    getDefaultCharacterBackend(characterId) {
      return this.getDefaultCharacterBackendWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Character Backend ids
     * List Character Backend identifiers.
     * @param {String} characterId The characterId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listCharacterBackendIdsWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling listCharacterBackendIds");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/character/backends/{characterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Character Backend ids
     * List Character Backend identifiers.
     * @param {String} characterId The characterId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listCharacterBackendIds(characterId) {
      return this.listCharacterBackendIdsWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Versions by Character Name
     * List the versions and corresponding characterIds by character name.
     * @param {String} name Character name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterItemForNameDTO>} and HTTP response
     */
    listCharacterVersionsByNameWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listCharacterVersionsByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CharacterItemForNameDTO];
      return this.apiClient.callApi(
        '/api/v1/character/versions/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Versions by Character Name
     * List the versions and corresponding characterIds by character name.
     * @param {String} name Character name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterItemForNameDTO>}
     */
    listCharacterVersionsByName(name) {
      return this.listCharacterVersionsByNameWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @param {Number} limit Messages limit
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChatMessageDTO>} and HTTP response
     */
    listMessagesWithHttpInfo(chatId, limit) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling listMessages");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listMessages");
      }

      let pathParams = {
        'chatId': chatId,
        'limit': limit
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatMessageDTO];
      return this.apiClient.callApi(
        '/api/v1/character/chat/messages/{chatId}/{limit}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @param {Number} limit Messages limit
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChatMessageDTO>}
     */
    listMessages(chatId, limit) {
      return this.listMessagesWithHttpInfo(chatId, limit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @param {Number} limit Messages limit
     * @param {Number} offset Messages offset (from new to old)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChatMessageDTO>} and HTTP response
     */
    listMessages1WithHttpInfo(chatId, limit, offset) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling listMessages1");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listMessages1");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listMessages1");
      }

      let pathParams = {
        'chatId': chatId,
        'limit': limit,
        'offset': offset
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatMessageDTO];
      return this.apiClient.callApi(
        '/api/v1/character/chat/messages/{chatId}/{limit}/{offset}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @param {Number} limit Messages limit
     * @param {Number} offset Messages offset (from new to old)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChatMessageDTO>}
     */
    listMessages1(chatId, limit, offset) {
      return this.listMessages1WithHttpInfo(chatId, limit, offset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChatMessageDTO>} and HTTP response
     */
    listMessages2WithHttpInfo(chatId) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling listMessages2");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatMessageDTO];
      return this.apiClient.callApi(
        '/api/v1/character/chat/messages/{chatId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Chat Messages
     * List messages of a chat.
     * @param {String} chatId Chat session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChatMessageDTO>}
     */
    listMessages2(chatId) {
      return this.listMessages2WithHttpInfo(chatId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish Character
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} characterId The characterId to be published
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    publishCharacterWithHttpInfo(characterId) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling publishCharacter");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/publish/{characterId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Publish Character
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} characterId The characterId to be published
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    publishCharacter(characterId) {
      return this.publishCharacterWithHttpInfo(characterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish Character
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} characterId The characterId to be published
     * @param {String} visibility Visibility: public | private | ...
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    publishCharacter1WithHttpInfo(characterId, visibility) {
      let postBody = null;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling publishCharacter1");
      }
      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling publishCharacter1");
      }

      let pathParams = {
        'characterId': characterId,
        'visibility': visibility
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/publish/{characterId}/{visibility}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Publish Character
     * Publish character, draft content becomes formal content, version number increases by 1. After successful publication, a new characterId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} characterId The characterId to be published
     * @param {String} visibility Visibility: public | private | ...
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    publishCharacter1(characterId, visibility) {
      return this.publishCharacter1WithHttpInfo(characterId, visibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Character Backend
     * Remove a backend configuration.
     * @param {String} characterBackendId The characterBackendId to be removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    removeCharacterBackendWithHttpInfo(characterBackendId) {
      let postBody = null;
      // verify the required parameter 'characterBackendId' is set
      if (characterBackendId === undefined || characterBackendId === null) {
        throw new Error("Missing the required parameter 'characterBackendId' when calling removeCharacterBackend");
      }

      let pathParams = {
        'characterBackendId': characterBackendId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/backend/{characterBackendId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Character Backend
     * Remove a backend configuration.
     * @param {String} characterBackendId The characterBackendId to be removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    removeCharacterBackend(characterBackendId) {
      return this.removeCharacterBackendWithHttpInfo(characterBackendId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Character Details
     * Same as /api/v1/character/search, but returns detailed information of the character.
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterDetailsDTO>} and HTTP response
     */
    searchCharacterDetailsWithHttpInfo(characterQueryDTO) {
      let postBody = characterQueryDTO;
      // verify the required parameter 'characterQueryDTO' is set
      if (characterQueryDTO === undefined || characterQueryDTO === null) {
        throw new Error("Missing the required parameter 'characterQueryDTO' when calling searchCharacterDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CharacterDetailsDTO];
      return this.apiClient.callApi(
        '/api/v1/character/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Character Details
     * Same as /api/v1/character/search, but returns detailed information of the character.
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterDetailsDTO>}
     */
    searchCharacterDetails(characterQueryDTO) {
      return this.searchCharacterDetailsWithHttpInfo(characterQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Character Summary
     * Search characters: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Tags: exact match (support and, or logic).   - Name: left match.   - Language, exact match.   - General: name, description, profile, chat style, experience, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the character summary content. - Support pagination. 
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterSummaryDTO>} and HTTP response
     */
    searchCharacterSummaryWithHttpInfo(characterQueryDTO) {
      let postBody = characterQueryDTO;
      // verify the required parameter 'characterQueryDTO' is set
      if (characterQueryDTO === undefined || characterQueryDTO === null) {
        throw new Error("Missing the required parameter 'characterQueryDTO' when calling searchCharacterSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CharacterSummaryDTO];
      return this.apiClient.callApi(
        '/api/v1/character/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Character Summary
     * Search characters: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Tags: exact match (support and, or logic).   - Name: left match.   - Language, exact match.   - General: name, description, profile, chat style, experience, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the character summary content. - Support pagination. 
     * @param {module:model/CharacterQueryDTO} characterQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterSummaryDTO>}
     */
    searchCharacterSummary(characterQueryDTO) {
      return this.searchCharacterSummaryWithHttpInfo(characterQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Chat Message
     * Send a chat message to character.
     * @param {String} chatId Chat session identifier
     * @param {module:model/ChatContentDTO} chatContentDTO Chat content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LlmResultDTO} and HTTP response
     */
    sendMessageWithHttpInfo(chatId, chatContentDTO) {
      let postBody = chatContentDTO;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendMessage");
      }
      // verify the required parameter 'chatContentDTO' is set
      if (chatContentDTO === undefined || chatContentDTO === null) {
        throw new Error("Missing the required parameter 'chatContentDTO' when calling sendMessage");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LlmResultDTO;
      return this.apiClient.callApi(
        '/api/v1/character/chat/send/{chatId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Chat Message
     * Send a chat message to character.
     * @param {String} chatId Chat session identifier
     * @param {module:model/ChatContentDTO} chatContentDTO Chat content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LlmResultDTO}
     */
    sendMessage(chatId, chatContentDTO) {
      return this.sendMessageWithHttpInfo(chatId, chatContentDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Default Character Backend
     * Set the default backend configuration.
     * @param {String} characterBackendId The characterBackendId to be set to default
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    setDefaultCharacterBackendWithHttpInfo(characterBackendId) {
      let postBody = null;
      // verify the required parameter 'characterBackendId' is set
      if (characterBackendId === undefined || characterBackendId === null) {
        throw new Error("Missing the required parameter 'characterBackendId' when calling setDefaultCharacterBackend");
      }

      let pathParams = {
        'characterBackendId': characterBackendId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/backend/default/{characterBackendId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Default Character Backend
     * Set the default backend configuration.
     * @param {String} characterBackendId The characterBackendId to be set to default
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    setDefaultCharacterBackend(characterBackendId) {
      return this.setDefaultCharacterBackendWithHttpInfo(characterBackendId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Chat Session
     * Start a chat session.
     * @param {module:model/ChatCreateDTO} chatCreateDTO Parameters for starting a chat session
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    startChatWithHttpInfo(chatCreateDTO) {
      let postBody = chatCreateDTO;
      // verify the required parameter 'chatCreateDTO' is set
      if (chatCreateDTO === undefined || chatCreateDTO === null) {
        throw new Error("Missing the required parameter 'chatCreateDTO' when calling startChat");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/chat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Chat Session
     * Start a chat session.
     * @param {module:model/ChatCreateDTO} chatCreateDTO Parameters for starting a chat session
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    startChat(chatCreateDTO) {
      return this.startChatWithHttpInfo(chatCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Chat Message by Streaming Back
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     * @param {String} chatId Chat session identifier
     * @param {module:model/ChatContentDTO} chatContentDTO Chat content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SseEmitter} and HTTP response
     */
    streamSendMessageWithHttpInfo(chatId, chatContentDTO) {
      let postBody = chatContentDTO;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling streamSendMessage");
      }
      // verify the required parameter 'chatContentDTO' is set
      if (chatContentDTO === undefined || chatContentDTO === null) {
        throw new Error("Missing the required parameter 'chatContentDTO' when calling streamSendMessage");
      }

      let pathParams = {
        'chatId': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/event-stream'];
      let returnType = SseEmitter;
      return this.apiClient.callApi(
        '/api/v1/character/chat/send/stream/{chatId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Chat Message by Streaming Back
     * Refer to /api/v1/chat/send/{chatId}, stream back chunks of the response.
     * @param {String} chatId Chat session identifier
     * @param {module:model/ChatContentDTO} chatContentDTO Chat content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SseEmitter}
     */
    streamSendMessage(chatId, chatContentDTO) {
      return this.streamSendMessageWithHttpInfo(chatId, chatContentDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Character
     * Update character, refer to /api/v1/character/create, required field: characterId. Returns success or failure.
     * @param {String} characterId The characterId to be updated
     * @param {module:model/CharacterUpdateDTO} characterUpdateDTO The character information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updateCharacterWithHttpInfo(characterId, characterUpdateDTO) {
      let postBody = characterUpdateDTO;
      // verify the required parameter 'characterId' is set
      if (characterId === undefined || characterId === null) {
        throw new Error("Missing the required parameter 'characterId' when calling updateCharacter");
      }
      // verify the required parameter 'characterUpdateDTO' is set
      if (characterUpdateDTO === undefined || characterUpdateDTO === null) {
        throw new Error("Missing the required parameter 'characterUpdateDTO' when calling updateCharacter");
      }

      let pathParams = {
        'characterId': characterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/{characterId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Character
     * Update character, refer to /api/v1/character/create, required field: characterId. Returns success or failure.
     * @param {String} characterId The characterId to be updated
     * @param {module:model/CharacterUpdateDTO} characterUpdateDTO The character information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updateCharacter(characterId, characterUpdateDTO) {
      return this.updateCharacterWithHttpInfo(characterId, characterUpdateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Character Backend
     * Update a backend configuration.
     * @param {String} characterBackendId The characterBackendId to be updated
     * @param {module:model/CharacterBackendDTO} characterBackendDTO The character backend configuration to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updateCharacterBackendWithHttpInfo(characterBackendId, characterBackendDTO) {
      let postBody = characterBackendDTO;
      // verify the required parameter 'characterBackendId' is set
      if (characterBackendId === undefined || characterBackendId === null) {
        throw new Error("Missing the required parameter 'characterBackendId' when calling updateCharacterBackend");
      }
      // verify the required parameter 'characterBackendDTO' is set
      if (characterBackendDTO === undefined || characterBackendDTO === null) {
        throw new Error("Missing the required parameter 'characterBackendDTO' when calling updateCharacterBackend");
      }

      let pathParams = {
        'characterBackendId': characterBackendId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/character/backend/{characterBackendId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Character Backend
     * Update a backend configuration.
     * @param {String} characterBackendId The characterBackendId to be updated
     * @param {module:model/CharacterBackendDTO} characterBackendDTO The character backend configuration to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updateCharacterBackend(characterBackendId, characterBackendDTO) {
      return this.updateCharacterBackendWithHttpInfo(characterBackendId, characterBackendDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Character Avatar
     * Upload an avatar of the character.
     * @param {File} file Character avatar
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    uploadCharacterAvatarWithHttpInfo(file) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadCharacterAvatar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Character Avatar
     * Upload an avatar of the character.
     * @param {File} file Character avatar
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    uploadCharacterAvatar(file) {
      return this.uploadCharacterAvatarWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Character Picture
     * Upload a picture of the character.
     * @param {File} file Character picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    uploadCharacterPictureWithHttpInfo(file) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadCharacterPicture");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/character/picture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Character Picture
     * Upload a picture of the character.
     * @param {File} file Character picture
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    uploadCharacterPicture(file) {
      return this.uploadCharacterPictureWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
