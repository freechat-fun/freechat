/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PromptTaskDTO from '../model/PromptTaskDTO';
import PromptTaskDetailsDTO from '../model/PromptTaskDetailsDTO';

/**
* PromptTask service.
* @module api/PromptTaskApi
* @version 0.1.0
*/
export default class PromptTaskApi {

    /**
    * Constructs a new PromptTaskApi. 
    * @alias module:api/PromptTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Prompt Task
     * Add a prompt task.
     * @param {module:model/PromptTaskDTO} promptTaskDTO The prompt task to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createPromptTaskWithHttpInfo(promptTaskDTO) {
      let postBody = promptTaskDTO;
      // verify the required parameter 'promptTaskDTO' is set
      if (promptTaskDTO === undefined || promptTaskDTO === null) {
        throw new Error("Missing the required parameter 'promptTaskDTO' when calling createPromptTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt/task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Prompt Task
     * Add a prompt task.
     * @param {module:model/PromptTaskDTO} promptTaskDTO The prompt task to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createPromptTask(promptTaskDTO) {
      return this.createPromptTaskWithHttpInfo(promptTaskDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Prompt Task
     * Delete a prompt task.
     * @param {String} promptTaskId The promptTaskId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deletePromptTaskWithHttpInfo(promptTaskId) {
      let postBody = null;
      // verify the required parameter 'promptTaskId' is set
      if (promptTaskId === undefined || promptTaskId === null) {
        throw new Error("Missing the required parameter 'promptTaskId' when calling deletePromptTask");
      }

      let pathParams = {
        'promptTaskId': promptTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/prompt/task/{promptTaskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Prompt Task
     * Delete a prompt task.
     * @param {String} promptTaskId The promptTaskId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deletePromptTask(promptTaskId) {
      return this.deletePromptTaskWithHttpInfo(promptTaskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Prompt Task
     * Get the prompt task details.
     * @param {String} promptTaskId The promptTaskId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromptTaskDetailsDTO} and HTTP response
     */
    getPromptTaskWithHttpInfo(promptTaskId) {
      let postBody = null;
      // verify the required parameter 'promptTaskId' is set
      if (promptTaskId === undefined || promptTaskId === null) {
        throw new Error("Missing the required parameter 'promptTaskId' when calling getPromptTask");
      }

      let pathParams = {
        'promptTaskId': promptTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromptTaskDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/prompt/task/{promptTaskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Prompt Task
     * Get the prompt task details.
     * @param {String} promptTaskId The promptTaskId to be queried
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromptTaskDetailsDTO}
     */
    getPromptTask(promptTaskId) {
      return this.getPromptTaskWithHttpInfo(promptTaskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Prompt Task
     * Update a prompt task.
     * @param {String} promptTaskId The promptTaskId to be updated
     * @param {module:model/PromptTaskDTO} promptTaskDTO The prompt task info to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updatePromptTaskWithHttpInfo(promptTaskId, promptTaskDTO) {
      let postBody = promptTaskDTO;
      // verify the required parameter 'promptTaskId' is set
      if (promptTaskId === undefined || promptTaskId === null) {
        throw new Error("Missing the required parameter 'promptTaskId' when calling updatePromptTask");
      }
      // verify the required parameter 'promptTaskDTO' is set
      if (promptTaskDTO === undefined || promptTaskDTO === null) {
        throw new Error("Missing the required parameter 'promptTaskDTO' when calling updatePromptTask");
      }

      let pathParams = {
        'promptTaskId': promptTaskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/prompt/task/{promptTaskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Prompt Task
     * Update a prompt task.
     * @param {String} promptTaskId The promptTaskId to be updated
     * @param {module:model/PromptTaskDTO} promptTaskDTO The prompt task info to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updatePromptTask(promptTaskId, promptTaskDTO) {
      return this.updatePromptTaskWithHttpInfo(promptTaskId, promptTaskDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
