/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LlmResultDTO from '../model/LlmResultDTO';
import PromptAiParamDTO from '../model/PromptAiParamDTO';
import PromptCreateDTO from '../model/PromptCreateDTO';
import PromptDetailsDTO from '../model/PromptDetailsDTO';
import PromptItemForNameDTO from '../model/PromptItemForNameDTO';
import PromptQueryDTO from '../model/PromptQueryDTO';
import PromptRefDTO from '../model/PromptRefDTO';
import PromptSummaryDTO from '../model/PromptSummaryDTO';
import PromptTemplateDTO from '../model/PromptTemplateDTO';
import PromptUpdateDTO from '../model/PromptUpdateDTO';
import SseEmitter from '../model/SseEmitter';

/**
* Prompt service.
* @module api/PromptApi
* @version 0.1.0
*/
export default class PromptApi {

    /**
    * Constructs a new PromptApi. 
    * @alias module:api/PromptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Apply Parameters to Prompt Record
     * Apply parameters to prompt record.
     * @param {module:model/PromptRefDTO} promptRefDTO Prompt record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    applyStringPromptRefWithHttpInfo(promptRefDTO) {
      let postBody = promptRefDTO;
      // verify the required parameter 'promptRefDTO' is set
      if (promptRefDTO === undefined || promptRefDTO === null) {
        throw new Error("Missing the required parameter 'promptRefDTO' when calling applyStringPromptRef");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt/apply/ref', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Parameters to Prompt Record
     * Apply parameters to prompt record.
     * @param {module:model/PromptRefDTO} promptRefDTO Prompt record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    applyStringPromptRef(promptRefDTO) {
      return this.applyStringPromptRefWithHttpInfo(promptRefDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Apply Parameters to String Prompt Template
     * Apply parameters to string type prompt template.
     * @param {module:model/PromptTemplateDTO} promptTemplateDTO String type prompt template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    applyStringPromptTemplateWithHttpInfo(promptTemplateDTO) {
      let postBody = promptTemplateDTO;
      // verify the required parameter 'promptTemplateDTO' is set
      if (promptTemplateDTO === undefined || promptTemplateDTO === null) {
        throw new Error("Missing the required parameter 'promptTemplateDTO' when calling applyStringPromptTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt/apply/string', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Apply Parameters to String Prompt Template
     * Apply parameters to string type prompt template.
     * @param {module:model/PromptTemplateDTO} promptTemplateDTO String type prompt template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    applyStringPromptTemplate(promptTemplateDTO) {
      return this.applyStringPromptTemplateWithHttpInfo(promptTemplateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Search Prompt Details
     * Batch call shortcut for /api/v1/prompt/details/search.
     * @param {Array.<module:model/PromptQueryDTO>} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[PromptDetailsDTO]>} and HTTP response
     */
    batchSearchPromptDetailsWithHttpInfo(promptQueryDTO) {
      let postBody = promptQueryDTO;
      // verify the required parameter 'promptQueryDTO' is set
      if (promptQueryDTO === undefined || promptQueryDTO === null) {
        throw new Error("Missing the required parameter 'promptQueryDTO' when calling batchSearchPromptDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[PromptDetailsDTO]];
      return this.apiClient.callApi(
        '/api/v1/prompt/batch/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Prompt Details
     * Batch call shortcut for /api/v1/prompt/details/search.
     * @param {Array.<module:model/PromptQueryDTO>} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[PromptDetailsDTO]>}
     */
    batchSearchPromptDetails(promptQueryDTO) {
      return this.batchSearchPromptDetailsWithHttpInfo(promptQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Search Prompt Summaries
     * Batch call shortcut for /api/v1/prompt/search.
     * @param {Array.<module:model/PromptQueryDTO>} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[PromptSummaryDTO]>} and HTTP response
     */
    batchSearchPromptSummaryWithHttpInfo(promptQueryDTO) {
      let postBody = promptQueryDTO;
      // verify the required parameter 'promptQueryDTO' is set
      if (promptQueryDTO === undefined || promptQueryDTO === null) {
        throw new Error("Missing the required parameter 'promptQueryDTO' when calling batchSearchPromptSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[PromptSummaryDTO]];
      return this.apiClient.callApi(
        '/api/v1/prompt/batch/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Prompt Summaries
     * Batch call shortcut for /api/v1/prompt/search.
     * @param {Array.<module:model/PromptQueryDTO>} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[PromptSummaryDTO]>}
     */
    batchSearchPromptSummary(promptQueryDTO) {
      return this.batchSearchPromptSummaryWithHttpInfo(promptQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clone Prompt
     * Enter the promptId, generate a new record, the content is basically the same as the original prompt, but the following fields are different: - Version number is 1 - Visibility is private - The parent prompt is the source promptId - The creation time is the current moment. - All statistical indicators are zeroed.  Return the new promptId. 
     * @param {String} promptId The referenced promptId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    clonePromptWithHttpInfo(promptId) {
      let postBody = null;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling clonePrompt");
      }

      let pathParams = {
        'promptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt/clone/{promptId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clone Prompt
     * Enter the promptId, generate a new record, the content is basically the same as the original prompt, but the following fields are different: - Version number is 1 - Visibility is private - The parent prompt is the source promptId - The creation time is the current moment. - All statistical indicators are zeroed.  Return the new promptId. 
     * @param {String} promptId The referenced promptId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    clonePrompt(promptId) {
      return this.clonePromptWithHttpInfo(promptId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Clone Prompts
     * Batch clone multiple prompts. Ensure transactionality, return the promptId list after success.
     * @param {Array.<String>} requestBody List of prompt information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    clonePromptsWithHttpInfo(requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling clonePrompts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/prompt/batch/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Clone Prompts
     * Batch clone multiple prompts. Ensure transactionality, return the promptId list after success.
     * @param {Array.<String>} requestBody List of prompt information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    clonePrompts(requestBody) {
      return this.clonePromptsWithHttpInfo(requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate Number of Prompts
     * Calculate the number of prompts according to the specified query conditions.
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    countPromptsWithHttpInfo(promptQueryDTO) {
      let postBody = promptQueryDTO;
      // verify the required parameter 'promptQueryDTO' is set
      if (promptQueryDTO === undefined || promptQueryDTO === null) {
        throw new Error("Missing the required parameter 'promptQueryDTO' when calling countPrompts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/prompt/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Calculate Number of Prompts
     * Calculate the number of prompts according to the specified query conditions.
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    countPrompts(promptQueryDTO) {
      return this.countPromptsWithHttpInfo(promptQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Prompt
     * Create a prompt, required fields: - Prompt name - Prompt content - Applicable model  Limitations: - Description: 300 characters - Template: 1000 characters - Example: 2000 characters - Tags: 5 - Parameters: 10 
     * @param {module:model/PromptCreateDTO} promptCreateDTO Information of the prompt to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createPromptWithHttpInfo(promptCreateDTO) {
      let postBody = promptCreateDTO;
      // verify the required parameter 'promptCreateDTO' is set
      if (promptCreateDTO === undefined || promptCreateDTO === null) {
        throw new Error("Missing the required parameter 'promptCreateDTO' when calling createPrompt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Prompt
     * Create a prompt, required fields: - Prompt name - Prompt content - Applicable model  Limitations: - Description: 300 characters - Template: 1000 characters - Example: 2000 characters - Tags: 5 - Parameters: 10 
     * @param {module:model/PromptCreateDTO} promptCreateDTO Information of the prompt to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createPrompt(promptCreateDTO) {
      return this.createPromptWithHttpInfo(promptCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Create Prompts
     * Batch create multiple prompts. Ensure transactionality, return the promptId list after success.
     * @param {Array.<module:model/PromptCreateDTO>} promptCreateDTO List of prompt information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    createPromptsWithHttpInfo(promptCreateDTO) {
      let postBody = promptCreateDTO;
      // verify the required parameter 'promptCreateDTO' is set
      if (promptCreateDTO === undefined || promptCreateDTO === null) {
        throw new Error("Missing the required parameter 'promptCreateDTO' when calling createPrompts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/prompt/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Create Prompts
     * Batch create multiple prompts. Ensure transactionality, return the promptId list after success.
     * @param {Array.<module:model/PromptCreateDTO>} promptCreateDTO List of prompt information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    createPrompts(promptCreateDTO) {
      return this.createPromptsWithHttpInfo(promptCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Prompt
     * Delete prompt. Returns success or failure.
     * @param {String} promptId The promptId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deletePromptWithHttpInfo(promptId) {
      let postBody = null;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling deletePrompt");
      }

      let pathParams = {
        'promptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/prompt/{promptId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Prompt
     * Delete prompt. Returns success or failure.
     * @param {String} promptId The promptId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deletePrompt(promptId) {
      return this.deletePromptWithHttpInfo(promptId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Delete Prompts
     * Delete multiple prompts. Ensure transactionality, return the list of successfully deleted promptIds.
     * @param {Array.<String>} requestBody List of promptIds to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    deletePromptsWithHttpInfo(requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deletePrompts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/prompt/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Delete Prompts
     * Delete multiple prompts. Ensure transactionality, return the list of successfully deleted promptIds.
     * @param {Array.<String>} requestBody List of promptIds to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    deletePrompts(requestBody) {
      return this.deletePromptsWithHttpInfo(requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Prompt Details
     * Get prompt detailed information.
     * @param {String} promptId PromptId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromptDetailsDTO} and HTTP response
     */
    getPromptDetailsWithHttpInfo(promptId) {
      let postBody = null;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling getPromptDetails");
      }

      let pathParams = {
        'promptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromptDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/prompt/details/{promptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Prompt Details
     * Get prompt detailed information.
     * @param {String} promptId PromptId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromptDetailsDTO}
     */
    getPromptDetails(promptId) {
      return this.getPromptDetailsWithHttpInfo(promptId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Prompt Summary
     * Get prompt summary information.
     * @param {String} promptId PromptId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromptSummaryDTO} and HTTP response
     */
    getPromptSummaryWithHttpInfo(promptId) {
      let postBody = null;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling getPromptSummary");
      }

      let pathParams = {
        'promptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PromptSummaryDTO;
      return this.apiClient.callApi(
        '/api/v1/prompt/summary/{promptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Prompt Summary
     * Get prompt summary information.
     * @param {String} promptId PromptId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromptSummaryDTO}
     */
    getPromptSummary(promptId) {
      return this.getPromptSummaryWithHttpInfo(promptId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Versions by Prompt Name
     * List the versions and corresponding promptIds by prompt name.
     * @param {String} name Prompt name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptItemForNameDTO>} and HTTP response
     */
    listPromptVersionsByNameWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listPromptVersionsByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PromptItemForNameDTO];
      return this.apiClient.callApi(
        '/api/v1/prompt/versions/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Versions by Prompt Name
     * List the versions and corresponding promptIds by prompt name.
     * @param {String} name Prompt name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptItemForNameDTO>}
     */
    listPromptVersionsByName(name) {
      return this.listPromptVersionsByNameWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish Prompt
     * Publish prompt, draft content becomes formal content, version number increases by 1. After successful publication, a new promptId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} promptId The promptId to be published
     * @param {String} visibility Visibility: public | private | ...
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    publishPromptWithHttpInfo(promptId, visibility) {
      let postBody = null;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling publishPrompt");
      }
      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling publishPrompt");
      }

      let pathParams = {
        'promptId': promptId,
        'visibility': visibility
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/prompt/publish/{promptId}/{visibility}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Publish Prompt
     * Publish prompt, draft content becomes formal content, version number increases by 1. After successful publication, a new promptId will be generated and returned. You need to specify the visibility for publication.
     * @param {String} promptId The promptId to be published
     * @param {String} visibility Visibility: public | private | ...
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    publishPrompt(promptId, visibility) {
      return this.publishPromptWithHttpInfo(promptId, visibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Prompt Details
     * Same as /api/v1/prompt/search, but returns detailed information of the prompt.
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptDetailsDTO>} and HTTP response
     */
    searchPromptDetailsWithHttpInfo(promptQueryDTO) {
      let postBody = promptQueryDTO;
      // verify the required parameter 'promptQueryDTO' is set
      if (promptQueryDTO === undefined || promptQueryDTO === null) {
        throw new Error("Missing the required parameter 'promptQueryDTO' when calling searchPromptDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PromptDetailsDTO];
      return this.apiClient.callApi(
        '/api/v1/prompt/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Prompt Details
     * Same as /api/v1/prompt/search, but returns detailed information of the prompt.
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptDetailsDTO>}
     */
    searchPromptDetails(promptQueryDTO) {
      return this.searchPromptDetailsWithHttpInfo(promptQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Prompt Summary
     * Search prompts: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Type, exact match: string (default) | chat.   - Language, exact match.   - General: name, description, template, example, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the prompt summary content. - Support pagination. 
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptSummaryDTO>} and HTTP response
     */
    searchPromptSummaryWithHttpInfo(promptQueryDTO) {
      let postBody = promptQueryDTO;
      // verify the required parameter 'promptQueryDTO' is set
      if (promptQueryDTO === undefined || promptQueryDTO === null) {
        throw new Error("Missing the required parameter 'promptQueryDTO' when calling searchPromptSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PromptSummaryDTO];
      return this.apiClient.callApi(
        '/api/v1/prompt/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Prompt Summary
     * Search prompts: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Type, exact match: string (default) | chat.   - Language, exact match.   - General: name, description, template, example, fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the prompt summary content. - Support pagination. 
     * @param {module:model/PromptQueryDTO} promptQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptSummaryDTO>}
     */
    searchPromptSummary(promptQueryDTO) {
      return this.searchPromptSummaryWithHttpInfo(promptQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Prompt
     * Send the prompt to the AI service. Note that if the embedding model is called, the return is an embedding array, placed in the details field of the result; the original text is in the text field of the result.
     * @param {module:model/PromptAiParamDTO} promptAiParamDTO Call parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LlmResultDTO} and HTTP response
     */
    sendPromptWithHttpInfo(promptAiParamDTO) {
      let postBody = promptAiParamDTO;
      // verify the required parameter 'promptAiParamDTO' is set
      if (promptAiParamDTO === undefined || promptAiParamDTO === null) {
        throw new Error("Missing the required parameter 'promptAiParamDTO' when calling sendPrompt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LlmResultDTO;
      return this.apiClient.callApi(
        '/api/v1/prompt/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Prompt
     * Send the prompt to the AI service. Note that if the embedding model is called, the return is an embedding array, placed in the details field of the result; the original text is in the text field of the result.
     * @param {module:model/PromptAiParamDTO} promptAiParamDTO Call parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LlmResultDTO}
     */
    sendPrompt(promptAiParamDTO) {
      return this.sendPromptWithHttpInfo(promptAiParamDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Prompt by Streaming Back
     * Refer to /api/v1/prompt/send, stream back chunks of the response.
     * @param {module:model/PromptAiParamDTO} promptAiParamDTO Call parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SseEmitter} and HTTP response
     */
    streamSendPromptWithHttpInfo(promptAiParamDTO) {
      let postBody = promptAiParamDTO;
      // verify the required parameter 'promptAiParamDTO' is set
      if (promptAiParamDTO === undefined || promptAiParamDTO === null) {
        throw new Error("Missing the required parameter 'promptAiParamDTO' when calling streamSendPrompt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/event-stream'];
      let returnType = SseEmitter;
      return this.apiClient.callApi(
        '/api/v1/prompt/send/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Prompt by Streaming Back
     * Refer to /api/v1/prompt/send, stream back chunks of the response.
     * @param {module:model/PromptAiParamDTO} promptAiParamDTO Call parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SseEmitter}
     */
    streamSendPrompt(promptAiParamDTO) {
      return this.streamSendPromptWithHttpInfo(promptAiParamDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Prompt
     * Update prompt, refer to /api/v1/prompt/create, required field: promptId. Returns success or failure.
     * @param {String} promptId The promptId to be updated
     * @param {module:model/PromptUpdateDTO} promptUpdateDTO The prompt information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updatePromptWithHttpInfo(promptId, promptUpdateDTO) {
      let postBody = promptUpdateDTO;
      // verify the required parameter 'promptId' is set
      if (promptId === undefined || promptId === null) {
        throw new Error("Missing the required parameter 'promptId' when calling updatePrompt");
      }
      // verify the required parameter 'promptUpdateDTO' is set
      if (promptUpdateDTO === undefined || promptUpdateDTO === null) {
        throw new Error("Missing the required parameter 'promptUpdateDTO' when calling updatePrompt");
      }

      let pathParams = {
        'promptId': promptId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/prompt/{promptId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Prompt
     * Update prompt, refer to /api/v1/prompt/create, required field: promptId. Returns success or failure.
     * @param {String} promptId The promptId to be updated
     * @param {module:model/PromptUpdateDTO} promptUpdateDTO The prompt information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updatePrompt(promptId, promptUpdateDTO) {
      return this.updatePromptWithHttpInfo(promptId, promptUpdateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
