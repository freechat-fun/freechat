/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppMetaDTO from '../model/AppMetaDTO';
import LlmResultDTO from '../model/LlmResultDTO';
import OpenAiParamDTO from '../model/OpenAiParamDTO';
import QwenParamDTO from '../model/QwenParamDTO';

/**
* AppMetaForAdmin service.
* @module api/AppMetaForAdminApi
* @version 0.1.0
*/
export default class AppMetaForAdminApi {

    /**
    * Constructs a new AppMetaForAdminApi. 
    * @alias module:api/AppMetaForAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Expose DTO definitions
     * This method does nothing.
     * @param {module:model/OpenAiParamDTO} openAiParam 
     * @param {module:model/QwenParamDTO} qwenParam 
     * @param {module:model/LlmResultDTO} aiForPromptResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exposeWithHttpInfo(openAiParam, qwenParam, aiForPromptResult) {
      let postBody = null;
      // verify the required parameter 'openAiParam' is set
      if (openAiParam === undefined || openAiParam === null) {
        throw new Error("Missing the required parameter 'openAiParam' when calling expose");
      }
      // verify the required parameter 'qwenParam' is set
      if (qwenParam === undefined || qwenParam === null) {
        throw new Error("Missing the required parameter 'qwenParam' when calling expose");
      }
      // verify the required parameter 'aiForPromptResult' is set
      if (aiForPromptResult === undefined || aiForPromptResult === null) {
        throw new Error("Missing the required parameter 'aiForPromptResult' when calling expose");
      }

      let pathParams = {
      };
      let queryParams = {
        'openAiParam': openAiParam,
        'qwenParam': qwenParam,
        'aiForPromptResult': aiForPromptResult
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/admin/app/expose', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Expose DTO definitions
     * This method does nothing.
     * @param {module:model/OpenAiParamDTO} openAiParam 
     * @param {module:model/QwenParamDTO} qwenParam 
     * @param {module:model/LlmResultDTO} aiForPromptResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    expose(openAiParam, qwenParam, aiForPromptResult) {
      return this.exposeWithHttpInfo(openAiParam, qwenParam, aiForPromptResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application Information
     * Get application information to accurately locate the corresponding project version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppMetaDTO} and HTTP response
     */
    getAppMetaWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppMetaDTO;
      return this.apiClient.callApi(
        '/api/v1/admin/app/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Application Information
     * Get application information to accurately locate the corresponding project version.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppMetaDTO}
     */
    getAppMeta() {
      return this.getAppMetaWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
