/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PluginCreateDTO from '../model/PluginCreateDTO';
import PluginDetailsDTO from '../model/PluginDetailsDTO';
import PluginQueryDTO from '../model/PluginQueryDTO';
import PluginSummaryDTO from '../model/PluginSummaryDTO';
import PluginUpdateDTO from '../model/PluginUpdateDTO';

/**
* Plugin service.
* @module api/PluginApi
* @version 0.1.0
*/
export default class PluginApi {

    /**
    * Constructs a new PluginApi. 
    * @alias module:api/PluginApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Batch Search Plugin Details
     * Batch call shortcut for /api/v1/plugin/details/search.
     * @param {Array.<module:model/PluginQueryDTO>} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[PluginDetailsDTO]>} and HTTP response
     */
    batchSearchPluginDetailsWithHttpInfo(pluginQueryDTO) {
      let postBody = pluginQueryDTO;
      // verify the required parameter 'pluginQueryDTO' is set
      if (pluginQueryDTO === undefined || pluginQueryDTO === null) {
        throw new Error("Missing the required parameter 'pluginQueryDTO' when calling batchSearchPluginDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[PluginDetailsDTO]];
      return this.apiClient.callApi(
        '/api/v1/plugin/batch/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Plugin Details
     * Batch call shortcut for /api/v1/plugin/details/search.
     * @param {Array.<module:model/PluginQueryDTO>} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[PluginDetailsDTO]>}
     */
    batchSearchPluginDetails(pluginQueryDTO) {
      return this.batchSearchPluginDetailsWithHttpInfo(pluginQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Search Plugin Summaries
     * Batch call shortcut for /api/v1/plugin/search.
     * @param {Array.<module:model/PluginQueryDTO>} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<[PluginSummaryDTO]>} and HTTP response
     */
    batchSearchPluginSummaryWithHttpInfo(pluginQueryDTO) {
      let postBody = pluginQueryDTO;
      // verify the required parameter 'pluginQueryDTO' is set
      if (pluginQueryDTO === undefined || pluginQueryDTO === null) {
        throw new Error("Missing the required parameter 'pluginQueryDTO' when calling batchSearchPluginSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [[PluginSummaryDTO]];
      return this.apiClient.callApi(
        '/api/v1/plugin/batch/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Search Plugin Summaries
     * Batch call shortcut for /api/v1/plugin/search.
     * @param {Array.<module:model/PluginQueryDTO>} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<[PluginSummaryDTO]>}
     */
    batchSearchPluginSummary(pluginQueryDTO) {
      return this.batchSearchPluginSummaryWithHttpInfo(pluginQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Calculate Number of Plugins
     * Calculate the number of plugins according to the specified query conditions.
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    countPluginsWithHttpInfo(pluginQueryDTO) {
      let postBody = pluginQueryDTO;
      // verify the required parameter 'pluginQueryDTO' is set
      if (pluginQueryDTO === undefined || pluginQueryDTO === null) {
        throw new Error("Missing the required parameter 'pluginQueryDTO' when calling countPlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/plugin/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Calculate Number of Plugins
     * Calculate the number of plugins according to the specified query conditions.
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    countPlugins(pluginQueryDTO) {
      return this.countPluginsWithHttpInfo(pluginQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Plugin
     * Create a plugin, required fields: - Plugin name - Plugin manifestInfo (URL or JSON) - Plugin apiInfo (URL or JSON)  Limitations: - Name: 100 characters - Example: 2000 characters - Tags: 5 
     * @param {module:model/PluginCreateDTO} pluginCreateDTO Information of the plugin to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createPluginWithHttpInfo(pluginCreateDTO) {
      let postBody = pluginCreateDTO;
      // verify the required parameter 'pluginCreateDTO' is set
      if (pluginCreateDTO === undefined || pluginCreateDTO === null) {
        throw new Error("Missing the required parameter 'pluginCreateDTO' when calling createPlugin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/plugin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Plugin
     * Create a plugin, required fields: - Plugin name - Plugin manifestInfo (URL or JSON) - Plugin apiInfo (URL or JSON)  Limitations: - Name: 100 characters - Example: 2000 characters - Tags: 5 
     * @param {module:model/PluginCreateDTO} pluginCreateDTO Information of the plugin to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createPlugin(pluginCreateDTO) {
      return this.createPluginWithHttpInfo(pluginCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Create Plugins
     * Batch create multiple plugins. Ensure transactionality, return the pluginId list after success.
     * @param {Array.<module:model/PluginCreateDTO>} pluginCreateDTO List of plugin information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    createPluginsWithHttpInfo(pluginCreateDTO) {
      let postBody = pluginCreateDTO;
      // verify the required parameter 'pluginCreateDTO' is set
      if (pluginCreateDTO === undefined || pluginCreateDTO === null) {
        throw new Error("Missing the required parameter 'pluginCreateDTO' when calling createPlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/plugin/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Create Plugins
     * Batch create multiple plugins. Ensure transactionality, return the pluginId list after success.
     * @param {Array.<module:model/PluginCreateDTO>} pluginCreateDTO List of plugin information to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    createPlugins(pluginCreateDTO) {
      return this.createPluginsWithHttpInfo(pluginCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Plugin
     * Delete plugin. Returns success or failure.
     * @param {String} pluginId The pluginId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deletePluginWithHttpInfo(pluginId) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling deletePlugin");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/plugin/{pluginId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Plugin
     * Delete plugin. Returns success or failure.
     * @param {String} pluginId The pluginId to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deletePlugin(pluginId) {
      return this.deletePluginWithHttpInfo(pluginId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Batch Delete Plugins
     * Delete multiple plugins. Ensure transactionality, return the list of successfully deleted pluginIds.
     * @param {Array.<String>} requestBody List of pluginIds to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    deletePluginsWithHttpInfo(requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deletePlugins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/plugin/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Batch Delete Plugins
     * Delete multiple plugins. Ensure transactionality, return the list of successfully deleted pluginIds.
     * @param {Array.<String>} requestBody List of pluginIds to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    deletePlugins(requestBody) {
      return this.deletePluginsWithHttpInfo(requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Plugin Details
     * Get plugin detailed information.
     * @param {String} pluginId PluginId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PluginDetailsDTO} and HTTP response
     */
    getPluginDetailsWithHttpInfo(pluginId) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling getPluginDetails");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PluginDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/plugin/details/{pluginId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Plugin Details
     * Get plugin detailed information.
     * @param {String} pluginId PluginId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PluginDetailsDTO}
     */
    getPluginDetails(pluginId) {
      return this.getPluginDetailsWithHttpInfo(pluginId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Plugin Summary
     * Get plugin summary information.
     * @param {String} pluginId PluginId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PluginSummaryDTO} and HTTP response
     */
    getPluginSummaryWithHttpInfo(pluginId) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling getPluginSummary");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PluginSummaryDTO;
      return this.apiClient.callApi(
        '/api/v1/plugin/summary/{pluginId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Plugin Summary
     * Get plugin summary information.
     * @param {String} pluginId PluginId to be obtained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PluginSummaryDTO}
     */
    getPluginSummary(pluginId) {
      return this.getPluginSummaryWithHttpInfo(pluginId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Refresh Plugin Information
     * For online manifest, api-docs information provided at the time of entry, this interface can immediately refresh the information in the system cache (default cache time is 1 hour). Generally, there is no need to call, unless you know that the corresponding plugin platform has just updated the interface, and the business side wants to get the latest information immediately, then call this interface to delete the system cache.
     * @param {String} pluginId The pluginId to be fetched
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    refreshPluginInfoWithHttpInfo(pluginId) {
      let postBody = null;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling refreshPluginInfo");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/plugin/refresh/{pluginId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Refresh Plugin Information
     * For online manifest, api-docs information provided at the time of entry, this interface can immediately refresh the information in the system cache (default cache time is 1 hour). Generally, there is no need to call, unless you know that the corresponding plugin platform has just updated the interface, and the business side wants to get the latest information immediately, then call this interface to delete the system cache.
     * @param {String} pluginId The pluginId to be fetched
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    refreshPluginInfo(pluginId) {
      return this.refreshPluginInfoWithHttpInfo(pluginId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Plugin Details
     * Same as /api/v1/plugin/search, but returns detailed information of the plugin.
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginDetailsDTO>} and HTTP response
     */
    searchPluginDetailsWithHttpInfo(pluginQueryDTO) {
      let postBody = pluginQueryDTO;
      // verify the required parameter 'pluginQueryDTO' is set
      if (pluginQueryDTO === undefined || pluginQueryDTO === null) {
        throw new Error("Missing the required parameter 'pluginQueryDTO' when calling searchPluginDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PluginDetailsDTO];
      return this.apiClient.callApi(
        '/api/v1/plugin/details/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Plugin Details
     * Same as /api/v1/plugin/search, but returns detailed information of the plugin.
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginDetailsDTO>}
     */
    searchPluginDetails(pluginQueryDTO) {
      return this.searchPluginDetailsWithHttpInfo(pluginQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Plugin Summary
     * Search plugins: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Plugin information format: currently supported: dash_scope, open_ai.   - Interface information format: currently supported: openapi_v3.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Provider: left match.   - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the plugin summary content. - Support pagination. 
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginSummaryDTO>} and HTTP response
     */
    searchPluginSummaryWithHttpInfo(pluginQueryDTO) {
      let postBody = pluginQueryDTO;
      // verify the required parameter 'pluginQueryDTO' is set
      if (pluginQueryDTO === undefined || pluginQueryDTO === null) {
        throw new Error("Missing the required parameter 'pluginQueryDTO' when calling searchPluginSummary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PluginSummaryDTO];
      return this.apiClient.callApi(
        '/api/v1/plugin/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Plugin Summary
     * Search plugins: - Specifiable query fields, and relationship:   - Scope: private, public_org or public. Private can only search this account.   - Username: exact match, only valid when searching public, public_org. If not specified, search all users.   - Plugin information format: currently supported: dash_scope, open_ai.   - Interface information format: currently supported: openapi_v3.   - Tags: exact match (support and, or logic).   - Model type: exact match (support and, or logic).   - Name: left match.   - Provider: left match.   - General: name, provider information, manifest (real-time pull mode is not currently supported), fuzzy match, one hit is enough; public scope + all user's general search does not guarantee timeliness. - A certain sorting rule can be specified, such as view count, reference count, rating, time, descending or ascending. - The search result is the plugin summary content. - Support pagination. 
     * @param {module:model/PluginQueryDTO} pluginQueryDTO Query conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginSummaryDTO>}
     */
    searchPluginSummary(pluginQueryDTO) {
      return this.searchPluginSummaryWithHttpInfo(pluginQueryDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Plugin
     * Update plugin, refer to /api/v1/plugin/create, required field: pluginId. Returns success or failure.
     * @param {String} pluginId The pluginId to be updated
     * @param {module:model/PluginUpdateDTO} pluginUpdateDTO The plugin information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updatePluginWithHttpInfo(pluginId, pluginUpdateDTO) {
      let postBody = pluginUpdateDTO;
      // verify the required parameter 'pluginId' is set
      if (pluginId === undefined || pluginId === null) {
        throw new Error("Missing the required parameter 'pluginId' when calling updatePlugin");
      }
      // verify the required parameter 'pluginUpdateDTO' is set
      if (pluginUpdateDTO === undefined || pluginUpdateDTO === null) {
        throw new Error("Missing the required parameter 'pluginUpdateDTO' when calling updatePlugin");
      }

      let pathParams = {
        'pluginId': pluginId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/plugin/{pluginId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Plugin
     * Update plugin, refer to /api/v1/plugin/create, required field: pluginId. Returns success or failure.
     * @param {String} pluginId The pluginId to be updated
     * @param {module:model/PluginUpdateDTO} pluginUpdateDTO The plugin information to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updatePlugin(pluginId, pluginUpdateDTO) {
      return this.updatePluginWithHttpInfo(pluginId, pluginUpdateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
