/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CharacterSummaryStatsDTO from '../model/CharacterSummaryStatsDTO';
import FlowSummaryStatsDTO from '../model/FlowSummaryStatsDTO';
import InteractiveStatsDTO from '../model/InteractiveStatsDTO';
import PluginSummaryStatsDTO from '../model/PluginSummaryStatsDTO';
import PromptSummaryStatsDTO from '../model/PromptSummaryStatsDTO';

/**
* InteractiveStatistics service.
* @module api/InteractiveStatisticsApi
* @version 0.1.0
*/
export default class InteractiveStatisticsApi {

    /**
    * Constructs a new InteractiveStatisticsApi. 
    * @alias module:api/InteractiveStatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Statistics
     * Add the statistics of the corresponding metrics of the corresponding resources. The increment can be negative. Return the latest statistics.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} delta Delta in statistical value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    addStatisticWithHttpInfo(infoType, infoId, statsType, delta) {
      let postBody = null;
      // verify the required parameter 'infoType' is set
      if (infoType === undefined || infoType === null) {
        throw new Error("Missing the required parameter 'infoType' when calling addStatistic");
      }
      // verify the required parameter 'infoId' is set
      if (infoId === undefined || infoId === null) {
        throw new Error("Missing the required parameter 'infoId' when calling addStatistic");
      }
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling addStatistic");
      }
      // verify the required parameter 'delta' is set
      if (delta === undefined || delta === null) {
        throw new Error("Missing the required parameter 'delta' when calling addStatistic");
      }

      let pathParams = {
        'infoType': infoType,
        'infoId': infoId,
        'statsType': statsType,
        'delta': delta
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/stats/{infoType}/{infoId}/{statsType}/{delta}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Statistics
     * Add the statistics of the corresponding metrics of the corresponding resources. The increment can be negative. Return the latest statistics.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} delta Delta in statistical value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    addStatistic(infoType, infoId, statsType, delta) {
      return this.addStatisticWithHttpInfo(infoType, infoId, statsType, delta)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Score for Resource
     * Get the current user's score for the corresponding resource.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getScoreWithHttpInfo(infoType, infoId) {
      let postBody = null;
      // verify the required parameter 'infoType' is set
      if (infoType === undefined || infoType === null) {
        throw new Error("Missing the required parameter 'infoType' when calling getScore");
      }
      // verify the required parameter 'infoId' is set
      if (infoId === undefined || infoId === null) {
        throw new Error("Missing the required parameter 'infoId' when calling getScore");
      }

      let pathParams = {
        'infoType': infoType,
        'infoId': infoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/score/{infoType}/{infoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Score for Resource
     * Get the current user's score for the corresponding resource.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getScore(infoType, infoId) {
      return this.getScoreWithHttpInfo(infoType, infoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Statistics
     * Get the statistics of the corresponding metrics of the corresponding resources.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getStatisticWithHttpInfo(infoType, infoId, statsType) {
      let postBody = null;
      // verify the required parameter 'infoType' is set
      if (infoType === undefined || infoType === null) {
        throw new Error("Missing the required parameter 'infoType' when calling getStatistic");
      }
      // verify the required parameter 'infoId' is set
      if (infoId === undefined || infoId === null) {
        throw new Error("Missing the required parameter 'infoId' when calling getStatistic");
      }
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling getStatistic");
      }

      let pathParams = {
        'infoType': infoType,
        'infoId': infoId,
        'statsType': statsType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/stats/{infoType}/{infoId}/{statsType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Statistics
     * Get the statistics of the corresponding metrics of the corresponding resources.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getStatistic(infoType, infoId, statsType) {
      return this.getStatisticWithHttpInfo(infoType, infoId, statsType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Statistics
     * Get all statistics of the corresponding resources.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InteractiveStatsDTO} and HTTP response
     */
    getStatisticsWithHttpInfo(infoType, infoId) {
      let postBody = null;
      // verify the required parameter 'infoType' is set
      if (infoType === undefined || infoType === null) {
        throw new Error("Missing the required parameter 'infoType' when calling getStatistics");
      }
      // verify the required parameter 'infoId' is set
      if (infoId === undefined || infoId === null) {
        throw new Error("Missing the required parameter 'infoId' when calling getStatistics");
      }

      let pathParams = {
        'infoType': infoType,
        'infoId': infoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractiveStatsDTO;
      return this.apiClient.callApi(
        '/api/v1/stats/{infoType}/{infoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Statistics
     * Get all statistics of the corresponding resources.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InteractiveStatsDTO}
     */
    getStatistics(infoType, infoId) {
      return this.getStatisticsWithHttpInfo(infoType, infoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Increase Statistics
     * Increase the statistics of the corresponding metrics of the corresponding resources by one. Return the latest statistics.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    increaseStatisticWithHttpInfo(infoType, infoId, statsType) {
      let postBody = null;
      // verify the required parameter 'infoType' is set
      if (infoType === undefined || infoType === null) {
        throw new Error("Missing the required parameter 'infoType' when calling increaseStatistic");
      }
      // verify the required parameter 'infoId' is set
      if (infoId === undefined || infoId === null) {
        throw new Error("Missing the required parameter 'infoId' when calling increaseStatistic");
      }
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling increaseStatistic");
      }

      let pathParams = {
        'infoType': infoType,
        'infoId': infoId,
        'statsType': statsType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/stats/{infoType}/{infoId}/{statsType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Increase Statistics
     * Increase the statistics of the corresponding metrics of the corresponding resources by one. Return the latest statistics.
     * @param {String} infoType Resource type: prompt | flow | plugin
     * @param {String} infoId Unique resource identifier
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    increaseStatistic(infoType, infoId, statsType) {
      return this.increaseStatisticWithHttpInfo(infoType, infoId, statsType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterSummaryStatsDTO>} and HTTP response
     */
    listCharactersByStatisticWithHttpInfo(statsType, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listCharactersByStatistic");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listCharactersByStatistic");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CharacterSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/characters/by/{statsType}/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterSummaryStatsDTO>}
     */
    listCharactersByStatistic(statsType, pageSize, opts) {
      return this.listCharactersByStatisticWithHttpInfo(statsType, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterSummaryStatsDTO>} and HTTP response
     */
    listCharactersByStatistic1WithHttpInfo(statsType, pageSize, pageNum, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listCharactersByStatistic1");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listCharactersByStatistic1");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listCharactersByStatistic1");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CharacterSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/characters/by/{statsType}/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterSummaryStatsDTO>}
     */
    listCharactersByStatistic1(statsType, pageSize, pageNum, opts) {
      return this.listCharactersByStatistic1WithHttpInfo(statsType, pageSize, pageNum, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CharacterSummaryStatsDTO>} and HTTP response
     */
    listCharactersByStatistic2WithHttpInfo(statsType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listCharactersByStatistic2");
      }

      let pathParams = {
        'statsType': statsType
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CharacterSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/characters/by/{statsType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Characters by Statistics
     * List characters based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CharacterSummaryStatsDTO>}
     */
    listCharactersByStatistic2(statsType, opts) {
      return this.listCharactersByStatistic2WithHttpInfo(statsType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FlowSummaryStatsDTO>} and HTTP response
     */
    listFlowsByStatisticWithHttpInfo(statsType, pageSize, pageNum, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listFlowsByStatistic");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listFlowsByStatistic");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listFlowsByStatistic");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlowSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/flows/by/{statsType}/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FlowSummaryStatsDTO>}
     */
    listFlowsByStatistic(statsType, pageSize, pageNum, opts) {
      return this.listFlowsByStatisticWithHttpInfo(statsType, pageSize, pageNum, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FlowSummaryStatsDTO>} and HTTP response
     */
    listFlowsByStatistic1WithHttpInfo(statsType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listFlowsByStatistic1");
      }

      let pathParams = {
        'statsType': statsType
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlowSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/flows/by/{statsType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FlowSummaryStatsDTO>}
     */
    listFlowsByStatistic1(statsType, opts) {
      return this.listFlowsByStatistic1WithHttpInfo(statsType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FlowSummaryStatsDTO>} and HTTP response
     */
    listFlowsByStatistic2WithHttpInfo(statsType, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listFlowsByStatistic2");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listFlowsByStatistic2");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlowSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/flows/by/{statsType}/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Flows by Statistics
     * List flows based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FlowSummaryStatsDTO>}
     */
    listFlowsByStatistic2(statsType, pageSize, opts) {
      return this.listFlowsByStatistic2WithHttpInfo(statsType, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginSummaryStatsDTO>} and HTTP response
     */
    listPluginsByStatisticWithHttpInfo(statsType, pageSize, pageNum, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPluginsByStatistic");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listPluginsByStatistic");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listPluginsByStatistic");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PluginSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/plugins/by/{statsType}/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginSummaryStatsDTO>}
     */
    listPluginsByStatistic(statsType, pageSize, pageNum, opts) {
      return this.listPluginsByStatisticWithHttpInfo(statsType, pageSize, pageNum, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginSummaryStatsDTO>} and HTTP response
     */
    listPluginsByStatistic1WithHttpInfo(statsType, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPluginsByStatistic1");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listPluginsByStatistic1");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PluginSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/plugins/by/{statsType}/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginSummaryStatsDTO>}
     */
    listPluginsByStatistic1(statsType, pageSize, opts) {
      return this.listPluginsByStatistic1WithHttpInfo(statsType, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PluginSummaryStatsDTO>} and HTTP response
     */
    listPluginsByStatistic2WithHttpInfo(statsType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPluginsByStatistic2");
      }

      let pathParams = {
        'statsType': statsType
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PluginSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/plugins/by/{statsType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Plugins by Statistics
     * List plugins based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PluginSummaryStatsDTO>}
     */
    listPluginsByStatistic2(statsType, opts) {
      return this.listPluginsByStatistic2WithHttpInfo(statsType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptSummaryStatsDTO>} and HTTP response
     */
    listPromptsByStatisticWithHttpInfo(statsType, pageSize, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPromptsByStatistic");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listPromptsByStatistic");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PromptSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/prompts/by/{statsType}/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptSummaryStatsDTO>}
     */
    listPromptsByStatistic(statsType, pageSize, opts) {
      return this.listPromptsByStatisticWithHttpInfo(statsType, pageSize, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptSummaryStatsDTO>} and HTTP response
     */
    listPromptsByStatistic1WithHttpInfo(statsType, pageSize, pageNum, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPromptsByStatistic1");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listPromptsByStatistic1");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listPromptsByStatistic1");
      }

      let pathParams = {
        'statsType': statsType,
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PromptSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/prompts/by/{statsType}/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptSummaryStatsDTO>}
     */
    listPromptsByStatistic1(statsType, pageSize, pageNum, opts) {
      return this.listPromptsByStatistic1WithHttpInfo(statsType, pageSize, pageNum, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} [asc] Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PromptSummaryStatsDTO>} and HTTP response
     */
    listPromptsByStatistic2WithHttpInfo(statsType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statsType' is set
      if (statsType === undefined || statsType === null) {
        throw new Error("Missing the required parameter 'statsType' when calling listPromptsByStatistic2");
      }

      let pathParams = {
        'statsType': statsType
      };
      let queryParams = {
        'asc': opts['asc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PromptSummaryStatsDTO];
      return this.apiClient.callApi(
        '/api/v1/stats/prompts/by/{statsType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Prompts by Statistics
     * List prompts based on statistics, including interactive statistical data.
     * @param {String} statsType Statistics type: view_count | refer_count | recommend_count | score
     * @param {Object} opts Optional parameters
     * @param {String} opts.asc Default is descending order, set asc=1 for ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PromptSummaryStatsDTO>}
     */
    listPromptsByStatistic2(statsType, opts) {
      return this.listPromptsByStatistic2WithHttpInfo(statsType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
