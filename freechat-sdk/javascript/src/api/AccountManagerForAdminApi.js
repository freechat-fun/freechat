/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserBasicInfoDTO from '../model/UserBasicInfoDTO';
import UserDetailsDTO from '../model/UserDetailsDTO';
import UserFullDetailsDTO from '../model/UserFullDetailsDTO';

/**
* AccountManagerForAdmin service.
* @module api/AccountManagerForAdminApi
* @version 0.1.0
*/
export default class AccountManagerForAdminApi {

    /**
    * Constructs a new AccountManagerForAdminApi. 
    * @alias module:api/AccountManagerForAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create API Token for User.
     * Create an API Token for a specified user, valid for duration seconds.
     * @param {String} username Username
     * @param {Number} duration Validity period (seconds)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createTokenForUserWithHttpInfo(username, duration) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createTokenForUser");
      }
      // verify the required parameter 'duration' is set
      if (duration === undefined || duration === null) {
        throw new Error("Missing the required parameter 'duration' when calling createTokenForUser");
      }

      let pathParams = {
        'username': username,
        'duration': duration
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/admin/token/{username}/{duration}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create API Token for User.
     * Create an API Token for a specified user, valid for duration seconds.
     * @param {String} username Username
     * @param {Number} duration Validity period (seconds)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createTokenForUser(username, duration) {
      return this.createTokenForUserWithHttpInfo(username, duration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create User
     * Create user.
     * @param {module:model/UserFullDetailsDTO} userFullDetailsDTO User information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    createUserWithHttpInfo(userFullDetailsDTO) {
      let postBody = userFullDetailsDTO;
      // verify the required parameter 'userFullDetailsDTO' is set
      if (userFullDetailsDTO === undefined || userFullDetailsDTO === null) {
        throw new Error("Missing the required parameter 'userFullDetailsDTO' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create User
     * Create user.
     * @param {module:model/UserFullDetailsDTO} userFullDetailsDTO User information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    createUser(userFullDetailsDTO) {
      return this.createUserWithHttpInfo(userFullDetailsDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete API Token
     * Delete the specified API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteTokenForUserWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteTokenForUser");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/token/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete API Token
     * Delete the specified API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteTokenForUser(token) {
      return this.deleteTokenForUserWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete User
     * Delete user by username.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteUserWithHttpInfo(username) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/user/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete User
     * Delete user by username.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteUser(username) {
      return this.deleteUserWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable API Token
     * Disable the specified API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    disableTokenForUserWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling disableTokenForUser");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/token/{token}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable API Token
     * Disable the specified API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    disableTokenForUser(token) {
      return this.disableTokenForUserWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get User Details
     * Return detailed user information.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserDetailsDTO} and HTTP response
     */
    getDetailsOfUserWithHttpInfo(username) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDetailsOfUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/admin/user/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get User Details
     * Return detailed user information.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserDetailsDTO}
     */
    getDetailsOfUser(username) {
      return this.getDetailsOfUserWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get User by API Token
     * Get the detailed user information corresponding to the API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserDetailsDTO} and HTTP response
     */
    getUserByTokenWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getUserByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserDetailsDTO;
      return this.apiClient.callApi(
        '/api/v1/admin/tokenBy/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get User by API Token
     * Get the detailed user information corresponding to the API Token.
     * @param {String} token API Token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserDetailsDTO}
     */
    getUserByToken(token) {
      return this.getUserByTokenWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List User Permissions
     * List the user's permissions.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listAuthoritiesOfUserWithHttpInfo(username) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listAuthoritiesOfUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/admin/authority/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List User Permissions
     * List the user's permissions.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listAuthoritiesOfUser(username) {
      return this.listAuthoritiesOfUserWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get API Token of User
     * Get the list of API Tokens of the user.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listTokensOfUserWithHttpInfo(username) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listTokensOfUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/admin/token/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get API Token of User
     * Get the list of API Tokens of the user.
     * @param {String} username Username
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listTokensOfUser(username) {
      return this.listTokensOfUserWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserBasicInfoDTO>} and HTTP response
     */
    listUsersWithHttpInfo(pageSize, pageNum) {
      let postBody = null;
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listUsers");
      }
      // verify the required parameter 'pageNum' is set
      if (pageNum === undefined || pageNum === null) {
        throw new Error("Missing the required parameter 'pageNum' when calling listUsers");
      }

      let pathParams = {
        'pageSize': pageSize,
        'pageNum': pageNum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBasicInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/admin/users/{pageSize}/{pageNum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @param {Number} pageSize Maximum quantity
     * @param {Number} pageNum Current page number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserBasicInfoDTO>}
     */
    listUsers(pageSize, pageNum) {
      return this.listUsersWithHttpInfo(pageSize, pageNum)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @param {Number} pageSize Maximum quantity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserBasicInfoDTO>} and HTTP response
     */
    listUsers1WithHttpInfo(pageSize) {
      let postBody = null;
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling listUsers1");
      }

      let pathParams = {
        'pageSize': pageSize
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBasicInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/admin/users/{pageSize}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @param {Number} pageSize Maximum quantity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserBasicInfoDTO>}
     */
    listUsers1(pageSize) {
      return this.listUsers1WithHttpInfo(pageSize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserBasicInfoDTO>} and HTTP response
     */
    listUsers2WithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBasicInfoDTO];
      return this.apiClient.callApi(
        '/api/v1/admin/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List User Information
     * Return user information by page, return the pageNum page, up to pageSize user information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserBasicInfoDTO>}
     */
    listUsers2() {
      return this.listUsers2WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update User Permissions
     * Update the user's permission list.
     * @param {String} username Username
     * @param {Array.<String>} requestBody Permission list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updateAuthoritiesOfUserWithHttpInfo(username, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateAuthoritiesOfUser");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateAuthoritiesOfUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/authority/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update User Permissions
     * Update the user's permission list.
     * @param {String} username Username
     * @param {Array.<String>} requestBody Permission list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updateAuthoritiesOfUser(username, requestBody) {
      return this.updateAuthoritiesOfUserWithHttpInfo(username, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update User
     * Update user information.
     * @param {module:model/UserFullDetailsDTO} userFullDetailsDTO User information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    updateUserWithHttpInfo(userFullDetailsDTO) {
      let postBody = userFullDetailsDTO;
      // verify the required parameter 'userFullDetailsDTO' is set
      if (userFullDetailsDTO === undefined || userFullDetailsDTO === null) {
        throw new Error("Missing the required parameter 'userFullDetailsDTO' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/admin/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update User
     * Update user information.
     * @param {module:model/UserFullDetailsDTO} userFullDetailsDTO User information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    updateUser(userFullDetailsDTO) {
      return this.updateUserWithHttpInfo(userFullDetailsDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
