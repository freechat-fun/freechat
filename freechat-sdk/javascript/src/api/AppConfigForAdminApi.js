/**
 * FreeChat OpenAPI Definition
 * https://github.com/freechat-fun/freechat
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppConfigCreateDTO from '../model/AppConfigCreateDTO';
import AppConfigInfoDTO from '../model/AppConfigInfoDTO';

/**
* AppConfigForAdmin service.
* @module api/AppConfigForAdminApi
* @version 0.1.0
*/
export default class AppConfigForAdminApi {

    /**
    * Constructs a new AppConfigForAdminApi. 
    * @alias module:api/AppConfigForAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Configuration
     * Get the latest configuration information of the application by name.
     * @param {String} name Configuration name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppConfigInfoDTO} and HTTP response
     */
    getAppConfigWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAppConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppConfigInfoDTO;
      return this.apiClient.callApi(
        '/api/v1/admin/app/config/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Configuration
     * Get the latest configuration information of the application by name.
     * @param {String} name Configuration name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppConfigInfoDTO}
     */
    getAppConfig(name) {
      return this.getAppConfigWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Specified Version of Configuration
     * Get the configuration information of the application by name and version.
     * @param {String} name Configuration name
     * @param {Number} version Configuration version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AppConfigInfoDTO} and HTTP response
     */
    getAppConfigByVersionWithHttpInfo(name, version) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAppConfigByVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getAppConfigByVersion");
      }

      let pathParams = {
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppConfigInfoDTO;
      return this.apiClient.callApi(
        '/api/v1/admin/app/config/{name}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Specified Version of Configuration
     * Get the configuration information of the application by name and version.
     * @param {String} name Configuration name
     * @param {Number} version Configuration version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AppConfigInfoDTO}
     */
    getAppConfigByVersion(name, version) {
      return this.getAppConfigByVersionWithHttpInfo(name, version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Configuration Names
     * List all application configuration names.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listAppConfigNamesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/admin/app/configs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Configuration Names
     * List all application configuration names.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listAppConfigNames() {
      return this.listAppConfigNamesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish Configuration
     * Publish application configuration, return configuration version.
     * @param {module:model/AppConfigCreateDTO} appConfigCreateDTO Configuration information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    publishAppConfigWithHttpInfo(appConfigCreateDTO) {
      let postBody = appConfigCreateDTO;
      // verify the required parameter 'appConfigCreateDTO' is set
      if (appConfigCreateDTO === undefined || appConfigCreateDTO === null) {
        throw new Error("Missing the required parameter 'appConfigCreateDTO' when calling publishAppConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1/admin/app/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Publish Configuration
     * Publish application configuration, return configuration version.
     * @param {module:model/AppConfigCreateDTO} appConfigCreateDTO Configuration information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    publishAppConfig(appConfigCreateDTO) {
      return this.publishAppConfigWithHttpInfo(appConfigCreateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
