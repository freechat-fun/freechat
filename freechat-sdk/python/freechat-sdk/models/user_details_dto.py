# coding: utf-8

"""
    FreeChat OpenAPI Definition

    https://github.com/freechat-fun/freechat

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserDetailsDTO(BaseModel):
    """
    Account detailed information
    """ # noqa: E501
    request_id: Optional[StrictStr] = Field(default=None, description="Request identifier", alias="requestId")
    username: Optional[StrictStr] = None
    nickname: Optional[StrictStr] = None
    given_name: Optional[StrictStr] = Field(default=None, alias="givenName")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    family_name: Optional[StrictStr] = Field(default=None, alias="familyName")
    preferred_username: Optional[StrictStr] = Field(default=None, alias="preferredUsername")
    profile: Optional[StrictStr] = None
    picture: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    birthdate: Optional[datetime] = None
    zoneinfo: Optional[StrictStr] = None
    locale: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    platform: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    locked: Optional[StrictBool] = None
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    password_expires_at: Optional[datetime] = Field(default=None, alias="passwordExpiresAt")
    address: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["requestId", "username", "nickname", "givenName", "middleName", "familyName", "preferredUsername", "profile", "picture", "website", "email", "gender", "birthdate", "zoneinfo", "locale", "phoneNumber", "updatedAt", "platform", "enabled", "locked", "expiresAt", "passwordExpiresAt", "address"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestId": obj.get("requestId"),
            "username": obj.get("username"),
            "nickname": obj.get("nickname"),
            "givenName": obj.get("givenName"),
            "middleName": obj.get("middleName"),
            "familyName": obj.get("familyName"),
            "preferredUsername": obj.get("preferredUsername"),
            "profile": obj.get("profile"),
            "picture": obj.get("picture"),
            "website": obj.get("website"),
            "email": obj.get("email"),
            "gender": obj.get("gender"),
            "birthdate": obj.get("birthdate"),
            "zoneinfo": obj.get("zoneinfo"),
            "locale": obj.get("locale"),
            "phoneNumber": obj.get("phoneNumber"),
            "updatedAt": obj.get("updatedAt"),
            "platform": obj.get("platform"),
            "enabled": obj.get("enabled"),
            "locked": obj.get("locked"),
            "expiresAt": obj.get("expiresAt"),
            "passwordExpiresAt": obj.get("passwordExpiresAt"),
            "address": obj.get("address")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


