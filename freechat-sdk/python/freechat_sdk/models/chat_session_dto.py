# coding: utf-8

"""
    FreeChat OpenAPI Definition

    https://github.com/freechat-fun/freechat

    The version of the OpenAPI document: 0.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freechat_sdk.models.character_summary_dto import CharacterSummaryDTO
from freechat_sdk.models.chat_context_dto import ChatContextDTO
from freechat_sdk.models.chat_message_record_dto import ChatMessageRecordDTO
from typing import Optional, Set
from typing_extensions import Self

class ChatSessionDTO(BaseModel):
    """
    Chat session
    """ # noqa: E501
    context: Optional[ChatContextDTO] = None
    character: Optional[CharacterSummaryDTO] = None
    latest_message_record: Optional[ChatMessageRecordDTO] = Field(default=None, alias="latestMessageRecord")
    sender_status: Optional[StrictStr] = Field(default=None, description="Sender status: online | offline | invisible", alias="senderStatus")
    is_debug_enabled: Optional[StrictBool] = Field(default=None, description="Is it possible to debug", alias="isDebugEnabled")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["context", "character", "latestMessageRecord", "senderStatus", "isDebugEnabled"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatSessionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of character
        if self.character:
            _dict['character'] = self.character.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_message_record
        if self.latest_message_record:
            _dict['latestMessageRecord'] = self.latest_message_record.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatSessionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": ChatContextDTO.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "character": CharacterSummaryDTO.from_dict(obj["character"]) if obj.get("character") is not None else None,
            "latestMessageRecord": ChatMessageRecordDTO.from_dict(obj["latestMessageRecord"]) if obj.get("latestMessageRecord") is not None else None,
            "senderStatus": obj.get("senderStatus"),
            "isDebugEnabled": obj.get("isDebugEnabled")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


