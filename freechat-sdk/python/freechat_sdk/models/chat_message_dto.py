# coding: utf-8

"""
    FreeChat OpenAPI Definition

    https://github.com/freechat-fun/freechat

    The version of the OpenAPI document: 0.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freechat_sdk.models.chat_content_dto import ChatContentDTO
from freechat_sdk.models.chat_tool_call_dto import ChatToolCallDTO
from typing import Optional, Set
from typing_extensions import Self

class ChatMessageDTO(BaseModel):
    """
    Chat message
    """ # noqa: E501
    role: Optional[StrictStr] = Field(default=None, description="Chat role: system | assistant | user | tool_call | tool_result")
    name: Optional[StrictStr] = Field(default=None, description="user: Name of the user role; tool_call: Name of the called tool")
    contents: Optional[List[ChatContentDTO]] = Field(default=None, description="default: Dialogue content; tool_result: tool call result, serialized as json")
    tool_calls: Optional[List[ChatToolCallDTO]] = Field(default=None, description="Tool calls information during the conversation", alias="toolCalls")
    context: Optional[StrictStr] = Field(default=None, description="Contextual information in this round of conversation (the external RAG result can be passed in through this parameter)")
    content_text: Optional[StrictStr] = Field(default=None, alias="contentText")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["role", "name", "contents", "toolCalls", "context", "contentText"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatMessageDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item in self.contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tool_calls (list)
        _items = []
        if self.tool_calls:
            for _item in self.tool_calls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['toolCalls'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatMessageDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "name": obj.get("name"),
            "contents": [ChatContentDTO.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "toolCalls": [ChatToolCallDTO.from_dict(_item) for _item in obj["toolCalls"]] if obj.get("toolCalls") is not None else None,
            "context": obj.get("context"),
            "contentText": obj.get("contentText")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


