# coding: utf-8

"""
    FreeChat OpenAPI Definition

    https://github.com/freechat-fun/freechat

    The version of the OpenAPI document: 0.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freechat_sdk.models.chat_prompt_content_dto import ChatPromptContentDTO
from typing import Optional, Set
from typing_extensions import Self

class PromptUpdateDTO(BaseModel):
    """
    Request data for updating prompt information
    """ # noqa: E501
    parent_uid: Optional[StrictStr] = Field(default=None, description="Referenced prompt", alias="parentUid")
    visibility: Optional[StrictStr] = Field(default=None, description="Visibility: private (default), public, public_org, hidden")
    name: StrictStr = Field(description="Prompt name")
    description: Optional[StrictStr] = Field(default=None, description="Prompt description")
    template: Optional[StrictStr] = Field(default=None, description="Prompt text template content, choose one from template and chatTemplate field, priority: template > chatTemplate")
    chat_template: Optional[ChatPromptContentDTO] = Field(default=None, alias="chatTemplate")
    format: Optional[StrictStr] = Field(default=None, description="Prompt format: mustache (default) | f_string")
    lang: Optional[StrictStr] = Field(default=None, description="Prompt language: en (default) | zh_CN | ...")
    example: Optional[StrictStr] = Field(default=None, description="Prompt example")
    inputs: Optional[StrictStr] = Field(default=None, description="Prompt parameters, JSON format")
    ext: Optional[StrictStr] = Field(default=None, description="Additional information, JSON format")
    draft: Optional[StrictStr] = Field(default=None, description="Draft content")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tag set")
    ai_models: Optional[List[StrictStr]] = Field(default=None, description="Supported model set, empty means no model limit", alias="aiModels")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["parentUid", "visibility", "name", "description", "template", "chatTemplate", "format", "lang", "example", "inputs", "ext", "draft", "tags", "aiModels"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromptUpdateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_template
        if self.chat_template:
            _dict['chatTemplate'] = self.chat_template.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromptUpdateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parentUid": obj.get("parentUid"),
            "visibility": obj.get("visibility"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "template": obj.get("template"),
            "chatTemplate": ChatPromptContentDTO.from_dict(obj["chatTemplate"]) if obj.get("chatTemplate") is not None else None,
            "format": obj.get("format"),
            "lang": obj.get("lang"),
            "example": obj.get("example"),
            "inputs": obj.get("inputs"),
            "ext": obj.get("ext"),
            "draft": obj.get("draft"),
            "tags": obj.get("tags"),
            "aiModels": obj.get("aiModels")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


